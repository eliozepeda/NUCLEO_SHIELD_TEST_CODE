
NUCLEO_SHIELD_TESTCODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000869c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08008840  08008840  00009840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e14  08008e14  0000a1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008e14  08008e14  00009e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e1c  08008e1c  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e1c  08008e1c  00009e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e20  08008e20  00009e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08008e24  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200001dc  08009000  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08009000  0000a490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1d4  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a9  00000000  00000000  000183e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  0001a490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b83  00000000  00000000  0001b330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e41  00000000  00000000  0001beb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001194c  00000000  00000000  00034cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cc6e  00000000  00000000  00046640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e32ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f1c  00000000  00000000  000e32f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000e8210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008824 	.word	0x08008824

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008824 	.word	0x08008824

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <AT24C128C_WaitForWrite>:
 * @param hi2c Puntero al handle de I2C usado para comunicarse con la EEPROM.
 * @retval HAL_OK si la EEPROM respondió antes de que se agotara el tiempo.
 * @retval HAL_TIMEOUT si no respondió dentro del tiempo límite.
 */
static HAL_StatusTypeDef AT24C128C_WaitForWrite(I2C_HandleTypeDef *hi2c)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
    // Establece un tiempo máximo de espera de 10 ms desde el momento actual
    uint32_t timeout = HAL_GetTick() + 10;
 8000f8c:	f001 f9b4 	bl	80022f8 <HAL_GetTick>
 8000f90:	4603      	mov	r3, r0
 8000f92:	330a      	adds	r3, #10
 8000f94:	60fb      	str	r3, [r7, #12]

    // Mientras no haya pasado el tiempo de espera...
    while (HAL_GetTick() < timeout)
 8000f96:	e00b      	b.n	8000fb0 <AT24C128C_WaitForWrite+0x2c>
    {
        // Intenta comunicar con la EEPROM (dirección, 1 intento, sin esperar más tiempo)
        if (HAL_I2C_IsDeviceReady(hi2c, EEPROM_I2C_ADDR, 1, HAL_MAX_DELAY) == HAL_OK)
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	21a0      	movs	r1, #160	@ 0xa0
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f003 f819 	bl	8003fd8 <HAL_I2C_IsDeviceReady>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <AT24C128C_WaitForWrite+0x2c>
            return HAL_OK;  // La EEPROM ya está lista
 8000fac:	2300      	movs	r3, #0
 8000fae:	e006      	b.n	8000fbe <AT24C128C_WaitForWrite+0x3a>
    while (HAL_GetTick() < timeout)
 8000fb0:	f001 f9a2 	bl	80022f8 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d8ed      	bhi.n	8000f98 <AT24C128C_WaitForWrite+0x14>
    }

    // Si se agotó el tiempo y nunca respondió, retorna error de timeout
    return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <AT24C128C_WriteBuffer>:
 * @retval HAL_OK       Si la escritura completa fue exitosa.
 * @retval HAL_ERROR    Si ocurrió un error durante alguna transmisión I2C.
 * @retval HAL_TIMEOUT  Si alguna operación I2C excedió el tiempo de espera.
 */
HAL_StatusTypeDef AT24C128C_WriteBuffer(I2C_HandleTypeDef *hi2c, uint16_t memAddress, uint8_t *data, uint16_t len)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b098      	sub	sp, #96	@ 0x60
 8000fca:	af02      	add	r7, sp, #8
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	817b      	strh	r3, [r7, #10]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	813b      	strh	r3, [r7, #8]
    while (len > 0)
 8000fda:	e05e      	b.n	800109a <AT24C128C_WriteBuffer+0xd4>
    {
        // Calcular el desplazamiento dentro de la página actual
        uint8_t page_offset = memAddress % EEPROM_PAGE_SIZE;
 8000fdc:	897b      	ldrh	r3, [r7, #10]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000fe4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

        // Calcular cuántos bytes se pueden escribir sin cruzar el límite de página
        uint8_t chunk = EEPROM_PAGE_SIZE - page_offset;
 8000fe8:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000fec:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000ff0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if (chunk > len) chunk = len;  // Ajustar si quedan menos datos que el espacio disponible
 8000ff4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	893a      	ldrh	r2, [r7, #8]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d202      	bcs.n	8001006 <AT24C128C_WriteBuffer+0x40>
 8001000:	893b      	ldrh	r3, [r7, #8]
 8001002:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        // Preparar buffer de escritura: 2 bytes para dirección + datos a escribir
        uint8_t buf[2 + EEPROM_PAGE_SIZE];
        buf[0] = memAddress >> 8;       // Byte alto de la dirección
 8001006:	897b      	ldrh	r3, [r7, #10]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	b29b      	uxth	r3, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	743b      	strb	r3, [r7, #16]
        buf[1] = memAddress & 0xFF;     // Byte bajo de la dirección
 8001010:	897b      	ldrh	r3, [r7, #10]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	747b      	strb	r3, [r7, #17]
        memcpy(&buf[2], data, chunk);   // Copiar los datos al buffer
 8001016:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	3302      	adds	r3, #2
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4618      	mov	r0, r3
 8001024:	f005 fc6d 	bl	8006902 <memcpy>

        // Transmitir dirección + datos al dispositivo
        HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, EEPROM_I2C_ADDR, buf, 2 + chunk, HAL_MAX_DELAY);
 8001028:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800102c:	b29b      	uxth	r3, r3
 800102e:	3302      	adds	r3, #2
 8001030:	b29b      	uxth	r3, r3
 8001032:	f107 0210 	add.w	r2, r7, #16
 8001036:	f04f 31ff 	mov.w	r1, #4294967295
 800103a:	9100      	str	r1, [sp, #0]
 800103c:	21a0      	movs	r1, #160	@ 0xa0
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f002 f96e 	bl	8003320 <HAL_I2C_Master_Transmit>
 8001044:	4603      	mov	r3, r0
 8001046:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
        if (status != HAL_OK)
 800104a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <AT24C128C_WriteBuffer+0x92>
            return status;  // Error durante la transmisión
 8001052:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001056:	e024      	b.n	80010a2 <AT24C128C_WriteBuffer+0xdc>

        // Esperar a que la EEPROM complete la escritura interna (puede demorar varios ms)
        HAL_Delay(5); // Alternativamente, usar polling de ACK con AT24C128C_WaitForWrite()
 8001058:	2005      	movs	r0, #5
 800105a:	f001 f959 	bl	8002310 <HAL_Delay>
        status = AT24C128C_WaitForWrite(hi2c);
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f7ff ff90 	bl	8000f84 <AT24C128C_WaitForWrite>
 8001064:	4603      	mov	r3, r0
 8001066:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
        if (status != HAL_OK)
 800106a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <AT24C128C_WriteBuffer+0xb2>
            return status;  // Fallo al esperar escritura
 8001072:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001076:	e014      	b.n	80010a2 <AT24C128C_WriteBuffer+0xdc>

        // Avanzar puntero y dirección para la próxima página (si queda más por escribir)
        memAddress += chunk;
 8001078:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800107c:	b29a      	uxth	r2, r3
 800107e:	897b      	ldrh	r3, [r7, #10]
 8001080:	4413      	add	r3, r2
 8001082:	817b      	strh	r3, [r7, #10]
        data += chunk;
 8001084:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	607b      	str	r3, [r7, #4]
        len -= chunk;
 800108e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001092:	b29b      	uxth	r3, r3
 8001094:	893a      	ldrh	r2, [r7, #8]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	813b      	strh	r3, [r7, #8]
    while (len > 0)
 800109a:	893b      	ldrh	r3, [r7, #8]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d19d      	bne.n	8000fdc <AT24C128C_WriteBuffer+0x16>
    }

    return HAL_OK; // Escritura exitosa
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3758      	adds	r7, #88	@ 0x58
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <AT24C128C_ReadBuffer>:
 * @retval HAL_OK       Si la lectura fue exitosa.
 * @retval HAL_ERROR    Si hubo un fallo al enviar la dirección o al leer los datos.
 * @retval HAL_TIMEOUT  Si alguna operación I2C excedió el tiempo de espera.
 */
HAL_StatusTypeDef AT24C128C_ReadBuffer(I2C_HandleTypeDef *hi2c, uint16_t memAddress, uint8_t *data, uint16_t len)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b088      	sub	sp, #32
 80010ae:	af02      	add	r7, sp, #8
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	461a      	mov	r2, r3
 80010b6:	460b      	mov	r3, r1
 80010b8:	817b      	strh	r3, [r7, #10]
 80010ba:	4613      	mov	r3, r2
 80010bc:	813b      	strh	r3, [r7, #8]
    // Preparar la dirección de memoria en formato big-endian (MSB primero)
    uint8_t addr[2] = {
 80010be:	897b      	ldrh	r3, [r7, #10]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	753b      	strb	r3, [r7, #20]
 80010c8:	897b      	ldrh	r3, [r7, #10]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	757b      	strb	r3, [r7, #21]
        memAddress >> 8,        // Byte alto de la dirección
        memAddress & 0xFF       // Byte bajo de la dirección
    };

    // Enviar la dirección al dispositivo para posicionar el puntero interno
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, EEPROM_I2C_ADDR, addr, 2, HAL_MAX_DELAY);
 80010ce:	f107 0214 	add.w	r2, r7, #20
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2302      	movs	r3, #2
 80010da:	21a0      	movs	r1, #160	@ 0xa0
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f002 f91f 	bl	8003320 <HAL_I2C_Master_Transmit>
 80010e2:	4603      	mov	r3, r0
 80010e4:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <AT24C128C_ReadBuffer+0x46>
        return status; // Error al enviar dirección
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	e009      	b.n	8001104 <AT24C128C_ReadBuffer+0x5a>

    // Leer `len` bytes desde la dirección especificada
    return HAL_I2C_Master_Receive(hi2c, EEPROM_I2C_ADDR, data, len, HAL_MAX_DELAY);
 80010f0:	893b      	ldrh	r3, [r7, #8]
 80010f2:	f04f 32ff 	mov.w	r2, #4294967295
 80010f6:	9200      	str	r2, [sp, #0]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	21a0      	movs	r1, #160	@ 0xa0
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f002 fa0d 	bl	800351c <HAL_I2C_Master_Receive>
 8001102:	4603      	mov	r3, r0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	b5b0      	push	{r4, r5, r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001112:	f001 f88b 	bl	800222c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001116:	f000 f8d1 	bl	80012bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111a:	f000 fa1d 	bl	8001558 <MX_GPIO_Init>
  MX_ADC1_Init();
 800111e:	f000 f937 	bl	8001390 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001122:	f000 f999 	bl	8001458 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001126:	f000 f9c5 	bl	80014b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /*Inicio de conteo del TIMER 2, este timer controla la periodicidad de las tareas*/
  HAL_TIM_Base_Start(&htim1);
 800112a:	4854      	ldr	r0, [pc, #336]	@ (800127c <main+0x170>)
 800112c:	f004 fa5a 	bl	80055e4 <HAL_TIM_Base_Start>

  Init_MPU6050();
 8001130:	f000 fac2 	bl	80016b8 <Init_MPU6050>
  Load_EEPROM_Header();
 8001134:	f000 fad8 	bl	80016e8 <Load_EEPROM_Header>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*Actualización de la variable de tiempo*/
	  time = __HAL_TIM_GET_COUNTER(&htim1);
 8001138:	4b50      	ldr	r3, [pc, #320]	@ (800127c <main+0x170>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113e:	b29a      	uxth	r2, r3
 8001140:	4b4f      	ldr	r3, [pc, #316]	@ (8001280 <main+0x174>)
 8001142:	801a      	strh	r2, [r3, #0]

	  /* 100 ms TASK */
	  if(time - CIEN_MS_FLAG == CIEN_MS)
 8001144:	4b4e      	ldr	r3, [pc, #312]	@ (8001280 <main+0x174>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b4e      	ldr	r3, [pc, #312]	@ (8001284 <main+0x178>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001154:	d10c      	bne.n	8001170 <main+0x64>
	  {
		  if(Leer_datos == 1)
 8001156:	4b4c      	ldr	r3, [pc, #304]	@ (8001288 <main+0x17c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <main+0x56>
		  {
			  Read_EEPROM();
 800115e:	f000 fbf1 	bl	8001944 <Read_EEPROM>
		  }

		  CIEN_MS_FLAG += 1000;//Actualizamos bandera para cumplir con el tiempo
 8001162:	4b48      	ldr	r3, [pc, #288]	@ (8001284 <main+0x178>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800116a:	b29a      	uxth	r2, r3
 800116c:	4b45      	ldr	r3, [pc, #276]	@ (8001284 <main+0x178>)
 800116e:	801a      	strh	r2, [r3, #0]
	  }

	  /* 500 ms TASK */
	  if(time - QUINIENTOS_MS_FLAG == QUINIENTOS_MS)
 8001170:	4b43      	ldr	r3, [pc, #268]	@ (8001280 <main+0x174>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b45      	ldr	r3, [pc, #276]	@ (800128c <main+0x180>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001180:	4293      	cmp	r3, r2
 8001182:	d156      	bne.n	8001232 <main+0x126>
	  {
		  Read_ADC_Channels();
 8001184:	f000 fa70 	bl	8001668 <Read_ADC_Channels>

		  // Leer todos los datos del MPU6050 (acelerómetro y giroscopio)
		  if (MPU6050_ReadAll(&hi2c1, &mpu) == HAL_OK)
 8001188:	4941      	ldr	r1, [pc, #260]	@ (8001290 <main+0x184>)
 800118a:	4842      	ldr	r0, [pc, #264]	@ (8001294 <main+0x188>)
 800118c:	f000 fc84 	bl	8001a98 <MPU6050_ReadAll>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d145      	bne.n	8001222 <main+0x116>
		  {
		      // Extraer el ángulo Y (inclinación lateral o "Roll")
		      float angle = mpu.angleY;
 8001196:	4b3e      	ldr	r3, [pc, #248]	@ (8001290 <main+0x184>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	607b      	str	r3, [r7, #4]

		      // Imprimir los ángulos actuales
		      printf("Pitch: %.2f | Roll: %.2f\r\n", mpu.angleX, angle);
 800119c:	4b3c      	ldr	r3, [pc, #240]	@ (8001290 <main+0x184>)
 800119e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f9d9 	bl	8000558 <__aeabi_f2d>
 80011a6:	4604      	mov	r4, r0
 80011a8:	460d      	mov	r5, r1
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff f9d4 	bl	8000558 <__aeabi_f2d>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	e9cd 2300 	strd	r2, r3, [sp]
 80011b8:	4622      	mov	r2, r4
 80011ba:	462b      	mov	r3, r5
 80011bc:	4836      	ldr	r0, [pc, #216]	@ (8001298 <main+0x18c>)
 80011be:	f005 f9d9 	bl	8006574 <iprintf>

		      // Detectar transición: cuando el ángulo pasa de ≤20 a >20
		      if (!triggered && lastAngleY <= 20.0f && angle > 20.0f)
 80011c2:	4b36      	ldr	r3, [pc, #216]	@ (800129c <main+0x190>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d118      	bne.n	80011fc <main+0xf0>
 80011ca:	4b35      	ldr	r3, [pc, #212]	@ (80012a0 <main+0x194>)
 80011cc:	edd3 7a00 	vldr	s15, [r3]
 80011d0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80011d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	d80e      	bhi.n	80011fc <main+0xf0>
 80011de:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e2:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80011e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	dd05      	ble.n	80011fc <main+0xf0>
		      {
		          // Llamar función para guardar las muestras del evento en EEPROM
		          Store_Event_Samples();
 80011f0:	f000 fb3c 	bl	800186c <Store_Event_Samples>

		          // Marcar que ya se registró el evento, evitar duplicados
		          triggered = 1;
 80011f4:	4b29      	ldr	r3, [pc, #164]	@ (800129c <main+0x190>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
 80011fa:	e00f      	b.n	800121c <main+0x110>
		      }
		      // Detectar que el ángulo volvió a un valor bajo (≤20)
		      else if (triggered && angle <= 20.0f)
 80011fc:	4b27      	ldr	r3, [pc, #156]	@ (800129c <main+0x190>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00b      	beq.n	800121c <main+0x110>
 8001204:	edd7 7a01 	vldr	s15, [r7, #4]
 8001208:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800120c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	d802      	bhi.n	800121c <main+0x110>
		      {
		          // Permitir registrar un nuevo evento la próxima vez que suba
		          triggered = 0;
 8001216:	4b21      	ldr	r3, [pc, #132]	@ (800129c <main+0x190>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
		      }

		      // Guardar el valor actual como referencia para la próxima iteración
		      lastAngleY = angle;
 800121c:	4a20      	ldr	r2, [pc, #128]	@ (80012a0 <main+0x194>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
		  }

		  QUINIENTOS_MS_FLAG += 5000;//Actualizamos bandera para cumplir con el tiempo
 8001222:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <main+0x180>)
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800122a:	3308      	adds	r3, #8
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b17      	ldr	r3, [pc, #92]	@ (800128c <main+0x180>)
 8001230:	801a      	strh	r2, [r3, #0]
	  }

	  /* 1 sec TASK */
	  if(time - UN_SEGUNDO_FLAG == UN_SEGUNDO)
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <main+0x174>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <main+0x198>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001242:	4293      	cmp	r3, r2
 8001244:	f47f af78 	bne.w	8001138 <main+0x2c>
	  {


		  //streaming de canal 9
		  printf("VALOR ADC CANAL 9: %d \r\n", CH9);
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <main+0x19c>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	4817      	ldr	r0, [pc, #92]	@ (80012ac <main+0x1a0>)
 8001250:	f005 f990 	bl	8006574 <iprintf>
		  //streaming de canal 14
		  printf("VALOR ADC CANAL 14: %d \r\n", CH14);
 8001254:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <main+0x1a4>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	4816      	ldr	r0, [pc, #88]	@ (80012b4 <main+0x1a8>)
 800125c:	f005 f98a 	bl	8006574 <iprintf>
		  printf("-----------------------------------\r\n");
 8001260:	4815      	ldr	r0, [pc, #84]	@ (80012b8 <main+0x1ac>)
 8001262:	f005 f9ef 	bl	8006644 <puts>



		  __HAL_TIM_SET_COUNTER(&htim1,0); //Reseteamos contador
 8001266:	4b05      	ldr	r3, [pc, #20]	@ (800127c <main+0x170>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	@ 0x24
		  //Reseteamos banderas de control de tiempo
		  CIEN_MS_FLAG = 0;
 800126e:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <main+0x178>)
 8001270:	2200      	movs	r2, #0
 8001272:	801a      	strh	r2, [r3, #0]
		  QUINIENTOS_MS_FLAG = 0;
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <main+0x180>)
 8001276:	2200      	movs	r2, #0
 8001278:	801a      	strh	r2, [r3, #0]
	  time = __HAL_TIM_GET_COUNTER(&htim1);
 800127a:	e75d      	b.n	8001138 <main+0x2c>
 800127c:	20000294 	.word	0x20000294
 8001280:	200002e2 	.word	0x200002e2
 8001284:	200002dc 	.word	0x200002dc
 8001288:	200002e8 	.word	0x200002e8
 800128c:	200002de 	.word	0x200002de
 8001290:	200002f0 	.word	0x200002f0
 8001294:	20000240 	.word	0x20000240
 8001298:	08008840 	.word	0x08008840
 800129c:	20000330 	.word	0x20000330
 80012a0:	2000032c 	.word	0x2000032c
 80012a4:	200002e0 	.word	0x200002e0
 80012a8:	200002ea 	.word	0x200002ea
 80012ac:	0800885c 	.word	0x0800885c
 80012b0:	200002ec 	.word	0x200002ec
 80012b4:	08008878 	.word	0x08008878
 80012b8:	08008894 	.word	0x08008894

080012bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b094      	sub	sp, #80	@ 0x50
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	2230      	movs	r2, #48	@ 0x30
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f005 fa9a 	bl	8006804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	4b28      	ldr	r3, [pc, #160]	@ (8001388 <SystemClock_Config+0xcc>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	4a27      	ldr	r2, [pc, #156]	@ (8001388 <SystemClock_Config+0xcc>)
 80012ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f0:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <SystemClock_Config+0xcc>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	4b22      	ldr	r3, [pc, #136]	@ (800138c <SystemClock_Config+0xd0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a21      	ldr	r2, [pc, #132]	@ (800138c <SystemClock_Config+0xd0>)
 8001306:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <SystemClock_Config+0xd0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001318:	2302      	movs	r3, #2
 800131a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800131c:	2301      	movs	r3, #1
 800131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001320:	2310      	movs	r3, #16
 8001322:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001324:	2302      	movs	r3, #2
 8001326:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001328:	2300      	movs	r3, #0
 800132a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800132c:	2310      	movs	r3, #16
 800132e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001330:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001334:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001336:	2304      	movs	r3, #4
 8001338:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800133a:	2304      	movs	r3, #4
 800133c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	4618      	mov	r0, r3
 8001344:	f003 fc7a 	bl	8004c3c <HAL_RCC_OscConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800134e:	f000 fb6b 	bl	8001a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001352:	230f      	movs	r3, #15
 8001354:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001356:	2302      	movs	r3, #2
 8001358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001362:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2102      	movs	r1, #2
 800136e:	4618      	mov	r0, r3
 8001370:	f003 fedc 	bl	800512c <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800137a:	f000 fb55 	bl	8001a28 <Error_Handler>
  }
}
 800137e:	bf00      	nop
 8001380:	3750      	adds	r7, #80	@ 0x50
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40007000 	.word	0x40007000

08001390 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013a2:	4b2a      	ldr	r3, [pc, #168]	@ (800144c <MX_ADC1_Init+0xbc>)
 80013a4:	4a2a      	ldr	r2, [pc, #168]	@ (8001450 <MX_ADC1_Init+0xc0>)
 80013a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013a8:	4b28      	ldr	r3, [pc, #160]	@ (800144c <MX_ADC1_Init+0xbc>)
 80013aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b0:	4b26      	ldr	r3, [pc, #152]	@ (800144c <MX_ADC1_Init+0xbc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013b6:	4b25      	ldr	r3, [pc, #148]	@ (800144c <MX_ADC1_Init+0xbc>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013bc:	4b23      	ldr	r3, [pc, #140]	@ (800144c <MX_ADC1_Init+0xbc>)
 80013be:	2200      	movs	r2, #0
 80013c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80013c2:	4b22      	ldr	r3, [pc, #136]	@ (800144c <MX_ADC1_Init+0xbc>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80013ca:	4b20      	ldr	r3, [pc, #128]	@ (800144c <MX_ADC1_Init+0xbc>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013d0:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <MX_ADC1_Init+0xbc>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d6:	4b1d      	ldr	r3, [pc, #116]	@ (800144c <MX_ADC1_Init+0xbc>)
 80013d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001454 <MX_ADC1_Init+0xc4>)
 80013da:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <MX_ADC1_Init+0xbc>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <MX_ADC1_Init+0xbc>)
 80013e4:	2202      	movs	r2, #2
 80013e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013e8:	4b18      	ldr	r3, [pc, #96]	@ (800144c <MX_ADC1_Init+0xbc>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <MX_ADC1_Init+0xbc>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f6:	4815      	ldr	r0, [pc, #84]	@ (800144c <MX_ADC1_Init+0xbc>)
 80013f8:	f000 ffae 	bl	8002358 <HAL_ADC_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8001402:	f000 fb11 	bl	8001a28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001406:	2309      	movs	r3, #9
 8001408:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800140a:	2301      	movs	r3, #1
 800140c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800140e:	2307      	movs	r3, #7
 8001410:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	480d      	ldr	r0, [pc, #52]	@ (800144c <MX_ADC1_Init+0xbc>)
 8001418:	f001 f92e 	bl	8002678 <HAL_ADC_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001422:	f000 fb01 	bl	8001a28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001426:	230e      	movs	r3, #14
 8001428:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800142a:	2302      	movs	r3, #2
 800142c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142e:	463b      	mov	r3, r7
 8001430:	4619      	mov	r1, r3
 8001432:	4806      	ldr	r0, [pc, #24]	@ (800144c <MX_ADC1_Init+0xbc>)
 8001434:	f001 f920 	bl	8002678 <HAL_ADC_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800143e:	f000 faf3 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200001f8 	.word	0x200001f8
 8001450:	40012000 	.word	0x40012000
 8001454:	0f000001 	.word	0x0f000001

08001458 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800145e:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <MX_I2C1_Init+0x54>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001464:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <MX_I2C1_Init+0x58>)
 8001466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001476:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800147a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001496:	f001 fdff 	bl	8003098 <HAL_I2C_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014a0:	f000 fac2 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000240 	.word	0x20000240
 80014ac:	40005400 	.word	0x40005400
 80014b0:	000186a0 	.word	0x000186a0

080014b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	463b      	mov	r3, r7
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <MX_TIM1_Init+0x9c>)
 80014d2:	4a20      	ldr	r2, [pc, #128]	@ (8001554 <MX_TIM1_Init+0xa0>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400 - 1;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <MX_TIM1_Init+0x9c>)
 80014d8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80014dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b1c      	ldr	r3, [pc, #112]	@ (8001550 <MX_TIM1_Init+0x9c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10500 - 1;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <MX_TIM1_Init+0x9c>)
 80014e6:	f642 1203 	movw	r2, #10499	@ 0x2903
 80014ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <MX_TIM1_Init+0x9c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014f2:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <MX_TIM1_Init+0x9c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <MX_TIM1_Init+0x9c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014fe:	4814      	ldr	r0, [pc, #80]	@ (8001550 <MX_TIM1_Init+0x9c>)
 8001500:	f004 f820 	bl	8005544 <HAL_TIM_Base_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800150a:	f000 fa8d 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001512:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	4619      	mov	r1, r3
 800151a:	480d      	ldr	r0, [pc, #52]	@ (8001550 <MX_TIM1_Init+0x9c>)
 800151c:	f004 f8bc 	bl	8005698 <HAL_TIM_ConfigClockSource>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001526:	f000 fa7f 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001532:	463b      	mov	r3, r7
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	@ (8001550 <MX_TIM1_Init+0x9c>)
 8001538:	f004 fa96 	bl	8005a68 <HAL_TIMEx_MasterConfigSynchronization>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001542:	f000 fa71 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000294 	.word	0x20000294
 8001554:	40010000 	.word	0x40010000

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b3a      	ldr	r3, [pc, #232]	@ (800165c <MX_GPIO_Init+0x104>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a39      	ldr	r2, [pc, #228]	@ (800165c <MX_GPIO_Init+0x104>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b37      	ldr	r3, [pc, #220]	@ (800165c <MX_GPIO_Init+0x104>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b33      	ldr	r3, [pc, #204]	@ (800165c <MX_GPIO_Init+0x104>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a32      	ldr	r2, [pc, #200]	@ (800165c <MX_GPIO_Init+0x104>)
 8001594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b30      	ldr	r3, [pc, #192]	@ (800165c <MX_GPIO_Init+0x104>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b2c      	ldr	r3, [pc, #176]	@ (800165c <MX_GPIO_Init+0x104>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a2b      	ldr	r2, [pc, #172]	@ (800165c <MX_GPIO_Init+0x104>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b29      	ldr	r3, [pc, #164]	@ (800165c <MX_GPIO_Init+0x104>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b25      	ldr	r3, [pc, #148]	@ (800165c <MX_GPIO_Init+0x104>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a24      	ldr	r2, [pc, #144]	@ (800165c <MX_GPIO_Init+0x104>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b22      	ldr	r3, [pc, #136]	@ (800165c <MX_GPIO_Init+0x104>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80015e4:	481e      	ldr	r0, [pc, #120]	@ (8001660 <MX_GPIO_Init+0x108>)
 80015e6:	f001 fd0b 	bl	8003000 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015ea:	230c      	movs	r3, #12
 80015ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015fa:	2307      	movs	r3, #7
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4816      	ldr	r0, [pc, #88]	@ (8001660 <MX_GPIO_Init+0x108>)
 8001606:	f001 fb77 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 800160a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800160e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	480f      	ldr	r0, [pc, #60]	@ (8001660 <MX_GPIO_Init+0x108>)
 8001624:	f001 fb68 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin;
 8001628:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4809      	ldr	r0, [pc, #36]	@ (8001664 <MX_GPIO_Init+0x10c>)
 8001640:	f001 fb5a 	bl	8002cf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2101      	movs	r1, #1
 8001648:	2028      	movs	r0, #40	@ 0x28
 800164a:	f001 fb1e 	bl	8002c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800164e:	2028      	movs	r0, #40	@ 0x28
 8001650:	f001 fb37 	bl	8002cc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	@ 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000
 8001664:	40020400 	.word	0x40020400

08001668 <Read_ADC_Channels>:

/* USER CODE BEGIN 4 */
/*Read_ADC_Channels lee los canales de ADC uno por uno*/
void Read_ADC_Channels(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < NUM_OF_ADC_CHANNELS ; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	e014      	b.n	800169e <Read_ADC_Channels+0x36>
	{
		HAL_ADC_Start(&hadc1);
 8001674:	480e      	ldr	r0, [pc, #56]	@ (80016b0 <Read_ADC_Channels+0x48>)
 8001676:	f000 feb3 	bl	80023e0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800167a:	f04f 31ff 	mov.w	r1, #4294967295
 800167e:	480c      	ldr	r0, [pc, #48]	@ (80016b0 <Read_ADC_Channels+0x48>)
 8001680:	f000 ff62 	bl	8002548 <HAL_ADC_PollForConversion>
		*ADC_CHANNELS[i] = HAL_ADC_GetValue(&hadc1);
 8001684:	480a      	ldr	r0, [pc, #40]	@ (80016b0 <Read_ADC_Channels+0x48>)
 8001686:	f000 ffea 	bl	800265e <HAL_ADC_GetValue>
 800168a:	4601      	mov	r1, r0
 800168c:	4a09      	ldr	r2, [pc, #36]	@ (80016b4 <Read_ADC_Channels+0x4c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	b28a      	uxth	r2, r1
 8001696:	801a      	strh	r2, [r3, #0]
	for(int i = 0 ; i < NUM_OF_ADC_CHANNELS ; i++)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3301      	adds	r3, #1
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	dde7      	ble.n	8001674 <Read_ADC_Channels+0xc>
	}
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200001f8 	.word	0x200001f8
 80016b4:	20000000 	.word	0x20000000

080016b8 <Init_MPU6050>:

/**
 * @brief Inicializa el sensor MPU6050 y detiene el programa si falla.
 */
void Init_MPU6050(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
    if (MPU6050_Init(&hi2c1) != HAL_OK)
 80016bc:	4807      	ldr	r0, [pc, #28]	@ (80016dc <Init_MPU6050+0x24>)
 80016be:	f000 f9b9 	bl	8001a34 <MPU6050_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d004      	beq.n	80016d2 <Init_MPU6050+0x1a>
    {
        printf("Error initializing MPU6050\r\n");
 80016c8:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <Init_MPU6050+0x28>)
 80016ca:	f004 ffbb 	bl	8006644 <puts>
        while (1);
 80016ce:	bf00      	nop
 80016d0:	e7fd      	b.n	80016ce <Init_MPU6050+0x16>
    }
    printf("MPU6050 initialized!\r\n");
 80016d2:	4804      	ldr	r0, [pc, #16]	@ (80016e4 <Init_MPU6050+0x2c>)
 80016d4:	f004 ffb6 	bl	8006644 <puts>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000240 	.word	0x20000240
 80016e0:	080088bc 	.word	0x080088bc
 80016e4:	080088d8 	.word	0x080088d8

080016e8 <Load_EEPROM_Header>:
 *
 * @param  Ninguno
 * @retval Ninguno
 */
void Load_EEPROM_Header(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
    uint8_t header[2]; // Arreglo para almacenar los 2 bytes del encabezado

    // Leer los 2 bytes iniciales que representan el número total de muestras guardadas
    if (AT24C128C_ReadBuffer(&hi2c1, EEPROM_HEADER_ADDR, header, 2) == HAL_OK)
 80016ee:	1d3a      	adds	r2, r7, #4
 80016f0:	2302      	movs	r3, #2
 80016f2:	2100      	movs	r1, #0
 80016f4:	4822      	ldr	r0, [pc, #136]	@ (8001780 <Load_EEPROM_Header+0x98>)
 80016f6:	f7ff fcd8 	bl	80010aa <AT24C128C_ReadBuffer>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d137      	bne.n	8001770 <Load_EEPROM_Header+0x88>
    {
        // Reconstruir el número de muestras a partir de los dos bytes
        uint16_t numSamples = (header[0] << 8) | header[1];
 8001700:	793b      	ldrb	r3, [r7, #4]
 8001702:	b21b      	sxth	r3, r3
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	b21a      	sxth	r2, r3
 8001708:	797b      	ldrb	r3, [r7, #5]
 800170a:	b21b      	sxth	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b21b      	sxth	r3, r3
 8001710:	80fb      	strh	r3, [r7, #6]

        // Validar si el valor leído es inválido o está fuera del rango esperado
        if (numSamples == 0xFFFF || numSamples > EEPROM_MAX_SAMPLES)
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001718:	4293      	cmp	r3, r2
 800171a:	d003      	beq.n	8001724 <Load_EEPROM_Header+0x3c>
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001722:	d912      	bls.n	800174a <Load_EEPROM_Header+0x62>
        {
            printf("⚠️ Header inválido o EEPROM corrupta: numSamples = %u. Reiniciando...\r\n", numSamples);
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	4619      	mov	r1, r3
 8001728:	4816      	ldr	r0, [pc, #88]	@ (8001784 <Load_EEPROM_Header+0x9c>)
 800172a:	f004 ff23 	bl	8006574 <iprintf>

            numSamples = 0; // Reiniciar el contador de muestras
 800172e:	2300      	movs	r3, #0
 8001730:	80fb      	strh	r3, [r7, #6]
            eepromAddr = EEPROM_DATA_START; // Volver al inicio de la sección de datos
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <Load_EEPROM_Header+0xa0>)
 8001734:	2202      	movs	r2, #2
 8001736:	801a      	strh	r2, [r3, #0]

            // Limpiar el encabezado escribiendo ceros
            uint8_t clean[2] = {0x00, 0x00};
 8001738:	2300      	movs	r3, #0
 800173a:	803b      	strh	r3, [r7, #0]
            AT24C128C_WriteBuffer(&hi2c1, EEPROM_HEADER_ADDR, clean, 2);
 800173c:	463a      	mov	r2, r7
 800173e:	2302      	movs	r3, #2
 8001740:	2100      	movs	r1, #0
 8001742:	480f      	ldr	r0, [pc, #60]	@ (8001780 <Load_EEPROM_Header+0x98>)
 8001744:	f7ff fc3f 	bl	8000fc6 <AT24C128C_WriteBuffer>
        {
 8001748:	e006      	b.n	8001758 <Load_EEPROM_Header+0x70>
        }
        else
        {
            // Si el número de muestras es válido, calcular la próxima dirección de escritura
            eepromAddr = EEPROM_DATA_START + numSamples * 4;
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	b29b      	uxth	r3, r3
 8001750:	3302      	adds	r3, #2
 8001752:	b29a      	uxth	r2, r3
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <Load_EEPROM_Header+0xa0>)
 8001756:	801a      	strh	r2, [r3, #0]
        }

        // Mostrar por consola cuántas muestras hay almacenadas y hasta qué dirección
        printf("EEPROM contiene %u muestras hasta addr: 0x%04X\r\n", numSamples, eepromAddr);
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	4a0b      	ldr	r2, [pc, #44]	@ (8001788 <Load_EEPROM_Header+0xa0>)
 800175c:	8812      	ldrh	r2, [r2, #0]
 800175e:	4619      	mov	r1, r3
 8001760:	480a      	ldr	r0, [pc, #40]	@ (800178c <Load_EEPROM_Header+0xa4>)
 8001762:	f004 ff07 	bl	8006574 <iprintf>

        // Imprimir los eventos guardados en grupos de 3 muestras
        Print_Stored_Events(numSamples);
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	4618      	mov	r0, r3
 800176a:	f000 f811 	bl	8001790 <Print_Stored_Events>
    else
    {
        // Si falló la lectura del encabezado, iniciar desde cero
        eepromAddr = EEPROM_DATA_START;
    }
}
 800176e:	e002      	b.n	8001776 <Load_EEPROM_Header+0x8e>
        eepromAddr = EEPROM_DATA_START;
 8001770:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <Load_EEPROM_Header+0xa0>)
 8001772:	2202      	movs	r2, #2
 8001774:	801a      	strh	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000240 	.word	0x20000240
 8001784:	080088f0 	.word	0x080088f0
 8001788:	20000328 	.word	0x20000328
 800178c:	08008940 	.word	0x08008940

08001790 <Print_Stored_Events>:
 *
 * @param  numSamples  Número total de muestras almacenadas (debe ser múltiplo de 3 para eventos completos).
 * @retval Ninguno
 */
void Print_Stored_Events(uint16_t numSamples)
{
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
    // Recorrer las muestras de 3 en 3 (cada grupo representa un evento)
    for (uint16_t i = 0; i < numSamples; i += 3)
 800179a:	2300      	movs	r3, #0
 800179c:	81fb      	strh	r3, [r7, #14]
 800179e:	e04c      	b.n	800183a <Print_Stored_Events+0xaa>
    {
        // Imprimir encabezado del evento
        printf("Evento %u:\r\n", (i / 3) + 1);
 80017a0:	89fb      	ldrh	r3, [r7, #14]
 80017a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001854 <Print_Stored_Events+0xc4>)
 80017a4:	fba2 2303 	umull	r2, r3, r2, r3
 80017a8:	085b      	lsrs	r3, r3, #1
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	3301      	adds	r3, #1
 80017ae:	4619      	mov	r1, r3
 80017b0:	4829      	ldr	r0, [pc, #164]	@ (8001858 <Print_Stored_Events+0xc8>)
 80017b2:	f004 fedf 	bl	8006574 <iprintf>

        // Leer hasta 3 muestras por evento, asegurándose de no pasar el total
        for (uint8_t j = 0; j < 3 && (i + j) < numSamples; j++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	737b      	strb	r3, [r7, #13]
 80017ba:	e030      	b.n	800181e <Print_Stored_Events+0x8e>
        {
            // Calcular la dirección de la EEPROM para esta muestra
            uint16_t addr = EEPROM_DATA_START + (i + j) * 4;
 80017bc:	89fa      	ldrh	r2, [r7, #14]
 80017be:	7b7b      	ldrb	r3, [r7, #13]
 80017c0:	4413      	add	r3, r2
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	3302      	adds	r3, #2
 80017ca:	817b      	strh	r3, [r7, #10]

            // Verificar que la dirección no exceda el tamaño máximo de la EEPROM (128Kbits = 16 KB)
            if (addr + 4 > (128 * 1024 / 8)) break;
 80017cc:	897b      	ldrh	r3, [r7, #10]
 80017ce:	f643 72fc 	movw	r2, #16380	@ 0x3ffc
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d82d      	bhi.n	8001832 <Print_Stored_Events+0xa2>

            // Leer 4 bytes (un float) desde la EEPROM
            if (AT24C128C_ReadBuffer(&hi2c1, addr, data, 4) == HAL_OK)
 80017d6:	8979      	ldrh	r1, [r7, #10]
 80017d8:	2304      	movs	r3, #4
 80017da:	4a20      	ldr	r2, [pc, #128]	@ (800185c <Print_Stored_Events+0xcc>)
 80017dc:	4820      	ldr	r0, [pc, #128]	@ (8001860 <Print_Stored_Events+0xd0>)
 80017de:	f7ff fc64 	bl	80010aa <AT24C128C_ReadBuffer>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d117      	bne.n	8001818 <Print_Stored_Events+0x88>
            {
                // Copiar los bytes leídos en la variable tipo float
                memcpy(&readValue, data, sizeof(float));
 80017e8:	4b1c      	ldr	r3, [pc, #112]	@ (800185c <Print_Stored_Events+0xcc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001864 <Print_Stored_Events+0xd4>)
 80017ee:	6013      	str	r3, [r2, #0]

                // Imprimir solo si el valor no es NaN (por seguridad)
                if (!isnan(readValue))
 80017f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001864 <Print_Stored_Events+0xd4>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	eef4 7a67 	vcmp.f32	s15, s15
 80017fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fe:	d60b      	bvs.n	8001818 <Print_Stored_Events+0x88>
                {
                    printf("  [0x%04X] = %.2f\r\n", addr, readValue);
 8001800:	897c      	ldrh	r4, [r7, #10]
 8001802:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <Print_Stored_Events+0xd4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fea6 	bl	8000558 <__aeabi_f2d>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4621      	mov	r1, r4
 8001812:	4815      	ldr	r0, [pc, #84]	@ (8001868 <Print_Stored_Events+0xd8>)
 8001814:	f004 feae 	bl	8006574 <iprintf>
        for (uint8_t j = 0; j < 3 && (i + j) < numSamples; j++)
 8001818:	7b7b      	ldrb	r3, [r7, #13]
 800181a:	3301      	adds	r3, #1
 800181c:	737b      	strb	r3, [r7, #13]
 800181e:	7b7b      	ldrb	r3, [r7, #13]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d807      	bhi.n	8001834 <Print_Stored_Events+0xa4>
 8001824:	89fa      	ldrh	r2, [r7, #14]
 8001826:	7b7b      	ldrb	r3, [r7, #13]
 8001828:	441a      	add	r2, r3
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	429a      	cmp	r2, r3
 800182e:	dbc5      	blt.n	80017bc <Print_Stored_Events+0x2c>
 8001830:	e000      	b.n	8001834 <Print_Stored_Events+0xa4>
            if (addr + 4 > (128 * 1024 / 8)) break;
 8001832:	bf00      	nop
    for (uint16_t i = 0; i < numSamples; i += 3)
 8001834:	89fb      	ldrh	r3, [r7, #14]
 8001836:	3303      	adds	r3, #3
 8001838:	81fb      	strh	r3, [r7, #14]
 800183a:	89fa      	ldrh	r2, [r7, #14]
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	429a      	cmp	r2, r3
 8001840:	d3ae      	bcc.n	80017a0 <Print_Stored_Events+0x10>
            }
        }
    }

    // Breve retraso al final para dar tiempo a leer los datos en consola
    HAL_Delay(3500);
 8001842:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001846:	f000 fd63 	bl	8002310 <HAL_Delay>
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}
 8001852:	bf00      	nop
 8001854:	aaaaaaab 	.word	0xaaaaaaab
 8001858:	08008974 	.word	0x08008974
 800185c:	20000334 	.word	0x20000334
 8001860:	20000240 	.word	0x20000240
 8001864:	20000338 	.word	0x20000338
 8001868:	08008984 	.word	0x08008984

0800186c <Store_Event_Samples>:
 *
 * @param  Ninguno (usa variables globales `mpu`, `eepromAddr`, `hi2c1`, `data`)
 * @retval Ninguno
 */
void Store_Event_Samples(void)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b087      	sub	sp, #28
 8001870:	af02      	add	r7, sp, #8
    // Mensaje indicativo en consola
    printf("\u26a1 Umbral superado! Registrando evento en EEPROM...\r\n");
 8001872:	482d      	ldr	r0, [pc, #180]	@ (8001928 <Store_Event_Samples+0xbc>)
 8001874:	f004 fee6 	bl	8006644 <puts>

    // Repetir 3 veces para almacenar 3 muestras del evento
    for (int i = 0; i < 3; i++)
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e04c      	b.n	8001918 <Store_Event_Samples+0xac>
    {
        float sample = mpu.angleY; // Tomar valor actual de inclinación (ángulo Y)
 800187e:	4b2b      	ldr	r3, [pc, #172]	@ (800192c <Store_Event_Samples+0xc0>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	607b      	str	r3, [r7, #4]

        // Copiar el valor float en un arreglo de 4 bytes para escribirlo
        memcpy(data, &sample, sizeof(float));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a2a      	ldr	r2, [pc, #168]	@ (8001930 <Store_Event_Samples+0xc4>)
 8001888:	6013      	str	r3, [r2, #0]

        // Escribir los 4 bytes del float en la dirección actual de EEPROM
        if (AT24C128C_WriteBuffer(&hi2c1, eepromAddr, data, 4) == HAL_OK)
 800188a:	4b2a      	ldr	r3, [pc, #168]	@ (8001934 <Store_Event_Samples+0xc8>)
 800188c:	8819      	ldrh	r1, [r3, #0]
 800188e:	2304      	movs	r3, #4
 8001890:	4a27      	ldr	r2, [pc, #156]	@ (8001930 <Store_Event_Samples+0xc4>)
 8001892:	4829      	ldr	r0, [pc, #164]	@ (8001938 <Store_Event_Samples+0xcc>)
 8001894:	f7ff fb97 	bl	8000fc6 <AT24C128C_WriteBuffer>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d132      	bne.n	8001904 <Store_Event_Samples+0x98>
        {
            // Confirmar en consola
            printf("  Guardado #%d: %.2f en addr 0x%04X\r\n", i + 1, sample, eepromAddr);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1c5c      	adds	r4, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe57 	bl	8000558 <__aeabi_f2d>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4921      	ldr	r1, [pc, #132]	@ (8001934 <Store_Event_Samples+0xc8>)
 80018b0:	8809      	ldrh	r1, [r1, #0]
 80018b2:	9100      	str	r1, [sp, #0]
 80018b4:	4621      	mov	r1, r4
 80018b6:	4821      	ldr	r0, [pc, #132]	@ (800193c <Store_Event_Samples+0xd0>)
 80018b8:	f004 fe5c 	bl	8006574 <iprintf>

            // Avanzar dirección de escritura
            eepromAddr += 4;
 80018bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <Store_Event_Samples+0xc8>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	3304      	adds	r3, #4
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <Store_Event_Samples+0xc8>)
 80018c6:	801a      	strh	r2, [r3, #0]

            // Calcular el nuevo número total de muestras almacenadas
            uint16_t numSamples = (eepromAddr - EEPROM_DATA_START) / 4;
 80018c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <Store_Event_Samples+0xc8>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	3b02      	subs	r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	da00      	bge.n	80018d4 <Store_Event_Samples+0x68>
 80018d2:	3303      	adds	r3, #3
 80018d4:	109b      	asrs	r3, r3, #2
 80018d6:	817b      	strh	r3, [r7, #10]

            // Crear nuevo encabezado con el contador actualizado
            uint8_t newHeader[2] = {
                (uint8_t)(numSamples >> 8),     // MSB
 80018d8:	897b      	ldrh	r3, [r7, #10]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	b29b      	uxth	r3, r3
 80018de:	b2db      	uxtb	r3, r3
            uint8_t newHeader[2] = {
 80018e0:	703b      	strb	r3, [r7, #0]
                (uint8_t)(numSamples & 0xFF)    // LSB
 80018e2:	897b      	ldrh	r3, [r7, #10]
 80018e4:	b2db      	uxtb	r3, r3
            uint8_t newHeader[2] = {
 80018e6:	707b      	strb	r3, [r7, #1]
            };

            // Escribir el nuevo encabezado en la EEPROM
            AT24C128C_WriteBuffer(&hi2c1, EEPROM_HEADER_ADDR, newHeader, 2);
 80018e8:	463a      	mov	r2, r7
 80018ea:	2302      	movs	r3, #2
 80018ec:	2100      	movs	r1, #0
 80018ee:	4812      	ldr	r0, [pc, #72]	@ (8001938 <Store_Event_Samples+0xcc>)
 80018f0:	f7ff fb69 	bl	8000fc6 <AT24C128C_WriteBuffer>
            printf("  Error escribiendo muestra #%d\r\n", i + 1);
            break;
        }

        // Pequeño retardo para permitir variación entre muestras
        HAL_Delay(100);
 80018f4:	2064      	movs	r0, #100	@ 0x64
 80018f6:	f000 fd0b 	bl	8002310 <HAL_Delay>

        // Leer nuevamente el sensor para obtener un nuevo valor de muestra
        MPU6050_ReadAll(&hi2c1, &mpu);
 80018fa:	490c      	ldr	r1, [pc, #48]	@ (800192c <Store_Event_Samples+0xc0>)
 80018fc:	480e      	ldr	r0, [pc, #56]	@ (8001938 <Store_Event_Samples+0xcc>)
 80018fe:	f000 f8cb 	bl	8001a98 <MPU6050_ReadAll>
 8001902:	e006      	b.n	8001912 <Store_Event_Samples+0xa6>
            printf("  Error escribiendo muestra #%d\r\n", i + 1);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3301      	adds	r3, #1
 8001908:	4619      	mov	r1, r3
 800190a:	480d      	ldr	r0, [pc, #52]	@ (8001940 <Store_Event_Samples+0xd4>)
 800190c:	f004 fe32 	bl	8006574 <iprintf>
    }
}
 8001910:	e005      	b.n	800191e <Store_Event_Samples+0xb2>
    for (int i = 0; i < 3; i++)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3301      	adds	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b02      	cmp	r3, #2
 800191c:	ddaf      	ble.n	800187e <Store_Event_Samples+0x12>
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}
 8001926:	bf00      	nop
 8001928:	08008998 	.word	0x08008998
 800192c:	200002f0 	.word	0x200002f0
 8001930:	20000334 	.word	0x20000334
 8001934:	20000328 	.word	0x20000328
 8001938:	20000240 	.word	0x20000240
 800193c:	080089d0 	.word	0x080089d0
 8001940:	080089f8 	.word	0x080089f8

08001944 <Read_EEPROM>:

void Read_EEPROM(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
	printf("Botón presionado: leyendo eventos desde EEPROM...\r\n");
 800194a:	4812      	ldr	r0, [pc, #72]	@ (8001994 <Read_EEPROM+0x50>)
 800194c:	f004 fe7a 	bl	8006644 <puts>

	uint8_t header[2];

	// Leer los primeros 2 bytes de la EEPROM donde se almacena el número total de muestras
	if (AT24C128C_ReadBuffer(&hi2c1, EEPROM_HEADER_ADDR, header, 2) == HAL_OK)
 8001950:	1d3a      	adds	r2, r7, #4
 8001952:	2302      	movs	r3, #2
 8001954:	2100      	movs	r1, #0
 8001956:	4810      	ldr	r0, [pc, #64]	@ (8001998 <Read_EEPROM+0x54>)
 8001958:	f7ff fba7 	bl	80010aa <AT24C128C_ReadBuffer>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d110      	bne.n	8001984 <Read_EEPROM+0x40>
	{
		// Combinar los dos bytes en un entero de 16 bits
		uint16_t numSamples = (header[0] << 8) | header[1];
 8001962:	793b      	ldrb	r3, [r7, #4]
 8001964:	b21b      	sxth	r3, r3
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	b21a      	sxth	r2, r3
 800196a:	797b      	ldrb	r3, [r7, #5]
 800196c:	b21b      	sxth	r3, r3
 800196e:	4313      	orrs	r3, r2
 8001970:	b21b      	sxth	r3, r3
 8001972:	80fb      	strh	r3, [r7, #6]

		// Verificar que el número de muestras no exceda el límite permitido
		if (numSamples <= EEPROM_MAX_SAMPLES)
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800197a:	d803      	bhi.n	8001984 <Read_EEPROM+0x40>
		{
			// Imprimir todos los eventos almacenados en EEPROM
			Print_Stored_Events(numSamples);
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff06 	bl	8001790 <Print_Stored_Events>
		}
	}

	Leer_datos = 0;
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <Read_EEPROM+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]

}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	08008a1c 	.word	0x08008a1c
 8001998:	20000240 	.word	0x20000240
 800199c:	200002e8 	.word	0x200002e8

080019a0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	80fb      	strh	r3, [r7, #6]
    uint32_t currentTick = HAL_GetTick(); // Tiempo actual en ms
 80019aa:	f000 fca5 	bl	80022f8 <HAL_GetTick>
 80019ae:	60f8      	str	r0, [r7, #12]

    // Si han pasado al menos 150 ms desde la última pulsación
    if ((currentTick - lastButtonPressTick) < 150)
 80019b0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <HAL_GPIO_EXTI_Callback+0x7c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b95      	cmp	r3, #149	@ 0x95
 80019ba:	d92a      	bls.n	8001a12 <HAL_GPIO_EXTI_Callback+0x72>
        return; // Rechazar evento por rebote (debounce)

    lastButtonPressTick = currentTick;
 80019bc:	4a17      	ldr	r2, [pc, #92]	@ (8001a1c <HAL_GPIO_EXTI_Callback+0x7c>)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6013      	str	r3, [r2, #0]

    if(GPIO_Pin == BUTTON1_Pin)
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019c8:	d107      	bne.n	80019da <HAL_GPIO_EXTI_Callback+0x3a>
    {
    	HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 80019ca:	2120      	movs	r1, #32
 80019cc:	4814      	ldr	r0, [pc, #80]	@ (8001a20 <HAL_GPIO_EXTI_Callback+0x80>)
 80019ce:	f001 fb30 	bl	8003032 <HAL_GPIO_TogglePin>

    	Leer_datos = 1;
 80019d2:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <HAL_GPIO_EXTI_Callback+0x84>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
 80019d8:	e01c      	b.n	8001a14 <HAL_GPIO_EXTI_Callback+0x74>

    }
    else if(GPIO_Pin == BUTTON2_Pin)
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019e0:	d104      	bne.n	80019ec <HAL_GPIO_EXTI_Callback+0x4c>
    {
    	HAL_GPIO_TogglePin(GPIOA, LED2_Pin);
 80019e2:	2140      	movs	r1, #64	@ 0x40
 80019e4:	480e      	ldr	r0, [pc, #56]	@ (8001a20 <HAL_GPIO_EXTI_Callback+0x80>)
 80019e6:	f001 fb24 	bl	8003032 <HAL_GPIO_TogglePin>
 80019ea:	e013      	b.n	8001a14 <HAL_GPIO_EXTI_Callback+0x74>
    }
    else if(GPIO_Pin == BUTTON3_Pin)
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019f2:	d104      	bne.n	80019fe <HAL_GPIO_EXTI_Callback+0x5e>
    {
    	HAL_GPIO_TogglePin(GPIOA, LED3_Pin);
 80019f4:	2180      	movs	r1, #128	@ 0x80
 80019f6:	480a      	ldr	r0, [pc, #40]	@ (8001a20 <HAL_GPIO_EXTI_Callback+0x80>)
 80019f8:	f001 fb1b 	bl	8003032 <HAL_GPIO_TogglePin>
 80019fc:	e00a      	b.n	8001a14 <HAL_GPIO_EXTI_Callback+0x74>
    }
    else if(GPIO_Pin == BUTTON4_Pin)
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a04:	d106      	bne.n	8001a14 <HAL_GPIO_EXTI_Callback+0x74>
    {
    	HAL_GPIO_TogglePin(GPIOA, LED4_Pin);
 8001a06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a0a:	4805      	ldr	r0, [pc, #20]	@ (8001a20 <HAL_GPIO_EXTI_Callback+0x80>)
 8001a0c:	f001 fb11 	bl	8003032 <HAL_GPIO_TogglePin>
 8001a10:	e000      	b.n	8001a14 <HAL_GPIO_EXTI_Callback+0x74>
        return; // Rechazar evento por rebote (debounce)
 8001a12:	bf00      	nop
    }

}
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002e4 	.word	0x200002e4
 8001a20:	40020000 	.word	0x40020000
 8001a24:	200002e8 	.word	0x200002e8

08001a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
}
 8001a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <Error_Handler+0x8>

08001a34 <MPU6050_Init>:
 * @param hi2c Puntero al manejador de la interfaz I2C configurada (normalmente &hi2c1)
 * @retval HAL_OK si la inicialización fue exitosa
 *         HAL_ERROR si hubo un error en la comunicación o identificación del sensor
 */
HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af04      	add	r7, sp, #16
 8001a3a:	6078      	str	r0, [r7, #4]
    uint8_t check;  // Variable para almacenar el valor leído del registro WHO_AM_I
    uint8_t data;   // Variable temporal para configurar registros

    // Leer el registro WHO_AM_I del MPU6050 para verificar si responde correctamente
    if (HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, MPU6050_RA_WHO_AM_I, 1, &check, 1, HAL_MAX_DELAY) != HAL_OK)
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a40:	9302      	str	r3, [sp, #8]
 8001a42:	2301      	movs	r3, #1
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	f107 030f 	add.w	r3, r7, #15
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	2275      	movs	r2, #117	@ 0x75
 8001a50:	21d0      	movs	r1, #208	@ 0xd0
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f002 f88e 	bl	8003b74 <HAL_I2C_Mem_Read>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MPU6050_Init+0x2e>
        return HAL_ERROR; // Si falla la lectura, retornar error
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e015      	b.n	8001a8e <MPU6050_Init+0x5a>

    // El valor esperado en WHO_AM_I es 0x68, si no coincide, retornar error
    if (check != 0x68)
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b68      	cmp	r3, #104	@ 0x68
 8001a66:	d001      	beq.n	8001a6c <MPU6050_Init+0x38>
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e010      	b.n	8001a8e <MPU6050_Init+0x5a>

    // Si el sensor respondió correctamente, escribir 0x00 en el registro PWR_MGMT_1
    // para salir del modo de suspensión y habilitar el sensor
    data = 0x00;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73bb      	strb	r3, [r7, #14]
    return HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	2301      	movs	r3, #1
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	f107 030e 	add.w	r3, r7, #14
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2301      	movs	r3, #1
 8001a82:	226b      	movs	r2, #107	@ 0x6b
 8001a84:	21d0      	movs	r1, #208	@ 0xd0
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f001 ff7a 	bl	8003980 <HAL_I2C_Mem_Write>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <MPU6050_ReadAll>:
 * @param hi2c Puntero al manejador de la interfaz I2C (ej. &hi2c1)
 * @param mpu Puntero a la estructura donde se almacenarán los datos del sensor
 * @retval HAL_OK si la lectura fue exitosa, de lo contrario un código de error HAL
 */
HAL_StatusTypeDef MPU6050_ReadAll(I2C_HandleTypeDef *hi2c, MPU6050_t *mpu)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af04      	add	r7, sp, #16
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
    uint8_t buffer[14];  // Arreglo donde se almacenan los 14 bytes leídos del sensor

    // Leer 14 bytes comenzando desde ACCEL_XOUT_H
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	230e      	movs	r3, #14
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	f107 0308 	add.w	r3, r7, #8
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	223b      	movs	r2, #59	@ 0x3b
 8001ab6:	21d0      	movs	r1, #208	@ 0xd0
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f002 f85b 	bl	8003b74 <HAL_I2C_Mem_Read>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	75fb      	strb	r3, [r7, #23]
        hi2c, MPU6050_ADDR, MPU6050_RA_ACCEL_XOUT_H,
        1, buffer, 14, HAL_MAX_DELAY
    );

    if (status != HAL_OK) return status;  // Si hubo error, salir con ese estado
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MPU6050_ReadAll+0x34>
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	e0be      	b.n	8001c4a <MPU6050_ReadAll+0x1b2>

    // Obtener valores RAW (datos crudos) combinando los MSB y LSB de cada eje
    mpu->raw.Accel_X     = (int16_t)(buffer[0] << 8 | buffer[1]);
 8001acc:	7a3b      	ldrb	r3, [r7, #8]
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	7a7b      	ldrb	r3, [r7, #9]
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	b21a      	sxth	r2, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	801a      	strh	r2, [r3, #0]
    mpu->raw.Accel_Y     = (int16_t)(buffer[2] << 8 | buffer[3]);
 8001ae0:	7abb      	ldrb	r3, [r7, #10]
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b21a      	sxth	r2, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	805a      	strh	r2, [r3, #2]
    mpu->raw.Accel_Z     = (int16_t)(buffer[4] << 8 | buffer[5]);
 8001af4:	7b3b      	ldrb	r3, [r7, #12]
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	7b7b      	ldrb	r3, [r7, #13]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	4313      	orrs	r3, r2
 8001b02:	b21a      	sxth	r2, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	809a      	strh	r2, [r3, #4]
    mpu->raw.Temperature = (int16_t)(buffer[6] << 8 | buffer[7]);
 8001b08:	7bbb      	ldrb	r3, [r7, #14]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	819a      	strh	r2, [r3, #12]
    mpu->raw.Gyro_X      = (int16_t)(buffer[8] << 8 | buffer[9]);
 8001b1c:	7c3b      	ldrb	r3, [r7, #16]
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	7c7b      	ldrb	r3, [r7, #17]
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	80da      	strh	r2, [r3, #6]
    mpu->raw.Gyro_Y      = (int16_t)(buffer[10] << 8 | buffer[11]);
 8001b30:	7cbb      	ldrb	r3, [r7, #18]
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	7cfb      	ldrb	r3, [r7, #19]
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	811a      	strh	r2, [r3, #8]
    mpu->raw.Gyro_Z      = (int16_t)(buffer[12] << 8 | buffer[13]);
 8001b44:	7d3b      	ldrb	r3, [r7, #20]
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	7d7b      	ldrb	r3, [r7, #21]
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	815a      	strh	r2, [r3, #10]

    // Escalar los valores RAW a unidades físicas
    mpu->scaled.Accel_X     = mpu->raw.Accel_X / ACCEL_SCALE_FACTOR; // en "g"
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5e:	ee07 3a90 	vmov	s15, r3
 8001b62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b66:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8001c54 <MPU6050_ReadAll+0x1bc>
 8001b6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	edc3 7a04 	vstr	s15, [r3, #16]
    mpu->scaled.Accel_Y     = mpu->raw.Accel_Y / ACCEL_SCALE_FACTOR;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b82:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001c54 <MPU6050_ReadAll+0x1bc>
 8001b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	edc3 7a05 	vstr	s15, [r3, #20]
    mpu->scaled.Accel_Z     = mpu->raw.Accel_Z / ACCEL_SCALE_FACTOR;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b9e:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8001c54 <MPU6050_ReadAll+0x1bc>
 8001ba2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	edc3 7a06 	vstr	s15, [r3, #24]

    mpu->scaled.Temperature = mpu->raw.Temperature / 340.0f + 36.53f; // en °C
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bba:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001c58 <MPU6050_ReadAll+0x1c0>
 8001bbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bc2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001c5c <MPU6050_ReadAll+0x1c4>
 8001bc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    mpu->scaled.Gyro_X      = mpu->raw.Gyro_X / GYRO_SCALE_FACTOR; // en °/s
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bde:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001c60 <MPU6050_ReadAll+0x1c8>
 8001be2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	edc3 7a07 	vstr	s15, [r3, #28]
    mpu->scaled.Gyro_Y      = mpu->raw.Gyro_Y / GYRO_SCALE_FACTOR;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bfa:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001c60 <MPU6050_ReadAll+0x1c8>
 8001bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	edc3 7a08 	vstr	s15, [r3, #32]
    mpu->scaled.Gyro_Z      = mpu->raw.Gyro_Z / GYRO_SCALE_FACTOR;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c16:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001c60 <MPU6050_ReadAll+0x1c8>
 8001c1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Calcular ángulos de inclinación en base a los datos del acelerómetro
    mpu->angleX = MPU6050_AccelToAngleX(&mpu->raw);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f81e 	bl	8001c68 <MPU6050_AccelToAngleX>
 8001c2c:	eef0 7a40 	vmov.f32	s15, s0
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    mpu->angleY = MPU6050_AccelToAngleY(&mpu->raw);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 f855 	bl	8001ce8 <MPU6050_AccelToAngleY>
 8001c3e:	eef0 7a40 	vmov.f32	s15, s0
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    // mpu->angleZ = MPU6050_AccelToAngleZ(&mpu->raw); // Si se implementa el cálculo en Z

    return HAL_OK;  // Lectura y procesamiento exitoso
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	46800000 	.word	0x46800000
 8001c58:	43aa0000 	.word	0x43aa0000
 8001c5c:	42121eb8 	.word	0x42121eb8
 8001c60:	43030000 	.word	0x43030000
 8001c64:	00000000 	.word	0x00000000

08001c68 <MPU6050_AccelToAngleX>:
 *
 * @param data Puntero a una estructura con los valores crudos (raw) del acelerómetro
 * @return Ángulo en grados, en el rango [-180°, +180°]
 */
float MPU6050_AccelToAngleX(const MPU6050_DataRaw *data)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
    // Calcular el ángulo de pitch usando atan2(Y, Z)
    // Esto representa la rotación sobre el eje X (inclinación hacia adelante o hacia atrás)
    float angle = atan2f((float)data->Accel_Y, (float)data->Accel_Z) * 180.0f / M_PI;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c84:	ee07 3a10 	vmov	s14, r3
 8001c88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c8c:	eef0 0a47 	vmov.f32	s1, s14
 8001c90:	eeb0 0a67 	vmov.f32	s0, s15
 8001c94:	f006 fc48 	bl	8008528 <atan2f>
 8001c98:	eef0 7a40 	vmov.f32	s15, s0
 8001c9c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001ce0 <MPU6050_AccelToAngleX+0x78>
 8001ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca4:	ee17 0a90 	vmov	r0, s15
 8001ca8:	f7fe fc56 	bl	8000558 <__aeabi_f2d>
 8001cac:	a30a      	add	r3, pc, #40	@ (adr r3, 8001cd8 <MPU6050_AccelToAngleX+0x70>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	f7fe fdd3 	bl	800085c <__aeabi_ddiv>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f7fe ff7b 	bl	8000bb8 <__aeabi_d2f>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	60fb      	str	r3, [r7, #12]

    // Retornar el ángulo en grados
    return angle;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	ee07 3a90 	vmov	s15, r3
}
 8001ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	54442d18 	.word	0x54442d18
 8001cdc:	400921fb 	.word	0x400921fb
 8001ce0:	43340000 	.word	0x43340000
 8001ce4:	00000000 	.word	0x00000000

08001ce8 <MPU6050_AccelToAngleY>:
 *
 * @param data Puntero a la estructura que contiene los valores crudos del acelerómetro (MPU6050_DataRaw)
 * @return Ángulo en grados, en el rango [-180°, +180°]
 */
float MPU6050_AccelToAngleY(const MPU6050_DataRaw *data)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
    // Calcular el ángulo de roll (rotación lateral) usando atan2(-X, Z)
    // Se invierte el signo de Accel_X para que los ángulos sigan una convención estándar
    float angle = atan2f(-(float)data->Accel_X, (float)data->Accel_Z) * 180.0f / M_PI;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfe:	eef1 7a67 	vneg.f32	s15, s15
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d08:	ee07 3a10 	vmov	s14, r3
 8001d0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d10:	eef0 0a47 	vmov.f32	s1, s14
 8001d14:	eeb0 0a67 	vmov.f32	s0, s15
 8001d18:	f006 fc06 	bl	8008528 <atan2f>
 8001d1c:	eef0 7a40 	vmov.f32	s15, s0
 8001d20:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001d68 <MPU6050_AccelToAngleY+0x80>
 8001d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d28:	ee17 0a90 	vmov	r0, s15
 8001d2c:	f7fe fc14 	bl	8000558 <__aeabi_f2d>
 8001d30:	a30b      	add	r3, pc, #44	@ (adr r3, 8001d60 <MPU6050_AccelToAngleY+0x78>)
 8001d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d36:	f7fe fd91 	bl	800085c <__aeabi_ddiv>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7fe ff39 	bl	8000bb8 <__aeabi_d2f>
 8001d46:	4603      	mov	r3, r0
 8001d48:	60fb      	str	r3, [r7, #12]

    // Retornar el ángulo en grados
    return angle;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	ee07 3a90 	vmov	s15, r3
}
 8001d50:	eeb0 0a67 	vmov.f32	s0, s15
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	f3af 8000 	nop.w
 8001d60:	54442d18 	.word	0x54442d18
 8001d64:	400921fb 	.word	0x400921fb
 8001d68:	43340000 	.word	0x43340000

08001d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d82:	4b0d      	ldr	r3, [pc, #52]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	4a08      	ldr	r2, [pc, #32]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	@ 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a24      	ldr	r2, [pc, #144]	@ (8001e6c <HAL_ADC_MspInit+0xb0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d141      	bne.n	8001e62 <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b23      	ldr	r3, [pc, #140]	@ (8001e70 <HAL_ADC_MspInit+0xb4>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	4a22      	ldr	r2, [pc, #136]	@ (8001e70 <HAL_ADC_MspInit+0xb4>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dee:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <HAL_ADC_MspInit+0xb4>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001e70 <HAL_ADC_MspInit+0xb4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a1b      	ldr	r2, [pc, #108]	@ (8001e70 <HAL_ADC_MspInit+0xb4>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <HAL_ADC_MspInit+0xb4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_ADC_MspInit+0xb4>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	4a14      	ldr	r2, [pc, #80]	@ (8001e70 <HAL_ADC_MspInit+0xb4>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e26:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <HAL_ADC_MspInit+0xb4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = POT1_Pin;
 8001e32:	2310      	movs	r3, #16
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e36:	2303      	movs	r3, #3
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT1_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	480b      	ldr	r0, [pc, #44]	@ (8001e74 <HAL_ADC_MspInit+0xb8>)
 8001e46:	f000 ff57 	bl	8002cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT2_Pin;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT2_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4806      	ldr	r0, [pc, #24]	@ (8001e78 <HAL_ADC_MspInit+0xbc>)
 8001e5e:	f000 ff4b 	bl	8002cf8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	@ 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40012000 	.word	0x40012000
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020800 	.word	0x40020800
 8001e78:	40020400 	.word	0x40020400

08001e7c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	@ 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a19      	ldr	r2, [pc, #100]	@ (8001f00 <HAL_I2C_MspInit+0x84>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d12b      	bne.n	8001ef6 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <HAL_I2C_MspInit+0x88>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a17      	ldr	r2, [pc, #92]	@ (8001f04 <HAL_I2C_MspInit+0x88>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <HAL_I2C_MspInit+0x88>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eba:	23c0      	movs	r3, #192	@ 0xc0
 8001ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ebe:	2312      	movs	r3, #18
 8001ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eca:	2304      	movs	r3, #4
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	480c      	ldr	r0, [pc, #48]	@ (8001f08 <HAL_I2C_MspInit+0x8c>)
 8001ed6:	f000 ff0f 	bl	8002cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <HAL_I2C_MspInit+0x88>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	4a08      	ldr	r2, [pc, #32]	@ (8001f04 <HAL_I2C_MspInit+0x88>)
 8001ee4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <HAL_I2C_MspInit+0x88>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ef6:	bf00      	nop
 8001ef8:	3728      	adds	r7, #40	@ 0x28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40005400 	.word	0x40005400
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020400 	.word	0x40020400

08001f0c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0b      	ldr	r2, [pc, #44]	@ (8001f48 <HAL_TIM_Base_MspInit+0x3c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d10d      	bne.n	8001f3a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_TIM_Base_MspInit+0x40>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	4a09      	ldr	r2, [pc, #36]	@ (8001f4c <HAL_TIM_Base_MspInit+0x40>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f2e:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <HAL_TIM_Base_MspInit+0x40>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40010000 	.word	0x40010000
 8001f4c:	40023800 	.word	0x40023800

08001f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <NMI_Handler+0x4>

08001f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <HardFault_Handler+0x4>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <MemManage_Handler+0x4>

08001f68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <BusFault_Handler+0x4>

08001f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <UsageFault_Handler+0x4>

08001f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa6:	f000 f993 	bl	80022d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}

08001fae <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8001fb2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001fb6:	f001 f857 	bl	8003068 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8001fba:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001fbe:	f001 f853 	bl	8003068 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 8001fc2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001fc6:	f001 f84f 	bl	8003068 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 8001fca:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001fce:	f001 f84b 	bl	8003068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <ITM_SendChar+0x48>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8002020 <ITM_SendChar+0x48>)
 8001fe8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fec:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001fee:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <ITM_SendChar+0x4c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8002024 <ITM_SendChar+0x4c>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001ffa:	bf00      	nop
 8001ffc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f8      	beq.n	8001ffc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800200a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	6013      	str	r3, [r2, #0]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000edfc 	.word	0xe000edfc
 8002024:	e0000e00 	.word	0xe0000e00

08002028 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return 1;
 800202c:	2301      	movs	r3, #1
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_kill>:

int _kill(int pid, int sig)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002042:	f004 fc31 	bl	80068a8 <__errno>
 8002046:	4603      	mov	r3, r0
 8002048:	2216      	movs	r2, #22
 800204a:	601a      	str	r2, [r3, #0]
  return -1;
 800204c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <_exit>:

void _exit (int status)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002060:	f04f 31ff 	mov.w	r1, #4294967295
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ffe7 	bl	8002038 <_kill>
  while (1) {}    /* Make sure we hang here */
 800206a:	bf00      	nop
 800206c:	e7fd      	b.n	800206a <_exit+0x12>

0800206e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	e00a      	b.n	8002096 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002080:	f3af 8000 	nop.w
 8002084:	4601      	mov	r1, r0
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	60ba      	str	r2, [r7, #8]
 800208c:	b2ca      	uxtb	r2, r1
 800208e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	3301      	adds	r3, #1
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	429a      	cmp	r2, r3
 800209c:	dbf0      	blt.n	8002080 <_read+0x12>
  }

  return len;
 800209e:	687b      	ldr	r3, [r7, #4]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	e009      	b.n	80020ce <_write+0x26>
  {
	    //__io_putchar(*ptr++);
		  ITM_SendChar(*ptr++);
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	60ba      	str	r2, [r7, #8]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ff88 	bl	8001fd8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	3301      	adds	r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	dbf1      	blt.n	80020ba <_write+0x12>
  }
  return len;
 80020d6:	687b      	ldr	r3, [r7, #4]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_close>:

int _close(int file)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002108:	605a      	str	r2, [r3, #4]
  return 0;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <_isatty>:

int _isatty(int file)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002120:	2301      	movs	r3, #1
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002150:	4a14      	ldr	r2, [pc, #80]	@ (80021a4 <_sbrk+0x5c>)
 8002152:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <_sbrk+0x60>)
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800215c:	4b13      	ldr	r3, [pc, #76]	@ (80021ac <_sbrk+0x64>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002164:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <_sbrk+0x64>)
 8002166:	4a12      	ldr	r2, [pc, #72]	@ (80021b0 <_sbrk+0x68>)
 8002168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800216a:	4b10      	ldr	r3, [pc, #64]	@ (80021ac <_sbrk+0x64>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	429a      	cmp	r2, r3
 8002176:	d207      	bcs.n	8002188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002178:	f004 fb96 	bl	80068a8 <__errno>
 800217c:	4603      	mov	r3, r0
 800217e:	220c      	movs	r2, #12
 8002180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002182:	f04f 33ff 	mov.w	r3, #4294967295
 8002186:	e009      	b.n	800219c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002188:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <_sbrk+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800218e:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	4a05      	ldr	r2, [pc, #20]	@ (80021ac <_sbrk+0x64>)
 8002198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800219a:	68fb      	ldr	r3, [r7, #12]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20020000 	.word	0x20020000
 80021a8:	00000400 	.word	0x00000400
 80021ac:	2000033c 	.word	0x2000033c
 80021b0:	20000490 	.word	0x20000490

080021b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <SystemInit+0x20>)
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021be:	4a05      	ldr	r2, [pc, #20]	@ (80021d4 <SystemInit+0x20>)
 80021c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002210 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021dc:	f7ff ffea 	bl	80021b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021e0:	480c      	ldr	r0, [pc, #48]	@ (8002214 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021e2:	490d      	ldr	r1, [pc, #52]	@ (8002218 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021e4:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e8:	e002      	b.n	80021f0 <LoopCopyDataInit>

080021ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ee:	3304      	adds	r3, #4

080021f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f4:	d3f9      	bcc.n	80021ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002224 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021fc:	e001      	b.n	8002202 <LoopFillZerobss>

080021fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002200:	3204      	adds	r2, #4

08002202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002204:	d3fb      	bcc.n	80021fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002206:	f004 fb55 	bl	80068b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800220a:	f7fe ff7f 	bl	800110c <main>
  bx  lr    
 800220e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002210:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002218:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800221c:	08008e24 	.word	0x08008e24
  ldr r2, =_sbss
 8002220:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002224:	20000490 	.word	0x20000490

08002228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002228:	e7fe      	b.n	8002228 <ADC_IRQHandler>
	...

0800222c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002230:	4b0e      	ldr	r3, [pc, #56]	@ (800226c <HAL_Init+0x40>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0d      	ldr	r2, [pc, #52]	@ (800226c <HAL_Init+0x40>)
 8002236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800223a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800223c:	4b0b      	ldr	r3, [pc, #44]	@ (800226c <HAL_Init+0x40>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0a      	ldr	r2, [pc, #40]	@ (800226c <HAL_Init+0x40>)
 8002242:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002246:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002248:	4b08      	ldr	r3, [pc, #32]	@ (800226c <HAL_Init+0x40>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a07      	ldr	r2, [pc, #28]	@ (800226c <HAL_Init+0x40>)
 800224e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002252:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002254:	2003      	movs	r0, #3
 8002256:	f000 fd0d 	bl	8002c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225a:	2000      	movs	r0, #0
 800225c:	f000 f808 	bl	8002270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002260:	f7ff fd84 	bl	8001d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023c00 	.word	0x40023c00

08002270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002278:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <HAL_InitTick+0x54>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <HAL_InitTick+0x58>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002286:	fbb3 f3f1 	udiv	r3, r3, r1
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fd25 	bl	8002cde <HAL_SYSTICK_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e00e      	b.n	80022bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b0f      	cmp	r3, #15
 80022a2:	d80a      	bhi.n	80022ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a4:	2200      	movs	r2, #0
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f000 fced 	bl	8002c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b0:	4a06      	ldr	r2, [pc, #24]	@ (80022cc <HAL_InitTick+0x5c>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000008 	.word	0x20000008
 80022c8:	20000010 	.word	0x20000010
 80022cc:	2000000c 	.word	0x2000000c

080022d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d4:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_IncTick+0x20>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_IncTick+0x24>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <HAL_IncTick+0x24>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000010 	.word	0x20000010
 80022f4:	20000340 	.word	0x20000340

080022f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return uwTick;
 80022fc:	4b03      	ldr	r3, [pc, #12]	@ (800230c <HAL_GetTick+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000340 	.word	0x20000340

08002310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff ffee 	bl	80022f8 <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d005      	beq.n	8002336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232a:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <HAL_Delay+0x44>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002336:	bf00      	nop
 8002338:	f7ff ffde 	bl	80022f8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d8f7      	bhi.n	8002338 <HAL_Delay+0x28>
  {
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000010 	.word	0x20000010

08002358 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e033      	b.n	80023d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff fd20 	bl	8001dbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b00      	cmp	r3, #0
 8002394:	d118      	bne.n	80023c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800239e:	f023 0302 	bic.w	r3, r3, #2
 80023a2:	f043 0202 	orr.w	r2, r3, #2
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fa96 	bl	80028dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	f023 0303 	bic.w	r3, r3, #3
 80023be:	f043 0201 	orr.w	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80023c6:	e001      	b.n	80023cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_Start+0x1a>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e097      	b.n	800252a <HAL_ADC_Start+0x14a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d018      	beq.n	8002442 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002420:	4b45      	ldr	r3, [pc, #276]	@ (8002538 <HAL_ADC_Start+0x158>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a45      	ldr	r2, [pc, #276]	@ (800253c <HAL_ADC_Start+0x15c>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	0c9a      	lsrs	r2, r3, #18
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002434:	e002      	b.n	800243c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3b01      	subs	r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f9      	bne.n	8002436 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b01      	cmp	r3, #1
 800244e:	d15f      	bne.n	8002510 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800247a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800248a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800248e:	d106      	bne.n	800249e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002494:	f023 0206 	bic.w	r2, r3, #6
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	645a      	str	r2, [r3, #68]	@ 0x44
 800249c:	e002      	b.n	80024a4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ac:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <HAL_ADC_Start+0x160>)
 80024ae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80024b8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10f      	bne.n	80024e6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d129      	bne.n	8002528 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	e020      	b.n	8002528 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a16      	ldr	r2, [pc, #88]	@ (8002544 <HAL_ADC_Start+0x164>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d11b      	bne.n	8002528 <HAL_ADC_Start+0x148>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d114      	bne.n	8002528 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800250c:	609a      	str	r2, [r3, #8]
 800250e:	e00b      	b.n	8002528 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002514:	f043 0210 	orr.w	r2, r3, #16
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000008 	.word	0x20000008
 800253c:	431bde83 	.word	0x431bde83
 8002540:	40012300 	.word	0x40012300
 8002544:	40012000 	.word	0x40012000

08002548 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002564:	d113      	bne.n	800258e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002574:	d10b      	bne.n	800258e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	f043 0220 	orr.w	r2, r3, #32
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e063      	b.n	8002656 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800258e:	f7ff feb3 	bl	80022f8 <HAL_GetTick>
 8002592:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002594:	e021      	b.n	80025da <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259c:	d01d      	beq.n	80025da <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_ADC_PollForConversion+0x6c>
 80025a4:	f7ff fea8 	bl	80022f8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d212      	bcs.n	80025da <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d00b      	beq.n	80025da <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f043 0204 	orr.w	r2, r3, #4
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e03d      	b.n	8002656 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d1d6      	bne.n	8002596 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0212 	mvn.w	r2, #18
 80025f0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d123      	bne.n	8002654 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002610:	2b00      	cmp	r3, #0
 8002612:	d11f      	bne.n	8002654 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800262c:	2b00      	cmp	r3, #0
 800262e:	d111      	bne.n	8002654 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	f043 0201 	orr.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x1c>
 8002690:	2302      	movs	r3, #2
 8002692:	e113      	b.n	80028bc <HAL_ADC_ConfigChannel+0x244>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b09      	cmp	r3, #9
 80026a2:	d925      	bls.n	80026f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68d9      	ldr	r1, [r3, #12]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	3b1e      	subs	r3, #30
 80026ba:	2207      	movs	r2, #7
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43da      	mvns	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	400a      	ands	r2, r1
 80026c8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68d9      	ldr	r1, [r3, #12]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	4603      	mov	r3, r0
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4403      	add	r3, r0
 80026e2:	3b1e      	subs	r3, #30
 80026e4:	409a      	lsls	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	e022      	b.n	8002736 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6919      	ldr	r1, [r3, #16]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	2207      	movs	r2, #7
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	400a      	ands	r2, r1
 8002712:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6919      	ldr	r1, [r3, #16]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	4603      	mov	r3, r0
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4403      	add	r3, r0
 800272c:	409a      	lsls	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b06      	cmp	r3, #6
 800273c:	d824      	bhi.n	8002788 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	3b05      	subs	r3, #5
 8002750:	221f      	movs	r2, #31
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	400a      	ands	r2, r1
 800275e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	4618      	mov	r0, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	3b05      	subs	r3, #5
 800277a:	fa00 f203 	lsl.w	r2, r0, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	635a      	str	r2, [r3, #52]	@ 0x34
 8002786:	e04c      	b.n	8002822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b0c      	cmp	r3, #12
 800278e:	d824      	bhi.n	80027da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	3b23      	subs	r3, #35	@ 0x23
 80027a2:	221f      	movs	r2, #31
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43da      	mvns	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	400a      	ands	r2, r1
 80027b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	3b23      	subs	r3, #35	@ 0x23
 80027cc:	fa00 f203 	lsl.w	r2, r0, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80027d8:	e023      	b.n	8002822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	3b41      	subs	r3, #65	@ 0x41
 80027ec:	221f      	movs	r2, #31
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	400a      	ands	r2, r1
 80027fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	4618      	mov	r0, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	3b41      	subs	r3, #65	@ 0x41
 8002816:	fa00 f203 	lsl.w	r2, r0, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002822:	4b29      	ldr	r3, [pc, #164]	@ (80028c8 <HAL_ADC_ConfigChannel+0x250>)
 8002824:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a28      	ldr	r2, [pc, #160]	@ (80028cc <HAL_ADC_ConfigChannel+0x254>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d10f      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x1d8>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b12      	cmp	r3, #18
 8002836:	d10b      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1d      	ldr	r2, [pc, #116]	@ (80028cc <HAL_ADC_ConfigChannel+0x254>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d12b      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x23a>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1c      	ldr	r2, [pc, #112]	@ (80028d0 <HAL_ADC_ConfigChannel+0x258>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d003      	beq.n	800286c <HAL_ADC_ConfigChannel+0x1f4>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b11      	cmp	r3, #17
 800286a:	d122      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a11      	ldr	r2, [pc, #68]	@ (80028d0 <HAL_ADC_ConfigChannel+0x258>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d111      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800288e:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <HAL_ADC_ConfigChannel+0x25c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a11      	ldr	r2, [pc, #68]	@ (80028d8 <HAL_ADC_ConfigChannel+0x260>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	0c9a      	lsrs	r2, r3, #18
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028a4:	e002      	b.n	80028ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f9      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40012300 	.word	0x40012300
 80028cc:	40012000 	.word	0x40012000
 80028d0:	10000012 	.word	0x10000012
 80028d4:	20000008 	.word	0x20000008
 80028d8:	431bde83 	.word	0x431bde83

080028dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028e4:	4b79      	ldr	r3, [pc, #484]	@ (8002acc <ADC_Init+0x1f0>)
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	021a      	lsls	r2, r3, #8
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002934:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002956:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6899      	ldr	r1, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296e:	4a58      	ldr	r2, [pc, #352]	@ (8002ad0 <ADC_Init+0x1f4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d022      	beq.n	80029ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002982:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6899      	ldr	r1, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6899      	ldr	r1, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	e00f      	b.n	80029da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0202 	bic.w	r2, r2, #2
 80029e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6899      	ldr	r1, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	7e1b      	ldrb	r3, [r3, #24]
 80029f4:	005a      	lsls	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01b      	beq.n	8002a40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a16:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6859      	ldr	r1, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	3b01      	subs	r3, #1
 8002a34:	035a      	lsls	r2, r3, #13
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	e007      	b.n	8002a50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a4e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	051a      	lsls	r2, r3, #20
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6899      	ldr	r1, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a92:	025a      	lsls	r2, r3, #9
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6899      	ldr	r1, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	029a      	lsls	r2, r3, #10
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	40012300 	.word	0x40012300
 8002ad0:	0f000001 	.word	0x0f000001

08002ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b18 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002af0:	4013      	ands	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b06:	4a04      	ldr	r2, [pc, #16]	@ (8002b18 <__NVIC_SetPriorityGrouping+0x44>)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	60d3      	str	r3, [r2, #12]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b20:	4b04      	ldr	r3, [pc, #16]	@ (8002b34 <__NVIC_GetPriorityGrouping+0x18>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	f003 0307 	and.w	r3, r3, #7
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	db0b      	blt.n	8002b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	f003 021f 	and.w	r2, r3, #31
 8002b50:	4907      	ldr	r1, [pc, #28]	@ (8002b70 <__NVIC_EnableIRQ+0x38>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	2001      	movs	r0, #1
 8002b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	e000e100 	.word	0xe000e100

08002b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	6039      	str	r1, [r7, #0]
 8002b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	db0a      	blt.n	8002b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	490c      	ldr	r1, [pc, #48]	@ (8002bc0 <__NVIC_SetPriority+0x4c>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	0112      	lsls	r2, r2, #4
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	440b      	add	r3, r1
 8002b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b9c:	e00a      	b.n	8002bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4908      	ldr	r1, [pc, #32]	@ (8002bc4 <__NVIC_SetPriority+0x50>)
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	3b04      	subs	r3, #4
 8002bac:	0112      	lsls	r2, r2, #4
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	761a      	strb	r2, [r3, #24]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000e100 	.word	0xe000e100
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	@ 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f1c3 0307 	rsb	r3, r3, #7
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	bf28      	it	cs
 8002be6:	2304      	movcs	r3, #4
 8002be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3304      	adds	r3, #4
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d902      	bls.n	8002bf8 <NVIC_EncodePriority+0x30>
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3b03      	subs	r3, #3
 8002bf6:	e000      	b.n	8002bfa <NVIC_EncodePriority+0x32>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	43d9      	mvns	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	4313      	orrs	r3, r2
         );
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3724      	adds	r7, #36	@ 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c40:	d301      	bcc.n	8002c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c42:	2301      	movs	r3, #1
 8002c44:	e00f      	b.n	8002c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c46:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <SysTick_Config+0x40>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c4e:	210f      	movs	r1, #15
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	f7ff ff8e 	bl	8002b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c58:	4b05      	ldr	r3, [pc, #20]	@ (8002c70 <SysTick_Config+0x40>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c5e:	4b04      	ldr	r3, [pc, #16]	@ (8002c70 <SysTick_Config+0x40>)
 8002c60:	2207      	movs	r2, #7
 8002c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	e000e010 	.word	0xe000e010

08002c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff ff29 	bl	8002ad4 <__NVIC_SetPriorityGrouping>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c9c:	f7ff ff3e 	bl	8002b1c <__NVIC_GetPriorityGrouping>
 8002ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f7ff ff8e 	bl	8002bc8 <NVIC_EncodePriority>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff5d 	bl	8002b74 <__NVIC_SetPriority>
}
 8002cba:	bf00      	nop
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff31 	bl	8002b38 <__NVIC_EnableIRQ>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff ffa2 	bl	8002c30 <SysTick_Config>
 8002cec:	4603      	mov	r3, r0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	@ 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	e159      	b.n	8002fc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d14:	2201      	movs	r2, #1
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	f040 8148 	bne.w	8002fc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d005      	beq.n	8002d4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d130      	bne.n	8002dac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	2203      	movs	r2, #3
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d80:	2201      	movs	r2, #1
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 0201 	and.w	r2, r3, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d017      	beq.n	8002de8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d123      	bne.n	8002e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	08da      	lsrs	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3208      	adds	r2, #8
 8002dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	08da      	lsrs	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3208      	adds	r2, #8
 8002e36:	69b9      	ldr	r1, [r7, #24]
 8002e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	2203      	movs	r2, #3
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0203 	and.w	r2, r3, #3
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80a2 	beq.w	8002fc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	4b57      	ldr	r3, [pc, #348]	@ (8002fe0 <HAL_GPIO_Init+0x2e8>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e86:	4a56      	ldr	r2, [pc, #344]	@ (8002fe0 <HAL_GPIO_Init+0x2e8>)
 8002e88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e8e:	4b54      	ldr	r3, [pc, #336]	@ (8002fe0 <HAL_GPIO_Init+0x2e8>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e9a:	4a52      	ldr	r2, [pc, #328]	@ (8002fe4 <HAL_GPIO_Init+0x2ec>)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	220f      	movs	r2, #15
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a49      	ldr	r2, [pc, #292]	@ (8002fe8 <HAL_GPIO_Init+0x2f0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d019      	beq.n	8002efa <HAL_GPIO_Init+0x202>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a48      	ldr	r2, [pc, #288]	@ (8002fec <HAL_GPIO_Init+0x2f4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_GPIO_Init+0x1fe>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a47      	ldr	r2, [pc, #284]	@ (8002ff0 <HAL_GPIO_Init+0x2f8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00d      	beq.n	8002ef2 <HAL_GPIO_Init+0x1fa>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a46      	ldr	r2, [pc, #280]	@ (8002ff4 <HAL_GPIO_Init+0x2fc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d007      	beq.n	8002eee <HAL_GPIO_Init+0x1f6>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a45      	ldr	r2, [pc, #276]	@ (8002ff8 <HAL_GPIO_Init+0x300>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d101      	bne.n	8002eea <HAL_GPIO_Init+0x1f2>
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	e008      	b.n	8002efc <HAL_GPIO_Init+0x204>
 8002eea:	2307      	movs	r3, #7
 8002eec:	e006      	b.n	8002efc <HAL_GPIO_Init+0x204>
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e004      	b.n	8002efc <HAL_GPIO_Init+0x204>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e002      	b.n	8002efc <HAL_GPIO_Init+0x204>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_GPIO_Init+0x204>
 8002efa:	2300      	movs	r3, #0
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	f002 0203 	and.w	r2, r2, #3
 8002f02:	0092      	lsls	r2, r2, #2
 8002f04:	4093      	lsls	r3, r2
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f0c:	4935      	ldr	r1, [pc, #212]	@ (8002fe4 <HAL_GPIO_Init+0x2ec>)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	089b      	lsrs	r3, r3, #2
 8002f12:	3302      	adds	r3, #2
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1a:	4b38      	ldr	r3, [pc, #224]	@ (8002ffc <HAL_GPIO_Init+0x304>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8002ffc <HAL_GPIO_Init+0x304>)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f44:	4b2d      	ldr	r3, [pc, #180]	@ (8002ffc <HAL_GPIO_Init+0x304>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f68:	4a24      	ldr	r2, [pc, #144]	@ (8002ffc <HAL_GPIO_Init+0x304>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f6e:	4b23      	ldr	r3, [pc, #140]	@ (8002ffc <HAL_GPIO_Init+0x304>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f92:	4a1a      	ldr	r2, [pc, #104]	@ (8002ffc <HAL_GPIO_Init+0x304>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f98:	4b18      	ldr	r3, [pc, #96]	@ (8002ffc <HAL_GPIO_Init+0x304>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8002ffc <HAL_GPIO_Init+0x304>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b0f      	cmp	r3, #15
 8002fcc:	f67f aea2 	bls.w	8002d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	@ 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40013800 	.word	0x40013800
 8002fe8:	40020000 	.word	0x40020000
 8002fec:	40020400 	.word	0x40020400
 8002ff0:	40020800 	.word	0x40020800
 8002ff4:	40020c00 	.word	0x40020c00
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40013c00 	.word	0x40013c00

08003000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]
 800300c:	4613      	mov	r3, r2
 800300e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003010:	787b      	ldrb	r3, [r7, #1]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003016:	887a      	ldrh	r2, [r7, #2]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800301c:	e003      	b.n	8003026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800301e:	887b      	ldrh	r3, [r7, #2]
 8003020:	041a      	lsls	r2, r3, #16
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	619a      	str	r2, [r3, #24]
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003044:	887a      	ldrh	r2, [r7, #2]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4013      	ands	r3, r2
 800304a:	041a      	lsls	r2, r3, #16
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	43d9      	mvns	r1, r3
 8003050:	887b      	ldrh	r3, [r7, #2]
 8003052:	400b      	ands	r3, r1
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	619a      	str	r2, [r3, #24]
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003072:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	4013      	ands	r3, r2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d006      	beq.n	800308c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800307e:	4a05      	ldr	r2, [pc, #20]	@ (8003094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fc8a 	bl	80019a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40013c00 	.word	0x40013c00

08003098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e12b      	b.n	8003302 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe fedc 	bl	8001e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2224      	movs	r2, #36	@ 0x24
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030fc:	f002 fa0e 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 8003100:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4a81      	ldr	r2, [pc, #516]	@ (800330c <HAL_I2C_Init+0x274>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d807      	bhi.n	800311c <HAL_I2C_Init+0x84>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4a80      	ldr	r2, [pc, #512]	@ (8003310 <HAL_I2C_Init+0x278>)
 8003110:	4293      	cmp	r3, r2
 8003112:	bf94      	ite	ls
 8003114:	2301      	movls	r3, #1
 8003116:	2300      	movhi	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e006      	b.n	800312a <HAL_I2C_Init+0x92>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a7d      	ldr	r2, [pc, #500]	@ (8003314 <HAL_I2C_Init+0x27c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	bf94      	ite	ls
 8003124:	2301      	movls	r3, #1
 8003126:	2300      	movhi	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e0e7      	b.n	8003302 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4a78      	ldr	r2, [pc, #480]	@ (8003318 <HAL_I2C_Init+0x280>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	0c9b      	lsrs	r3, r3, #18
 800313c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a6a      	ldr	r2, [pc, #424]	@ (800330c <HAL_I2C_Init+0x274>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d802      	bhi.n	800316c <HAL_I2C_Init+0xd4>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3301      	adds	r3, #1
 800316a:	e009      	b.n	8003180 <HAL_I2C_Init+0xe8>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003172:	fb02 f303 	mul.w	r3, r2, r3
 8003176:	4a69      	ldr	r2, [pc, #420]	@ (800331c <HAL_I2C_Init+0x284>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	099b      	lsrs	r3, r3, #6
 800317e:	3301      	adds	r3, #1
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	430b      	orrs	r3, r1
 8003186:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003192:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	495c      	ldr	r1, [pc, #368]	@ (800330c <HAL_I2C_Init+0x274>)
 800319c:	428b      	cmp	r3, r1
 800319e:	d819      	bhi.n	80031d4 <HAL_I2C_Init+0x13c>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1e59      	subs	r1, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ae:	1c59      	adds	r1, r3, #1
 80031b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031b4:	400b      	ands	r3, r1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_I2C_Init+0x138>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1e59      	subs	r1, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c8:	3301      	adds	r3, #1
 80031ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ce:	e051      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 80031d0:	2304      	movs	r3, #4
 80031d2:	e04f      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d111      	bne.n	8003200 <HAL_I2C_Init+0x168>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e58      	subs	r0, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	440b      	add	r3, r1
 80031ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ee:	3301      	adds	r3, #1
 80031f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e012      	b.n	8003226 <HAL_I2C_Init+0x18e>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1e58      	subs	r0, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	0099      	lsls	r1, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	fbb0 f3f3 	udiv	r3, r0, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Init+0x196>
 800322a:	2301      	movs	r3, #1
 800322c:	e022      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10e      	bne.n	8003254 <HAL_I2C_Init+0x1bc>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1e58      	subs	r0, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6859      	ldr	r1, [r3, #4]
 800323e:	460b      	mov	r3, r1
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	440b      	add	r3, r1
 8003244:	fbb0 f3f3 	udiv	r3, r0, r3
 8003248:	3301      	adds	r3, #1
 800324a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003252:	e00f      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1e58      	subs	r0, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	0099      	lsls	r1, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	fbb0 f3f3 	udiv	r3, r0, r3
 800326a:	3301      	adds	r3, #1
 800326c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003270:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	6809      	ldr	r1, [r1, #0]
 8003278:	4313      	orrs	r3, r2
 800327a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6911      	ldr	r1, [r2, #16]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68d2      	ldr	r2, [r2, #12]
 80032ae:	4311      	orrs	r1, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	000186a0 	.word	0x000186a0
 8003310:	001e847f 	.word	0x001e847f
 8003314:	003d08ff 	.word	0x003d08ff
 8003318:	431bde83 	.word	0x431bde83
 800331c:	10624dd3 	.word	0x10624dd3

08003320 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	461a      	mov	r2, r3
 800332c:	460b      	mov	r3, r1
 800332e:	817b      	strh	r3, [r7, #10]
 8003330:	4613      	mov	r3, r2
 8003332:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003334:	f7fe ffe0 	bl	80022f8 <HAL_GetTick>
 8003338:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b20      	cmp	r3, #32
 8003344:	f040 80e0 	bne.w	8003508 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2319      	movs	r3, #25
 800334e:	2201      	movs	r2, #1
 8003350:	4970      	ldr	r1, [pc, #448]	@ (8003514 <HAL_I2C_Master_Transmit+0x1f4>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f001 fa3c 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800335e:	2302      	movs	r3, #2
 8003360:	e0d3      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_I2C_Master_Transmit+0x50>
 800336c:	2302      	movs	r3, #2
 800336e:	e0cc      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b01      	cmp	r3, #1
 8003384:	d007      	beq.n	8003396 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0201 	orr.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2221      	movs	r2, #33	@ 0x21
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2210      	movs	r2, #16
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	893a      	ldrh	r2, [r7, #8]
 80033c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4a50      	ldr	r2, [pc, #320]	@ (8003518 <HAL_I2C_Master_Transmit+0x1f8>)
 80033d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033d8:	8979      	ldrh	r1, [r7, #10]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	6a3a      	ldr	r2, [r7, #32]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 ff28 	bl	8004234 <I2C_MasterRequestWrite>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e08d      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003404:	e066      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	6a39      	ldr	r1, [r7, #32]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f001 fafa 	bl	8004a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341a:	2b04      	cmp	r3, #4
 800341c:	d107      	bne.n	800342e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800342c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e06b      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	781a      	ldrb	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b04      	cmp	r3, #4
 800346e:	d11b      	bne.n	80034a8 <HAL_I2C_Master_Transmit+0x188>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003474:	2b00      	cmp	r3, #0
 8003476:	d017      	beq.n	80034a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	781a      	ldrb	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	6a39      	ldr	r1, [r7, #32]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f001 faf1 	bl	8004a94 <I2C_WaitOnBTFFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00d      	beq.n	80034d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d107      	bne.n	80034d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e01a      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d194      	bne.n	8003406 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	e000      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003508:	2302      	movs	r3, #2
  }
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	00100002 	.word	0x00100002
 8003518:	ffff0000 	.word	0xffff0000

0800351c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08c      	sub	sp, #48	@ 0x30
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	461a      	mov	r2, r3
 8003528:	460b      	mov	r3, r1
 800352a:	817b      	strh	r3, [r7, #10]
 800352c:	4613      	mov	r3, r2
 800352e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003530:	f7fe fee2 	bl	80022f8 <HAL_GetTick>
 8003534:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	f040 8217 	bne.w	8003972 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	2319      	movs	r3, #25
 800354a:	2201      	movs	r2, #1
 800354c:	497c      	ldr	r1, [pc, #496]	@ (8003740 <HAL_I2C_Master_Receive+0x224>)
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f001 f93e 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
 800355c:	e20a      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_I2C_Master_Receive+0x50>
 8003568:	2302      	movs	r3, #2
 800356a:	e203      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d007      	beq.n	8003592 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2222      	movs	r2, #34	@ 0x22
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2210      	movs	r2, #16
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	893a      	ldrh	r2, [r7, #8]
 80035c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4a5c      	ldr	r2, [pc, #368]	@ (8003744 <HAL_I2C_Master_Receive+0x228>)
 80035d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035d4:	8979      	ldrh	r1, [r7, #10]
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 feac 	bl	8004338 <I2C_MasterRequestRead>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e1c4      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d113      	bne.n	800361a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	623b      	str	r3, [r7, #32]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	623b      	str	r3, [r7, #32]
 8003606:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e198      	b.n	800394c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361e:	2b01      	cmp	r3, #1
 8003620:	d11b      	bne.n	800365a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003630:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e178      	b.n	800394c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365e:	2b02      	cmp	r3, #2
 8003660:	d11b      	bne.n	800369a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003670:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003680:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	e158      	b.n	800394c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036c0:	e144      	b.n	800394c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	f200 80f1 	bhi.w	80038ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d123      	bne.n	800371c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f001 fa23 	bl	8004b24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e145      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800371a:	e117      	b.n	800394c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003720:	2b02      	cmp	r3, #2
 8003722:	d14e      	bne.n	80037c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	2200      	movs	r2, #0
 800372c:	4906      	ldr	r1, [pc, #24]	@ (8003748 <HAL_I2C_Master_Receive+0x22c>)
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f001 f84e 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e11a      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
 800373e:	bf00      	nop
 8003740:	00100002 	.word	0x00100002
 8003744:	ffff0000 	.word	0xffff0000
 8003748:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800375a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037c0:	e0c4      	b.n	800394c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c8:	2200      	movs	r2, #0
 80037ca:	496c      	ldr	r1, [pc, #432]	@ (800397c <HAL_I2C_Master_Receive+0x460>)
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 ffff 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0cb      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003824:	2200      	movs	r2, #0
 8003826:	4955      	ldr	r1, [pc, #340]	@ (800397c <HAL_I2C_Master_Receive+0x460>)
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 ffd1 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e09d      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038ac:	e04e      	b.n	800394c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f001 f936 	bl	8004b24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e058      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d124      	bne.n	800394c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003906:	2b03      	cmp	r3, #3
 8003908:	d107      	bne.n	800391a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003918:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003950:	2b00      	cmp	r3, #0
 8003952:	f47f aeb6 	bne.w	80036c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	e000      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003972:	2302      	movs	r3, #2
  }
}
 8003974:	4618      	mov	r0, r3
 8003976:	3728      	adds	r7, #40	@ 0x28
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	00010004 	.word	0x00010004

08003980 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af02      	add	r7, sp, #8
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	4608      	mov	r0, r1
 800398a:	4611      	mov	r1, r2
 800398c:	461a      	mov	r2, r3
 800398e:	4603      	mov	r3, r0
 8003990:	817b      	strh	r3, [r7, #10]
 8003992:	460b      	mov	r3, r1
 8003994:	813b      	strh	r3, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800399a:	f7fe fcad 	bl	80022f8 <HAL_GetTick>
 800399e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	f040 80d9 	bne.w	8003b60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	2319      	movs	r3, #25
 80039b4:	2201      	movs	r2, #1
 80039b6:	496d      	ldr	r1, [pc, #436]	@ (8003b6c <HAL_I2C_Mem_Write+0x1ec>)
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 ff09 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
 80039c6:	e0cc      	b.n	8003b62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_I2C_Mem_Write+0x56>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e0c5      	b.n	8003b62 <HAL_I2C_Mem_Write+0x1e2>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d007      	beq.n	80039fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2221      	movs	r2, #33	@ 0x21
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2240      	movs	r2, #64	@ 0x40
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a3a      	ldr	r2, [r7, #32]
 8003a26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4a4d      	ldr	r2, [pc, #308]	@ (8003b70 <HAL_I2C_Mem_Write+0x1f0>)
 8003a3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a3e:	88f8      	ldrh	r0, [r7, #6]
 8003a40:	893a      	ldrh	r2, [r7, #8]
 8003a42:	8979      	ldrh	r1, [r7, #10]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 fd40 	bl	80044d4 <I2C_RequestMemoryWrite>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d052      	beq.n	8003b00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e081      	b.n	8003b62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 ffce 	bl	8004a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d107      	bne.n	8003a86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e06b      	b.n	8003b62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	781a      	ldrb	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d11b      	bne.n	8003b00 <HAL_I2C_Mem_Write+0x180>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d017      	beq.n	8003b00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad4:	781a      	ldrb	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1aa      	bne.n	8003a5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 ffc1 	bl	8004a94 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00d      	beq.n	8003b34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d107      	bne.n	8003b30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e016      	b.n	8003b62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e000      	b.n	8003b62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b60:	2302      	movs	r3, #2
  }
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	00100002 	.word	0x00100002
 8003b70:	ffff0000 	.word	0xffff0000

08003b74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08c      	sub	sp, #48	@ 0x30
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	4608      	mov	r0, r1
 8003b7e:	4611      	mov	r1, r2
 8003b80:	461a      	mov	r2, r3
 8003b82:	4603      	mov	r3, r0
 8003b84:	817b      	strh	r3, [r7, #10]
 8003b86:	460b      	mov	r3, r1
 8003b88:	813b      	strh	r3, [r7, #8]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b8e:	f7fe fbb3 	bl	80022f8 <HAL_GetTick>
 8003b92:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	f040 8214 	bne.w	8003fca <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	2319      	movs	r3, #25
 8003ba8:	2201      	movs	r2, #1
 8003baa:	497b      	ldr	r1, [pc, #492]	@ (8003d98 <HAL_I2C_Mem_Read+0x224>)
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fe0f 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e207      	b.n	8003fcc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_I2C_Mem_Read+0x56>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e200      	b.n	8003fcc <HAL_I2C_Mem_Read+0x458>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d007      	beq.n	8003bf0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2222      	movs	r2, #34	@ 0x22
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2240      	movs	r2, #64	@ 0x40
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8003d9c <HAL_I2C_Mem_Read+0x228>)
 8003c30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c32:	88f8      	ldrh	r0, [r7, #6]
 8003c34:	893a      	ldrh	r2, [r7, #8]
 8003c36:	8979      	ldrh	r1, [r7, #10]
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	4603      	mov	r3, r0
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fcdc 	bl	8004600 <I2C_RequestMemoryRead>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e1bc      	b.n	8003fcc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d113      	bne.n	8003c82 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	623b      	str	r3, [r7, #32]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	623b      	str	r3, [r7, #32]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	e190      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d11b      	bne.n	8003cc2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	e170      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d11b      	bne.n	8003d02 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ce8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cea:	2300      	movs	r3, #0
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	e150      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d18:	e144      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	f200 80f1 	bhi.w	8003f06 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d123      	bne.n	8003d74 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fef7 	bl	8004b24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e145      	b.n	8003fcc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d72:	e117      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d14e      	bne.n	8003e1a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d82:	2200      	movs	r2, #0
 8003d84:	4906      	ldr	r1, [pc, #24]	@ (8003da0 <HAL_I2C_Mem_Read+0x22c>)
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 fd22 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e11a      	b.n	8003fcc <HAL_I2C_Mem_Read+0x458>
 8003d96:	bf00      	nop
 8003d98:	00100002 	.word	0x00100002
 8003d9c:	ffff0000 	.word	0xffff0000
 8003da0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e18:	e0c4      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e20:	2200      	movs	r2, #0
 8003e22:	496c      	ldr	r1, [pc, #432]	@ (8003fd4 <HAL_I2C_Mem_Read+0x460>)
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fcd3 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0cb      	b.n	8003fcc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	4955      	ldr	r1, [pc, #340]	@ (8003fd4 <HAL_I2C_Mem_Read+0x460>)
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fca5 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e09d      	b.n	8003fcc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f04:	e04e      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f08:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 fe0a 	bl	8004b24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e058      	b.n	8003fcc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d124      	bne.n	8003fa4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d107      	bne.n	8003f72 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f70:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f47f aeb6 	bne.w	8003d1a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e000      	b.n	8003fcc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
  }
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3728      	adds	r7, #40	@ 0x28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	00010004 	.word	0x00010004

08003fd8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	@ 0x28
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003fe8:	f7fe f986 	bl	80022f8 <HAL_GetTick>
 8003fec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	f040 8111 	bne.w	8004222 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	2319      	movs	r3, #25
 8004006:	2201      	movs	r2, #1
 8004008:	4988      	ldr	r1, [pc, #544]	@ (800422c <HAL_I2C_IsDeviceReady+0x254>)
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 fbe0 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
 8004018:	e104      	b.n	8004224 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_I2C_IsDeviceReady+0x50>
 8004024:	2302      	movs	r3, #2
 8004026:	e0fd      	b.n	8004224 <HAL_I2C_IsDeviceReady+0x24c>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b01      	cmp	r3, #1
 800403c:	d007      	beq.n	800404e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0201 	orr.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800405c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2224      	movs	r2, #36	@ 0x24
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a70      	ldr	r2, [pc, #448]	@ (8004230 <HAL_I2C_IsDeviceReady+0x258>)
 8004070:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004080:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2200      	movs	r2, #0
 800408a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 fb9e 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00d      	beq.n	80040b6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040a8:	d103      	bne.n	80040b2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040b0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e0b6      	b.n	8004224 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040b6:	897b      	ldrh	r3, [r7, #10]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	461a      	mov	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040c4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80040c6:	f7fe f917 	bl	80022f8 <HAL_GetTick>
 80040ca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	bf0c      	ite	eq
 80040da:	2301      	moveq	r3, #1
 80040dc:	2300      	movne	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f0:	bf0c      	ite	eq
 80040f2:	2301      	moveq	r3, #1
 80040f4:	2300      	movne	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040fa:	e025      	b.n	8004148 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040fc:	f7fe f8fc 	bl	80022f8 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d302      	bcc.n	8004112 <HAL_I2C_IsDeviceReady+0x13a>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d103      	bne.n	800411a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	22a0      	movs	r2, #160	@ 0xa0
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b02      	cmp	r3, #2
 8004126:	bf0c      	ite	eq
 8004128:	2301      	moveq	r3, #1
 800412a:	2300      	movne	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800413a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2ba0      	cmp	r3, #160	@ 0xa0
 8004152:	d005      	beq.n	8004160 <HAL_I2C_IsDeviceReady+0x188>
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <HAL_I2C_IsDeviceReady+0x188>
 800415a:	7dbb      	ldrb	r3, [r7, #22]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0cd      	beq.n	80040fc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b02      	cmp	r3, #2
 8004174:	d129      	bne.n	80041ca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004184:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	2319      	movs	r3, #25
 80041a2:	2201      	movs	r2, #1
 80041a4:	4921      	ldr	r1, [pc, #132]	@ (800422c <HAL_I2C_IsDeviceReady+0x254>)
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fb12 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e036      	b.n	8004224 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e02c      	b.n	8004224 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041e2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2319      	movs	r3, #25
 80041ea:	2201      	movs	r2, #1
 80041ec:	490f      	ldr	r1, [pc, #60]	@ (800422c <HAL_I2C_IsDeviceReady+0x254>)
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 faee 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e012      	b.n	8004224 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	3301      	adds	r3, #1
 8004202:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	429a      	cmp	r2, r3
 800420a:	f4ff af32 	bcc.w	8004072 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004222:	2302      	movs	r3, #2
  }
}
 8004224:	4618      	mov	r0, r3
 8004226:	3720      	adds	r7, #32
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	00100002 	.word	0x00100002
 8004230:	ffff0000 	.word	0xffff0000

08004234 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	460b      	mov	r3, r1
 8004242:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004248:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d006      	beq.n	800425e <I2C_MasterRequestWrite+0x2a>
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d003      	beq.n	800425e <I2C_MasterRequestWrite+0x2a>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800425c:	d108      	bne.n	8004270 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	e00b      	b.n	8004288 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004274:	2b12      	cmp	r3, #18
 8004276:	d107      	bne.n	8004288 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004286:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fa9b 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ae:	d103      	bne.n	80042b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e035      	b.n	8004328 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042c4:	d108      	bne.n	80042d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042c6:	897b      	ldrh	r3, [r7, #10]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042d4:	611a      	str	r2, [r3, #16]
 80042d6:	e01b      	b.n	8004310 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042d8:	897b      	ldrh	r3, [r7, #10]
 80042da:	11db      	asrs	r3, r3, #7
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f003 0306 	and.w	r3, r3, #6
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f063 030f 	orn	r3, r3, #15
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	490e      	ldr	r1, [pc, #56]	@ (8004330 <I2C_MasterRequestWrite+0xfc>)
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fae4 	bl	80048c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e010      	b.n	8004328 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004306:	897b      	ldrh	r3, [r7, #10]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4907      	ldr	r1, [pc, #28]	@ (8004334 <I2C_MasterRequestWrite+0x100>)
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fad4 	bl	80048c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	00010008 	.word	0x00010008
 8004334:	00010002 	.word	0x00010002

08004338 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	460b      	mov	r3, r1
 8004346:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800435c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2b08      	cmp	r3, #8
 8004362:	d006      	beq.n	8004372 <I2C_MasterRequestRead+0x3a>
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d003      	beq.n	8004372 <I2C_MasterRequestRead+0x3a>
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004370:	d108      	bne.n	8004384 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	e00b      	b.n	800439c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004388:	2b11      	cmp	r3, #17
 800438a:	d107      	bne.n	800439c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800439a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fa11 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00d      	beq.n	80043d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043c2:	d103      	bne.n	80043cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e079      	b.n	80044c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043d8:	d108      	bne.n	80043ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043da:	897b      	ldrh	r3, [r7, #10]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	611a      	str	r2, [r3, #16]
 80043ea:	e05f      	b.n	80044ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043ec:	897b      	ldrh	r3, [r7, #10]
 80043ee:	11db      	asrs	r3, r3, #7
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f003 0306 	and.w	r3, r3, #6
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f063 030f 	orn	r3, r3, #15
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4930      	ldr	r1, [pc, #192]	@ (80044cc <I2C_MasterRequestRead+0x194>)
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fa5a 	bl	80048c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e054      	b.n	80044c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800441a:	897b      	ldrh	r3, [r7, #10]
 800441c:	b2da      	uxtb	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4929      	ldr	r1, [pc, #164]	@ (80044d0 <I2C_MasterRequestRead+0x198>)
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fa4a 	bl	80048c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e044      	b.n	80044c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800445e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f9af 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00d      	beq.n	8004494 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004486:	d103      	bne.n	8004490 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800448e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e017      	b.n	80044c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004494:	897b      	ldrh	r3, [r7, #10]
 8004496:	11db      	asrs	r3, r3, #7
 8004498:	b2db      	uxtb	r3, r3
 800449a:	f003 0306 	and.w	r3, r3, #6
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f063 030e 	orn	r3, r3, #14
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	4907      	ldr	r1, [pc, #28]	@ (80044d0 <I2C_MasterRequestRead+0x198>)
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 fa06 	bl	80048c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	00010008 	.word	0x00010008
 80044d0:	00010002 	.word	0x00010002

080044d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	4608      	mov	r0, r1
 80044de:	4611      	mov	r1, r2
 80044e0:	461a      	mov	r2, r3
 80044e2:	4603      	mov	r3, r0
 80044e4:	817b      	strh	r3, [r7, #10]
 80044e6:	460b      	mov	r3, r1
 80044e8:	813b      	strh	r3, [r7, #8]
 80044ea:	4613      	mov	r3, r2
 80044ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	2200      	movs	r2, #0
 8004506:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f960 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00d      	beq.n	8004532 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004524:	d103      	bne.n	800452e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800452c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e05f      	b.n	80045f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004532:	897b      	ldrh	r3, [r7, #10]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	461a      	mov	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004540:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	492d      	ldr	r1, [pc, #180]	@ (80045fc <I2C_RequestMemoryWrite+0x128>)
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f9bb 	bl	80048c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e04c      	b.n	80045f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800456e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004570:	6a39      	ldr	r1, [r7, #32]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 fa46 	bl	8004a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00d      	beq.n	800459a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	2b04      	cmp	r3, #4
 8004584:	d107      	bne.n	8004596 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004594:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e02b      	b.n	80045f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d105      	bne.n	80045ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045a0:	893b      	ldrh	r3, [r7, #8]
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	611a      	str	r2, [r3, #16]
 80045aa:	e021      	b.n	80045f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045ac:	893b      	ldrh	r3, [r7, #8]
 80045ae:	0a1b      	lsrs	r3, r3, #8
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045bc:	6a39      	ldr	r1, [r7, #32]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fa20 	bl	8004a04 <I2C_WaitOnTXEFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00d      	beq.n	80045e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d107      	bne.n	80045e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e005      	b.n	80045f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045e6:	893b      	ldrh	r3, [r7, #8]
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	00010002 	.word	0x00010002

08004600 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	4608      	mov	r0, r1
 800460a:	4611      	mov	r1, r2
 800460c:	461a      	mov	r2, r3
 800460e:	4603      	mov	r3, r0
 8004610:	817b      	strh	r3, [r7, #10]
 8004612:	460b      	mov	r3, r1
 8004614:	813b      	strh	r3, [r7, #8]
 8004616:	4613      	mov	r3, r2
 8004618:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004628:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004638:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	2200      	movs	r2, #0
 8004642:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f8c2 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00d      	beq.n	800466e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800465c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004660:	d103      	bne.n	800466a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004668:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e0aa      	b.n	80047c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800466e:	897b      	ldrh	r3, [r7, #10]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800467c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	6a3a      	ldr	r2, [r7, #32]
 8004682:	4952      	ldr	r1, [pc, #328]	@ (80047cc <I2C_RequestMemoryRead+0x1cc>)
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f91d 	bl	80048c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e097      	b.n	80047c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ac:	6a39      	ldr	r1, [r7, #32]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f9a8 	bl	8004a04 <I2C_WaitOnTXEFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00d      	beq.n	80046d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d107      	bne.n	80046d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e076      	b.n	80047c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046d6:	88fb      	ldrh	r3, [r7, #6]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d105      	bne.n	80046e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046dc:	893b      	ldrh	r3, [r7, #8]
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	611a      	str	r2, [r3, #16]
 80046e6:	e021      	b.n	800472c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046e8:	893b      	ldrh	r3, [r7, #8]
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f8:	6a39      	ldr	r1, [r7, #32]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f982 	bl	8004a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00d      	beq.n	8004722 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	2b04      	cmp	r3, #4
 800470c:	d107      	bne.n	800471e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800471c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e050      	b.n	80047c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004722:	893b      	ldrh	r3, [r7, #8]
 8004724:	b2da      	uxtb	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800472c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472e:	6a39      	ldr	r1, [r7, #32]
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f967 	bl	8004a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00d      	beq.n	8004758 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004740:	2b04      	cmp	r3, #4
 8004742:	d107      	bne.n	8004754 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004752:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e035      	b.n	80047c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004766:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	2200      	movs	r2, #0
 8004770:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f82b 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00d      	beq.n	800479c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800478e:	d103      	bne.n	8004798 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004796:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e013      	b.n	80047c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800479c:	897b      	ldrh	r3, [r7, #10]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	6a3a      	ldr	r2, [r7, #32]
 80047b0:	4906      	ldr	r1, [pc, #24]	@ (80047cc <I2C_RequestMemoryRead+0x1cc>)
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f886 	bl	80048c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	00010002 	.word	0x00010002

080047d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	4613      	mov	r3, r2
 80047de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047e0:	e048      	b.n	8004874 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d044      	beq.n	8004874 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ea:	f7fd fd85 	bl	80022f8 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d302      	bcc.n	8004800 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d139      	bne.n	8004874 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	0c1b      	lsrs	r3, r3, #16
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b01      	cmp	r3, #1
 8004808:	d10d      	bne.n	8004826 <I2C_WaitOnFlagUntilTimeout+0x56>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	43da      	mvns	r2, r3
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4013      	ands	r3, r2
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	bf0c      	ite	eq
 800481c:	2301      	moveq	r3, #1
 800481e:	2300      	movne	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	e00c      	b.n	8004840 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	43da      	mvns	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4013      	ands	r3, r2
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	429a      	cmp	r2, r3
 8004844:	d116      	bne.n	8004874 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004860:	f043 0220 	orr.w	r2, r3, #32
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e023      	b.n	80048bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	0c1b      	lsrs	r3, r3, #16
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b01      	cmp	r3, #1
 800487c:	d10d      	bne.n	800489a <I2C_WaitOnFlagUntilTimeout+0xca>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	43da      	mvns	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	4013      	ands	r3, r2
 800488a:	b29b      	uxth	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	e00c      	b.n	80048b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	43da      	mvns	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4013      	ands	r3, r2
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d093      	beq.n	80047e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048d2:	e071      	b.n	80049b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048e2:	d123      	bne.n	800492c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004918:	f043 0204 	orr.w	r2, r3, #4
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e067      	b.n	80049fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d041      	beq.n	80049b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004934:	f7fd fce0 	bl	80022f8 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	d302      	bcc.n	800494a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d136      	bne.n	80049b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	d10c      	bne.n	800496e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	43da      	mvns	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4013      	ands	r3, r2
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	bf14      	ite	ne
 8004966:	2301      	movne	r3, #1
 8004968:	2300      	moveq	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	e00b      	b.n	8004986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	43da      	mvns	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4013      	ands	r3, r2
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	bf14      	ite	ne
 8004980:	2301      	movne	r3, #1
 8004982:	2300      	moveq	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d016      	beq.n	80049b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a4:	f043 0220 	orr.w	r2, r3, #32
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e021      	b.n	80049fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	0c1b      	lsrs	r3, r3, #16
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d10c      	bne.n	80049dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	43da      	mvns	r2, r3
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	4013      	ands	r3, r2
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bf14      	ite	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	e00b      	b.n	80049f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	43da      	mvns	r2, r3
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4013      	ands	r3, r2
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bf14      	ite	ne
 80049ee:	2301      	movne	r3, #1
 80049f0:	2300      	moveq	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f47f af6d 	bne.w	80048d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a10:	e034      	b.n	8004a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f8e3 	bl	8004bde <I2C_IsAcknowledgeFailed>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e034      	b.n	8004a8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d028      	beq.n	8004a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2a:	f7fd fc65 	bl	80022f8 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d302      	bcc.n	8004a40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d11d      	bne.n	8004a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a4a:	2b80      	cmp	r3, #128	@ 0x80
 8004a4c:	d016      	beq.n	8004a7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a68:	f043 0220 	orr.w	r2, r3, #32
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e007      	b.n	8004a8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a86:	2b80      	cmp	r3, #128	@ 0x80
 8004a88:	d1c3      	bne.n	8004a12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004aa0:	e034      	b.n	8004b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f89b 	bl	8004bde <I2C_IsAcknowledgeFailed>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e034      	b.n	8004b1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab8:	d028      	beq.n	8004b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aba:	f7fd fc1d 	bl	80022f8 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d302      	bcc.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d11d      	bne.n	8004b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d016      	beq.n	8004b0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	f043 0220 	orr.w	r2, r3, #32
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e007      	b.n	8004b1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d1c3      	bne.n	8004aa2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b30:	e049      	b.n	8004bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d119      	bne.n	8004b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0210 	mvn.w	r2, #16
 8004b48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e030      	b.n	8004bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b74:	f7fd fbc0 	bl	80022f8 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d302      	bcc.n	8004b8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d11d      	bne.n	8004bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b94:	2b40      	cmp	r3, #64	@ 0x40
 8004b96:	d016      	beq.n	8004bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	f043 0220 	orr.w	r2, r3, #32
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e007      	b.n	8004bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd0:	2b40      	cmp	r3, #64	@ 0x40
 8004bd2:	d1ae      	bne.n	8004b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bf4:	d11b      	bne.n	8004c2e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bfe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	f043 0204 	orr.w	r2, r3, #4
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e267      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d075      	beq.n	8004d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c5a:	4b88      	ldr	r3, [pc, #544]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d00c      	beq.n	8004c80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c66:	4b85      	ldr	r3, [pc, #532]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d112      	bne.n	8004c98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c72:	4b82      	ldr	r3, [pc, #520]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c7e:	d10b      	bne.n	8004c98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c80:	4b7e      	ldr	r3, [pc, #504]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d05b      	beq.n	8004d44 <HAL_RCC_OscConfig+0x108>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d157      	bne.n	8004d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e242      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca0:	d106      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x74>
 8004ca2:	4b76      	ldr	r3, [pc, #472]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a75      	ldr	r2, [pc, #468]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e01d      	b.n	8004cec <HAL_RCC_OscConfig+0xb0>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x98>
 8004cba:	4b70      	ldr	r3, [pc, #448]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a6f      	ldr	r2, [pc, #444]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a6c      	ldr	r2, [pc, #432]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e00b      	b.n	8004cec <HAL_RCC_OscConfig+0xb0>
 8004cd4:	4b69      	ldr	r3, [pc, #420]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a68      	ldr	r2, [pc, #416]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4b66      	ldr	r3, [pc, #408]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a65      	ldr	r2, [pc, #404]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d013      	beq.n	8004d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf4:	f7fd fb00 	bl	80022f8 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cfc:	f7fd fafc 	bl	80022f8 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b64      	cmp	r3, #100	@ 0x64
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e207      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	4b5b      	ldr	r3, [pc, #364]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0xc0>
 8004d1a:	e014      	b.n	8004d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1c:	f7fd faec 	bl	80022f8 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fd fae8 	bl	80022f8 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	@ 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e1f3      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d36:	4b51      	ldr	r3, [pc, #324]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f0      	bne.n	8004d24 <HAL_RCC_OscConfig+0xe8>
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d063      	beq.n	8004e1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d52:	4b4a      	ldr	r3, [pc, #296]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5e:	4b47      	ldr	r3, [pc, #284]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d11c      	bne.n	8004da4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d6a:	4b44      	ldr	r3, [pc, #272]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d116      	bne.n	8004da4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d76:	4b41      	ldr	r3, [pc, #260]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_RCC_OscConfig+0x152>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d001      	beq.n	8004d8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e1c7      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4937      	ldr	r1, [pc, #220]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da2:	e03a      	b.n	8004e1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d020      	beq.n	8004dee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dac:	4b34      	ldr	r3, [pc, #208]	@ (8004e80 <HAL_RCC_OscConfig+0x244>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db2:	f7fd faa1 	bl	80022f8 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dba:	f7fd fa9d 	bl	80022f8 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e1a8      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f0      	beq.n	8004dba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd8:	4b28      	ldr	r3, [pc, #160]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	4925      	ldr	r1, [pc, #148]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	600b      	str	r3, [r1, #0]
 8004dec:	e015      	b.n	8004e1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dee:	4b24      	ldr	r3, [pc, #144]	@ (8004e80 <HAL_RCC_OscConfig+0x244>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fd fa80 	bl	80022f8 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dfc:	f7fd fa7c 	bl	80022f8 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e187      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d036      	beq.n	8004e94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d016      	beq.n	8004e5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e2e:	4b15      	ldr	r3, [pc, #84]	@ (8004e84 <HAL_RCC_OscConfig+0x248>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e34:	f7fd fa60 	bl	80022f8 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e3c:	f7fd fa5c 	bl	80022f8 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e167      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x200>
 8004e5a:	e01b      	b.n	8004e94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e5c:	4b09      	ldr	r3, [pc, #36]	@ (8004e84 <HAL_RCC_OscConfig+0x248>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e62:	f7fd fa49 	bl	80022f8 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e68:	e00e      	b.n	8004e88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6a:	f7fd fa45 	bl	80022f8 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d907      	bls.n	8004e88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e150      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	42470000 	.word	0x42470000
 8004e84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e88:	4b88      	ldr	r3, [pc, #544]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1ea      	bne.n	8004e6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 8097 	beq.w	8004fd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ea6:	4b81      	ldr	r3, [pc, #516]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10f      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	4b7d      	ldr	r3, [pc, #500]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	4a7c      	ldr	r2, [pc, #496]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ec2:	4b7a      	ldr	r3, [pc, #488]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed2:	4b77      	ldr	r3, [pc, #476]	@ (80050b0 <HAL_RCC_OscConfig+0x474>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d118      	bne.n	8004f10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ede:	4b74      	ldr	r3, [pc, #464]	@ (80050b0 <HAL_RCC_OscConfig+0x474>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a73      	ldr	r2, [pc, #460]	@ (80050b0 <HAL_RCC_OscConfig+0x474>)
 8004ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eea:	f7fd fa05 	bl	80022f8 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef2:	f7fd fa01 	bl	80022f8 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e10c      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f04:	4b6a      	ldr	r3, [pc, #424]	@ (80050b0 <HAL_RCC_OscConfig+0x474>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0f0      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d106      	bne.n	8004f26 <HAL_RCC_OscConfig+0x2ea>
 8004f18:	4b64      	ldr	r3, [pc, #400]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1c:	4a63      	ldr	r2, [pc, #396]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f24:	e01c      	b.n	8004f60 <HAL_RCC_OscConfig+0x324>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b05      	cmp	r3, #5
 8004f2c:	d10c      	bne.n	8004f48 <HAL_RCC_OscConfig+0x30c>
 8004f2e:	4b5f      	ldr	r3, [pc, #380]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f32:	4a5e      	ldr	r2, [pc, #376]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f34:	f043 0304 	orr.w	r3, r3, #4
 8004f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3e:	4a5b      	ldr	r2, [pc, #364]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f40:	f043 0301 	orr.w	r3, r3, #1
 8004f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f46:	e00b      	b.n	8004f60 <HAL_RCC_OscConfig+0x324>
 8004f48:	4b58      	ldr	r3, [pc, #352]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4c:	4a57      	ldr	r2, [pc, #348]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f4e:	f023 0301 	bic.w	r3, r3, #1
 8004f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f54:	4b55      	ldr	r3, [pc, #340]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f58:	4a54      	ldr	r2, [pc, #336]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f5a:	f023 0304 	bic.w	r3, r3, #4
 8004f5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d015      	beq.n	8004f94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f68:	f7fd f9c6 	bl	80022f8 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f6e:	e00a      	b.n	8004f86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f70:	f7fd f9c2 	bl	80022f8 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e0cb      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f86:	4b49      	ldr	r3, [pc, #292]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0ee      	beq.n	8004f70 <HAL_RCC_OscConfig+0x334>
 8004f92:	e014      	b.n	8004fbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f94:	f7fd f9b0 	bl	80022f8 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9c:	f7fd f9ac 	bl	80022f8 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e0b5      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb2:	4b3e      	ldr	r3, [pc, #248]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1ee      	bne.n	8004f9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d105      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fc4:	4b39      	ldr	r3, [pc, #228]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc8:	4a38      	ldr	r2, [pc, #224]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004fca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80a1 	beq.w	800511c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fda:	4b34      	ldr	r3, [pc, #208]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 030c 	and.w	r3, r3, #12
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d05c      	beq.n	80050a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d141      	bne.n	8005072 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fee:	4b31      	ldr	r3, [pc, #196]	@ (80050b4 <HAL_RCC_OscConfig+0x478>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff4:	f7fd f980 	bl	80022f8 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ffc:	f7fd f97c 	bl	80022f8 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e087      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500e:	4b27      	ldr	r3, [pc, #156]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69da      	ldr	r2, [r3, #28]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	019b      	lsls	r3, r3, #6
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005030:	085b      	lsrs	r3, r3, #1
 8005032:	3b01      	subs	r3, #1
 8005034:	041b      	lsls	r3, r3, #16
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	061b      	lsls	r3, r3, #24
 800503e:	491b      	ldr	r1, [pc, #108]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8005040:	4313      	orrs	r3, r2
 8005042:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005044:	4b1b      	ldr	r3, [pc, #108]	@ (80050b4 <HAL_RCC_OscConfig+0x478>)
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504a:	f7fd f955 	bl	80022f8 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005052:	f7fd f951 	bl	80022f8 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e05c      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005064:	4b11      	ldr	r3, [pc, #68]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x416>
 8005070:	e054      	b.n	800511c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005072:	4b10      	ldr	r3, [pc, #64]	@ (80050b4 <HAL_RCC_OscConfig+0x478>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005078:	f7fd f93e 	bl	80022f8 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005080:	f7fd f93a 	bl	80022f8 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e045      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005092:	4b06      	ldr	r3, [pc, #24]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f0      	bne.n	8005080 <HAL_RCC_OscConfig+0x444>
 800509e:	e03d      	b.n	800511c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d107      	bne.n	80050b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e038      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
 80050ac:	40023800 	.word	0x40023800
 80050b0:	40007000 	.word	0x40007000
 80050b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005128 <HAL_RCC_OscConfig+0x4ec>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d028      	beq.n	8005118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d121      	bne.n	8005118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050de:	429a      	cmp	r2, r3
 80050e0:	d11a      	bne.n	8005118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050e8:	4013      	ands	r3, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d111      	bne.n	8005118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	3b01      	subs	r3, #1
 8005102:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d107      	bne.n	8005118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005112:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40023800 	.word	0x40023800

0800512c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0cc      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005140:	4b68      	ldr	r3, [pc, #416]	@ (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d90c      	bls.n	8005168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514e:	4b65      	ldr	r3, [pc, #404]	@ (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b63      	ldr	r3, [pc, #396]	@ (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0b8      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d020      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005180:	4b59      	ldr	r3, [pc, #356]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	4a58      	ldr	r2, [pc, #352]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800518a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005198:	4b53      	ldr	r3, [pc, #332]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	4a52      	ldr	r2, [pc, #328]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a4:	4b50      	ldr	r3, [pc, #320]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	494d      	ldr	r1, [pc, #308]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d044      	beq.n	800524c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d107      	bne.n	80051da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ca:	4b47      	ldr	r3, [pc, #284]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d119      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e07f      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d003      	beq.n	80051ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d107      	bne.n	80051fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ea:	4b3f      	ldr	r3, [pc, #252]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e06f      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051fa:	4b3b      	ldr	r3, [pc, #236]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e067      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800520a:	4b37      	ldr	r3, [pc, #220]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f023 0203 	bic.w	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4934      	ldr	r1, [pc, #208]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005218:	4313      	orrs	r3, r2
 800521a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800521c:	f7fd f86c 	bl	80022f8 <HAL_GetTick>
 8005220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005222:	e00a      	b.n	800523a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005224:	f7fd f868 	bl	80022f8 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e04f      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	4b2b      	ldr	r3, [pc, #172]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 020c 	and.w	r2, r3, #12
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	429a      	cmp	r2, r3
 800524a:	d1eb      	bne.n	8005224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800524c:	4b25      	ldr	r3, [pc, #148]	@ (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d20c      	bcs.n	8005274 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525a:	4b22      	ldr	r3, [pc, #136]	@ (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005262:	4b20      	ldr	r3, [pc, #128]	@ (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d001      	beq.n	8005274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e032      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005280:	4b19      	ldr	r3, [pc, #100]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4916      	ldr	r1, [pc, #88]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800528e:	4313      	orrs	r3, r2
 8005290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d009      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800529e:	4b12      	ldr	r3, [pc, #72]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	490e      	ldr	r1, [pc, #56]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052b2:	f000 f821 	bl	80052f8 <HAL_RCC_GetSysClockFreq>
 80052b6:	4602      	mov	r2, r0
 80052b8:	4b0b      	ldr	r3, [pc, #44]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	490a      	ldr	r1, [pc, #40]	@ (80052ec <HAL_RCC_ClockConfig+0x1c0>)
 80052c4:	5ccb      	ldrb	r3, [r1, r3]
 80052c6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ca:	4a09      	ldr	r2, [pc, #36]	@ (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80052ce:	4b09      	ldr	r3, [pc, #36]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fc ffcc 	bl	8002270 <HAL_InitTick>

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40023c00 	.word	0x40023c00
 80052e8:	40023800 	.word	0x40023800
 80052ec:	08008a50 	.word	0x08008a50
 80052f0:	20000008 	.word	0x20000008
 80052f4:	2000000c 	.word	0x2000000c

080052f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052fc:	b094      	sub	sp, #80	@ 0x50
 80052fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005310:	4b79      	ldr	r3, [pc, #484]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f003 030c 	and.w	r3, r3, #12
 8005318:	2b08      	cmp	r3, #8
 800531a:	d00d      	beq.n	8005338 <HAL_RCC_GetSysClockFreq+0x40>
 800531c:	2b08      	cmp	r3, #8
 800531e:	f200 80e1 	bhi.w	80054e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_RCC_GetSysClockFreq+0x34>
 8005326:	2b04      	cmp	r3, #4
 8005328:	d003      	beq.n	8005332 <HAL_RCC_GetSysClockFreq+0x3a>
 800532a:	e0db      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800532c:	4b73      	ldr	r3, [pc, #460]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x204>)
 800532e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005330:	e0db      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005332:	4b73      	ldr	r3, [pc, #460]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x208>)
 8005334:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005336:	e0d8      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005338:	4b6f      	ldr	r3, [pc, #444]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005340:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005342:	4b6d      	ldr	r3, [pc, #436]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d063      	beq.n	8005416 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800534e:	4b6a      	ldr	r3, [pc, #424]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	099b      	lsrs	r3, r3, #6
 8005354:	2200      	movs	r2, #0
 8005356:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005358:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005360:	633b      	str	r3, [r7, #48]	@ 0x30
 8005362:	2300      	movs	r3, #0
 8005364:	637b      	str	r3, [r7, #52]	@ 0x34
 8005366:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800536a:	4622      	mov	r2, r4
 800536c:	462b      	mov	r3, r5
 800536e:	f04f 0000 	mov.w	r0, #0
 8005372:	f04f 0100 	mov.w	r1, #0
 8005376:	0159      	lsls	r1, r3, #5
 8005378:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800537c:	0150      	lsls	r0, r2, #5
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4621      	mov	r1, r4
 8005384:	1a51      	subs	r1, r2, r1
 8005386:	6139      	str	r1, [r7, #16]
 8005388:	4629      	mov	r1, r5
 800538a:	eb63 0301 	sbc.w	r3, r3, r1
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800539c:	4659      	mov	r1, fp
 800539e:	018b      	lsls	r3, r1, #6
 80053a0:	4651      	mov	r1, sl
 80053a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053a6:	4651      	mov	r1, sl
 80053a8:	018a      	lsls	r2, r1, #6
 80053aa:	4651      	mov	r1, sl
 80053ac:	ebb2 0801 	subs.w	r8, r2, r1
 80053b0:	4659      	mov	r1, fp
 80053b2:	eb63 0901 	sbc.w	r9, r3, r1
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ca:	4690      	mov	r8, r2
 80053cc:	4699      	mov	r9, r3
 80053ce:	4623      	mov	r3, r4
 80053d0:	eb18 0303 	adds.w	r3, r8, r3
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	462b      	mov	r3, r5
 80053d8:	eb49 0303 	adc.w	r3, r9, r3
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	f04f 0300 	mov.w	r3, #0
 80053e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053ea:	4629      	mov	r1, r5
 80053ec:	024b      	lsls	r3, r1, #9
 80053ee:	4621      	mov	r1, r4
 80053f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053f4:	4621      	mov	r1, r4
 80053f6:	024a      	lsls	r2, r1, #9
 80053f8:	4610      	mov	r0, r2
 80053fa:	4619      	mov	r1, r3
 80053fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053fe:	2200      	movs	r2, #0
 8005400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005402:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005404:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005408:	f7fb fc26 	bl	8000c58 <__aeabi_uldivmod>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4613      	mov	r3, r2
 8005412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005414:	e058      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005416:	4b38      	ldr	r3, [pc, #224]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	099b      	lsrs	r3, r3, #6
 800541c:	2200      	movs	r2, #0
 800541e:	4618      	mov	r0, r3
 8005420:	4611      	mov	r1, r2
 8005422:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005426:	623b      	str	r3, [r7, #32]
 8005428:	2300      	movs	r3, #0
 800542a:	627b      	str	r3, [r7, #36]	@ 0x24
 800542c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005430:	4642      	mov	r2, r8
 8005432:	464b      	mov	r3, r9
 8005434:	f04f 0000 	mov.w	r0, #0
 8005438:	f04f 0100 	mov.w	r1, #0
 800543c:	0159      	lsls	r1, r3, #5
 800543e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005442:	0150      	lsls	r0, r2, #5
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4641      	mov	r1, r8
 800544a:	ebb2 0a01 	subs.w	sl, r2, r1
 800544e:	4649      	mov	r1, r9
 8005450:	eb63 0b01 	sbc.w	fp, r3, r1
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005460:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005464:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005468:	ebb2 040a 	subs.w	r4, r2, sl
 800546c:	eb63 050b 	sbc.w	r5, r3, fp
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	00eb      	lsls	r3, r5, #3
 800547a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800547e:	00e2      	lsls	r2, r4, #3
 8005480:	4614      	mov	r4, r2
 8005482:	461d      	mov	r5, r3
 8005484:	4643      	mov	r3, r8
 8005486:	18e3      	adds	r3, r4, r3
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	464b      	mov	r3, r9
 800548c:	eb45 0303 	adc.w	r3, r5, r3
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800549e:	4629      	mov	r1, r5
 80054a0:	028b      	lsls	r3, r1, #10
 80054a2:	4621      	mov	r1, r4
 80054a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054a8:	4621      	mov	r1, r4
 80054aa:	028a      	lsls	r2, r1, #10
 80054ac:	4610      	mov	r0, r2
 80054ae:	4619      	mov	r1, r3
 80054b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054b2:	2200      	movs	r2, #0
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	61fa      	str	r2, [r7, #28]
 80054b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054bc:	f7fb fbcc 	bl	8000c58 <__aeabi_uldivmod>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4613      	mov	r3, r2
 80054c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80054c8:	4b0b      	ldr	r3, [pc, #44]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	0c1b      	lsrs	r3, r3, #16
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	3301      	adds	r3, #1
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80054d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054e2:	e002      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054e4:	4b05      	ldr	r3, [pc, #20]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x204>)
 80054e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3750      	adds	r7, #80	@ 0x50
 80054f0:	46bd      	mov	sp, r7
 80054f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800
 80054fc:	00f42400 	.word	0x00f42400
 8005500:	007a1200 	.word	0x007a1200

08005504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005508:	4b03      	ldr	r3, [pc, #12]	@ (8005518 <HAL_RCC_GetHCLKFreq+0x14>)
 800550a:	681b      	ldr	r3, [r3, #0]
}
 800550c:	4618      	mov	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	20000008 	.word	0x20000008

0800551c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005520:	f7ff fff0 	bl	8005504 <HAL_RCC_GetHCLKFreq>
 8005524:	4602      	mov	r2, r0
 8005526:	4b05      	ldr	r3, [pc, #20]	@ (800553c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	0a9b      	lsrs	r3, r3, #10
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	4903      	ldr	r1, [pc, #12]	@ (8005540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005532:	5ccb      	ldrb	r3, [r1, r3]
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40023800 	.word	0x40023800
 8005540:	08008a60 	.word	0x08008a60

08005544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e041      	b.n	80055da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fc fcce 	bl	8001f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3304      	adds	r3, #4
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f000 f950 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d001      	beq.n	80055fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e03c      	b.n	8005676 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1e      	ldr	r2, [pc, #120]	@ (8005684 <HAL_TIM_Base_Start+0xa0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d018      	beq.n	8005640 <HAL_TIM_Base_Start+0x5c>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005616:	d013      	beq.n	8005640 <HAL_TIM_Base_Start+0x5c>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1a      	ldr	r2, [pc, #104]	@ (8005688 <HAL_TIM_Base_Start+0xa4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00e      	beq.n	8005640 <HAL_TIM_Base_Start+0x5c>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a19      	ldr	r2, [pc, #100]	@ (800568c <HAL_TIM_Base_Start+0xa8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d009      	beq.n	8005640 <HAL_TIM_Base_Start+0x5c>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a17      	ldr	r2, [pc, #92]	@ (8005690 <HAL_TIM_Base_Start+0xac>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_TIM_Base_Start+0x5c>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a16      	ldr	r2, [pc, #88]	@ (8005694 <HAL_TIM_Base_Start+0xb0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d111      	bne.n	8005664 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b06      	cmp	r3, #6
 8005650:	d010      	beq.n	8005674 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0201 	orr.w	r2, r2, #1
 8005660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005662:	e007      	b.n	8005674 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40010000 	.word	0x40010000
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800
 8005690:	40000c00 	.word	0x40000c00
 8005694:	40014000 	.word	0x40014000

08005698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_TIM_ConfigClockSource+0x1c>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e0b4      	b.n	800581e <HAL_TIM_ConfigClockSource+0x186>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ec:	d03e      	beq.n	800576c <HAL_TIM_ConfigClockSource+0xd4>
 80056ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f2:	f200 8087 	bhi.w	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 80056f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056fa:	f000 8086 	beq.w	800580a <HAL_TIM_ConfigClockSource+0x172>
 80056fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005702:	d87f      	bhi.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 8005704:	2b70      	cmp	r3, #112	@ 0x70
 8005706:	d01a      	beq.n	800573e <HAL_TIM_ConfigClockSource+0xa6>
 8005708:	2b70      	cmp	r3, #112	@ 0x70
 800570a:	d87b      	bhi.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 800570c:	2b60      	cmp	r3, #96	@ 0x60
 800570e:	d050      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x11a>
 8005710:	2b60      	cmp	r3, #96	@ 0x60
 8005712:	d877      	bhi.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 8005714:	2b50      	cmp	r3, #80	@ 0x50
 8005716:	d03c      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0xfa>
 8005718:	2b50      	cmp	r3, #80	@ 0x50
 800571a:	d873      	bhi.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 800571c:	2b40      	cmp	r3, #64	@ 0x40
 800571e:	d058      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x13a>
 8005720:	2b40      	cmp	r3, #64	@ 0x40
 8005722:	d86f      	bhi.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 8005724:	2b30      	cmp	r3, #48	@ 0x30
 8005726:	d064      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005728:	2b30      	cmp	r3, #48	@ 0x30
 800572a:	d86b      	bhi.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 800572c:	2b20      	cmp	r3, #32
 800572e:	d060      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005730:	2b20      	cmp	r3, #32
 8005732:	d867      	bhi.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 8005734:	2b00      	cmp	r3, #0
 8005736:	d05c      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005738:	2b10      	cmp	r3, #16
 800573a:	d05a      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x15a>
 800573c:	e062      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800574e:	f000 f96b 	bl	8005a28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005760:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	609a      	str	r2, [r3, #8]
      break;
 800576a:	e04f      	b.n	800580c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800577c:	f000 f954 	bl	8005a28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800578e:	609a      	str	r2, [r3, #8]
      break;
 8005790:	e03c      	b.n	800580c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800579e:	461a      	mov	r2, r3
 80057a0:	f000 f8c8 	bl	8005934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2150      	movs	r1, #80	@ 0x50
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 f921 	bl	80059f2 <TIM_ITRx_SetConfig>
      break;
 80057b0:	e02c      	b.n	800580c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057be:	461a      	mov	r2, r3
 80057c0:	f000 f8e7 	bl	8005992 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2160      	movs	r1, #96	@ 0x60
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 f911 	bl	80059f2 <TIM_ITRx_SetConfig>
      break;
 80057d0:	e01c      	b.n	800580c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057de:	461a      	mov	r2, r3
 80057e0:	f000 f8a8 	bl	8005934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2140      	movs	r1, #64	@ 0x40
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 f901 	bl	80059f2 <TIM_ITRx_SetConfig>
      break;
 80057f0:	e00c      	b.n	800580c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4619      	mov	r1, r3
 80057fc:	4610      	mov	r0, r2
 80057fe:	f000 f8f8 	bl	80059f2 <TIM_ITRx_SetConfig>
      break;
 8005802:	e003      	b.n	800580c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
      break;
 8005808:	e000      	b.n	800580c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800580a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a37      	ldr	r2, [pc, #220]	@ (8005918 <TIM_Base_SetConfig+0xf0>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00f      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005846:	d00b      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a34      	ldr	r2, [pc, #208]	@ (800591c <TIM_Base_SetConfig+0xf4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a33      	ldr	r2, [pc, #204]	@ (8005920 <TIM_Base_SetConfig+0xf8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a32      	ldr	r2, [pc, #200]	@ (8005924 <TIM_Base_SetConfig+0xfc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d108      	bne.n	8005872 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a28      	ldr	r2, [pc, #160]	@ (8005918 <TIM_Base_SetConfig+0xf0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01b      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005880:	d017      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a25      	ldr	r2, [pc, #148]	@ (800591c <TIM_Base_SetConfig+0xf4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d013      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a24      	ldr	r2, [pc, #144]	@ (8005920 <TIM_Base_SetConfig+0xf8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00f      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a23      	ldr	r2, [pc, #140]	@ (8005924 <TIM_Base_SetConfig+0xfc>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00b      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a22      	ldr	r2, [pc, #136]	@ (8005928 <TIM_Base_SetConfig+0x100>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d007      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a21      	ldr	r2, [pc, #132]	@ (800592c <TIM_Base_SetConfig+0x104>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d003      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a20      	ldr	r2, [pc, #128]	@ (8005930 <TIM_Base_SetConfig+0x108>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d108      	bne.n	80058c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a0c      	ldr	r2, [pc, #48]	@ (8005918 <TIM_Base_SetConfig+0xf0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d103      	bne.n	80058f2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f043 0204 	orr.w	r2, r3, #4
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	601a      	str	r2, [r3, #0]
}
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40010000 	.word	0x40010000
 800591c:	40000400 	.word	0x40000400
 8005920:	40000800 	.word	0x40000800
 8005924:	40000c00 	.word	0x40000c00
 8005928:	40014000 	.word	0x40014000
 800592c:	40014400 	.word	0x40014400
 8005930:	40014800 	.word	0x40014800

08005934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f023 0201 	bic.w	r2, r3, #1
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800595e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f023 030a 	bic.w	r3, r3, #10
 8005970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4313      	orrs	r3, r2
 8005978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	621a      	str	r2, [r3, #32]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005992:	b480      	push	{r7}
 8005994:	b087      	sub	sp, #28
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	f023 0210 	bic.w	r2, r3, #16
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	031b      	lsls	r3, r3, #12
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b085      	sub	sp, #20
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f043 0307 	orr.w	r3, r3, #7
 8005a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	609a      	str	r2, [r3, #8]
}
 8005a1c:	bf00      	nop
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	021a      	lsls	r2, r3, #8
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	609a      	str	r2, [r3, #8]
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e050      	b.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1c      	ldr	r2, [pc, #112]	@ (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d018      	beq.n	8005af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005acc:	d013      	beq.n	8005af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a18      	ldr	r2, [pc, #96]	@ (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00e      	beq.n	8005af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a16      	ldr	r2, [pc, #88]	@ (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d009      	beq.n	8005af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a15      	ldr	r2, [pc, #84]	@ (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d004      	beq.n	8005af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a13      	ldr	r2, [pc, #76]	@ (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d10c      	bne.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40010000 	.word	0x40010000
 8005b34:	40000400 	.word	0x40000400
 8005b38:	40000800 	.word	0x40000800
 8005b3c:	40000c00 	.word	0x40000c00
 8005b40:	40014000 	.word	0x40014000

08005b44 <__cvt>:
 8005b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b48:	ec57 6b10 	vmov	r6, r7, d0
 8005b4c:	2f00      	cmp	r7, #0
 8005b4e:	460c      	mov	r4, r1
 8005b50:	4619      	mov	r1, r3
 8005b52:	463b      	mov	r3, r7
 8005b54:	bfbb      	ittet	lt
 8005b56:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b5a:	461f      	movlt	r7, r3
 8005b5c:	2300      	movge	r3, #0
 8005b5e:	232d      	movlt	r3, #45	@ 0x2d
 8005b60:	700b      	strb	r3, [r1, #0]
 8005b62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b64:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005b68:	4691      	mov	r9, r2
 8005b6a:	f023 0820 	bic.w	r8, r3, #32
 8005b6e:	bfbc      	itt	lt
 8005b70:	4632      	movlt	r2, r6
 8005b72:	4616      	movlt	r6, r2
 8005b74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b78:	d005      	beq.n	8005b86 <__cvt+0x42>
 8005b7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005b7e:	d100      	bne.n	8005b82 <__cvt+0x3e>
 8005b80:	3401      	adds	r4, #1
 8005b82:	2102      	movs	r1, #2
 8005b84:	e000      	b.n	8005b88 <__cvt+0x44>
 8005b86:	2103      	movs	r1, #3
 8005b88:	ab03      	add	r3, sp, #12
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	ab02      	add	r3, sp, #8
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	ec47 6b10 	vmov	d0, r6, r7
 8005b94:	4653      	mov	r3, sl
 8005b96:	4622      	mov	r2, r4
 8005b98:	f000 ff4a 	bl	8006a30 <_dtoa_r>
 8005b9c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005ba0:	4605      	mov	r5, r0
 8005ba2:	d119      	bne.n	8005bd8 <__cvt+0x94>
 8005ba4:	f019 0f01 	tst.w	r9, #1
 8005ba8:	d00e      	beq.n	8005bc8 <__cvt+0x84>
 8005baa:	eb00 0904 	add.w	r9, r0, r4
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	4639      	mov	r1, r7
 8005bb6:	f7fa ff8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bba:	b108      	cbz	r0, 8005bc0 <__cvt+0x7c>
 8005bbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bc0:	2230      	movs	r2, #48	@ 0x30
 8005bc2:	9b03      	ldr	r3, [sp, #12]
 8005bc4:	454b      	cmp	r3, r9
 8005bc6:	d31e      	bcc.n	8005c06 <__cvt+0xc2>
 8005bc8:	9b03      	ldr	r3, [sp, #12]
 8005bca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bcc:	1b5b      	subs	r3, r3, r5
 8005bce:	4628      	mov	r0, r5
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	b004      	add	sp, #16
 8005bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bdc:	eb00 0904 	add.w	r9, r0, r4
 8005be0:	d1e5      	bne.n	8005bae <__cvt+0x6a>
 8005be2:	7803      	ldrb	r3, [r0, #0]
 8005be4:	2b30      	cmp	r3, #48	@ 0x30
 8005be6:	d10a      	bne.n	8005bfe <__cvt+0xba>
 8005be8:	2200      	movs	r2, #0
 8005bea:	2300      	movs	r3, #0
 8005bec:	4630      	mov	r0, r6
 8005bee:	4639      	mov	r1, r7
 8005bf0:	f7fa ff72 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bf4:	b918      	cbnz	r0, 8005bfe <__cvt+0xba>
 8005bf6:	f1c4 0401 	rsb	r4, r4, #1
 8005bfa:	f8ca 4000 	str.w	r4, [sl]
 8005bfe:	f8da 3000 	ldr.w	r3, [sl]
 8005c02:	4499      	add	r9, r3
 8005c04:	e7d3      	b.n	8005bae <__cvt+0x6a>
 8005c06:	1c59      	adds	r1, r3, #1
 8005c08:	9103      	str	r1, [sp, #12]
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	e7d9      	b.n	8005bc2 <__cvt+0x7e>

08005c0e <__exponent>:
 8005c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c10:	2900      	cmp	r1, #0
 8005c12:	bfba      	itte	lt
 8005c14:	4249      	neglt	r1, r1
 8005c16:	232d      	movlt	r3, #45	@ 0x2d
 8005c18:	232b      	movge	r3, #43	@ 0x2b
 8005c1a:	2909      	cmp	r1, #9
 8005c1c:	7002      	strb	r2, [r0, #0]
 8005c1e:	7043      	strb	r3, [r0, #1]
 8005c20:	dd29      	ble.n	8005c76 <__exponent+0x68>
 8005c22:	f10d 0307 	add.w	r3, sp, #7
 8005c26:	461d      	mov	r5, r3
 8005c28:	270a      	movs	r7, #10
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c30:	fb07 1416 	mls	r4, r7, r6, r1
 8005c34:	3430      	adds	r4, #48	@ 0x30
 8005c36:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	2c63      	cmp	r4, #99	@ 0x63
 8005c3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c42:	4631      	mov	r1, r6
 8005c44:	dcf1      	bgt.n	8005c2a <__exponent+0x1c>
 8005c46:	3130      	adds	r1, #48	@ 0x30
 8005c48:	1e94      	subs	r4, r2, #2
 8005c4a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c4e:	1c41      	adds	r1, r0, #1
 8005c50:	4623      	mov	r3, r4
 8005c52:	42ab      	cmp	r3, r5
 8005c54:	d30a      	bcc.n	8005c6c <__exponent+0x5e>
 8005c56:	f10d 0309 	add.w	r3, sp, #9
 8005c5a:	1a9b      	subs	r3, r3, r2
 8005c5c:	42ac      	cmp	r4, r5
 8005c5e:	bf88      	it	hi
 8005c60:	2300      	movhi	r3, #0
 8005c62:	3302      	adds	r3, #2
 8005c64:	4403      	add	r3, r0
 8005c66:	1a18      	subs	r0, r3, r0
 8005c68:	b003      	add	sp, #12
 8005c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c6c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005c70:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005c74:	e7ed      	b.n	8005c52 <__exponent+0x44>
 8005c76:	2330      	movs	r3, #48	@ 0x30
 8005c78:	3130      	adds	r1, #48	@ 0x30
 8005c7a:	7083      	strb	r3, [r0, #2]
 8005c7c:	70c1      	strb	r1, [r0, #3]
 8005c7e:	1d03      	adds	r3, r0, #4
 8005c80:	e7f1      	b.n	8005c66 <__exponent+0x58>
	...

08005c84 <_printf_float>:
 8005c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c88:	b08d      	sub	sp, #52	@ 0x34
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005c90:	4616      	mov	r6, r2
 8005c92:	461f      	mov	r7, r3
 8005c94:	4605      	mov	r5, r0
 8005c96:	f000 fdbd 	bl	8006814 <_localeconv_r>
 8005c9a:	6803      	ldr	r3, [r0, #0]
 8005c9c:	9304      	str	r3, [sp, #16]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fa faee 	bl	8000280 <strlen>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cac:	9005      	str	r0, [sp, #20]
 8005cae:	3307      	adds	r3, #7
 8005cb0:	f023 0307 	bic.w	r3, r3, #7
 8005cb4:	f103 0208 	add.w	r2, r3, #8
 8005cb8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005cbc:	f8d4 b000 	ldr.w	fp, [r4]
 8005cc0:	f8c8 2000 	str.w	r2, [r8]
 8005cc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cc8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ccc:	9307      	str	r3, [sp, #28]
 8005cce:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cd2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005cd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cda:	4b9c      	ldr	r3, [pc, #624]	@ (8005f4c <_printf_float+0x2c8>)
 8005cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce0:	f7fa ff2c 	bl	8000b3c <__aeabi_dcmpun>
 8005ce4:	bb70      	cbnz	r0, 8005d44 <_printf_float+0xc0>
 8005ce6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cea:	4b98      	ldr	r3, [pc, #608]	@ (8005f4c <_printf_float+0x2c8>)
 8005cec:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf0:	f7fa ff06 	bl	8000b00 <__aeabi_dcmple>
 8005cf4:	bb30      	cbnz	r0, 8005d44 <_printf_float+0xc0>
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4640      	mov	r0, r8
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	f7fa fef5 	bl	8000aec <__aeabi_dcmplt>
 8005d02:	b110      	cbz	r0, 8005d0a <_printf_float+0x86>
 8005d04:	232d      	movs	r3, #45	@ 0x2d
 8005d06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d0a:	4a91      	ldr	r2, [pc, #580]	@ (8005f50 <_printf_float+0x2cc>)
 8005d0c:	4b91      	ldr	r3, [pc, #580]	@ (8005f54 <_printf_float+0x2d0>)
 8005d0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d12:	bf8c      	ite	hi
 8005d14:	4690      	movhi	r8, r2
 8005d16:	4698      	movls	r8, r3
 8005d18:	2303      	movs	r3, #3
 8005d1a:	6123      	str	r3, [r4, #16]
 8005d1c:	f02b 0304 	bic.w	r3, fp, #4
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	f04f 0900 	mov.w	r9, #0
 8005d26:	9700      	str	r7, [sp, #0]
 8005d28:	4633      	mov	r3, r6
 8005d2a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 f9d2 	bl	80060d8 <_printf_common>
 8005d34:	3001      	adds	r0, #1
 8005d36:	f040 808d 	bne.w	8005e54 <_printf_float+0x1d0>
 8005d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3e:	b00d      	add	sp, #52	@ 0x34
 8005d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d44:	4642      	mov	r2, r8
 8005d46:	464b      	mov	r3, r9
 8005d48:	4640      	mov	r0, r8
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	f7fa fef6 	bl	8000b3c <__aeabi_dcmpun>
 8005d50:	b140      	cbz	r0, 8005d64 <_printf_float+0xe0>
 8005d52:	464b      	mov	r3, r9
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	bfbc      	itt	lt
 8005d58:	232d      	movlt	r3, #45	@ 0x2d
 8005d5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d5e:	4a7e      	ldr	r2, [pc, #504]	@ (8005f58 <_printf_float+0x2d4>)
 8005d60:	4b7e      	ldr	r3, [pc, #504]	@ (8005f5c <_printf_float+0x2d8>)
 8005d62:	e7d4      	b.n	8005d0e <_printf_float+0x8a>
 8005d64:	6863      	ldr	r3, [r4, #4]
 8005d66:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005d6a:	9206      	str	r2, [sp, #24]
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	d13b      	bne.n	8005de8 <_printf_float+0x164>
 8005d70:	2306      	movs	r3, #6
 8005d72:	6063      	str	r3, [r4, #4]
 8005d74:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005d78:	2300      	movs	r3, #0
 8005d7a:	6022      	str	r2, [r4, #0]
 8005d7c:	9303      	str	r3, [sp, #12]
 8005d7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005d80:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005d84:	ab09      	add	r3, sp, #36	@ 0x24
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	6861      	ldr	r1, [r4, #4]
 8005d8a:	ec49 8b10 	vmov	d0, r8, r9
 8005d8e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005d92:	4628      	mov	r0, r5
 8005d94:	f7ff fed6 	bl	8005b44 <__cvt>
 8005d98:	9b06      	ldr	r3, [sp, #24]
 8005d9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d9c:	2b47      	cmp	r3, #71	@ 0x47
 8005d9e:	4680      	mov	r8, r0
 8005da0:	d129      	bne.n	8005df6 <_printf_float+0x172>
 8005da2:	1cc8      	adds	r0, r1, #3
 8005da4:	db02      	blt.n	8005dac <_printf_float+0x128>
 8005da6:	6863      	ldr	r3, [r4, #4]
 8005da8:	4299      	cmp	r1, r3
 8005daa:	dd41      	ble.n	8005e30 <_printf_float+0x1ac>
 8005dac:	f1aa 0a02 	sub.w	sl, sl, #2
 8005db0:	fa5f fa8a 	uxtb.w	sl, sl
 8005db4:	3901      	subs	r1, #1
 8005db6:	4652      	mov	r2, sl
 8005db8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005dbc:	9109      	str	r1, [sp, #36]	@ 0x24
 8005dbe:	f7ff ff26 	bl	8005c0e <__exponent>
 8005dc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005dc4:	1813      	adds	r3, r2, r0
 8005dc6:	2a01      	cmp	r2, #1
 8005dc8:	4681      	mov	r9, r0
 8005dca:	6123      	str	r3, [r4, #16]
 8005dcc:	dc02      	bgt.n	8005dd4 <_printf_float+0x150>
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	07d2      	lsls	r2, r2, #31
 8005dd2:	d501      	bpl.n	8005dd8 <_printf_float+0x154>
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	6123      	str	r3, [r4, #16]
 8005dd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0a2      	beq.n	8005d26 <_printf_float+0xa2>
 8005de0:	232d      	movs	r3, #45	@ 0x2d
 8005de2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005de6:	e79e      	b.n	8005d26 <_printf_float+0xa2>
 8005de8:	9a06      	ldr	r2, [sp, #24]
 8005dea:	2a47      	cmp	r2, #71	@ 0x47
 8005dec:	d1c2      	bne.n	8005d74 <_printf_float+0xf0>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1c0      	bne.n	8005d74 <_printf_float+0xf0>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e7bd      	b.n	8005d72 <_printf_float+0xee>
 8005df6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005dfa:	d9db      	bls.n	8005db4 <_printf_float+0x130>
 8005dfc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e00:	d118      	bne.n	8005e34 <_printf_float+0x1b0>
 8005e02:	2900      	cmp	r1, #0
 8005e04:	6863      	ldr	r3, [r4, #4]
 8005e06:	dd0b      	ble.n	8005e20 <_printf_float+0x19c>
 8005e08:	6121      	str	r1, [r4, #16]
 8005e0a:	b913      	cbnz	r3, 8005e12 <_printf_float+0x18e>
 8005e0c:	6822      	ldr	r2, [r4, #0]
 8005e0e:	07d0      	lsls	r0, r2, #31
 8005e10:	d502      	bpl.n	8005e18 <_printf_float+0x194>
 8005e12:	3301      	adds	r3, #1
 8005e14:	440b      	add	r3, r1
 8005e16:	6123      	str	r3, [r4, #16]
 8005e18:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e1a:	f04f 0900 	mov.w	r9, #0
 8005e1e:	e7db      	b.n	8005dd8 <_printf_float+0x154>
 8005e20:	b913      	cbnz	r3, 8005e28 <_printf_float+0x1a4>
 8005e22:	6822      	ldr	r2, [r4, #0]
 8005e24:	07d2      	lsls	r2, r2, #31
 8005e26:	d501      	bpl.n	8005e2c <_printf_float+0x1a8>
 8005e28:	3302      	adds	r3, #2
 8005e2a:	e7f4      	b.n	8005e16 <_printf_float+0x192>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e7f2      	b.n	8005e16 <_printf_float+0x192>
 8005e30:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e36:	4299      	cmp	r1, r3
 8005e38:	db05      	blt.n	8005e46 <_printf_float+0x1c2>
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	6121      	str	r1, [r4, #16]
 8005e3e:	07d8      	lsls	r0, r3, #31
 8005e40:	d5ea      	bpl.n	8005e18 <_printf_float+0x194>
 8005e42:	1c4b      	adds	r3, r1, #1
 8005e44:	e7e7      	b.n	8005e16 <_printf_float+0x192>
 8005e46:	2900      	cmp	r1, #0
 8005e48:	bfd4      	ite	le
 8005e4a:	f1c1 0202 	rsble	r2, r1, #2
 8005e4e:	2201      	movgt	r2, #1
 8005e50:	4413      	add	r3, r2
 8005e52:	e7e0      	b.n	8005e16 <_printf_float+0x192>
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	055a      	lsls	r2, r3, #21
 8005e58:	d407      	bmi.n	8005e6a <_printf_float+0x1e6>
 8005e5a:	6923      	ldr	r3, [r4, #16]
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	4631      	mov	r1, r6
 8005e60:	4628      	mov	r0, r5
 8005e62:	47b8      	blx	r7
 8005e64:	3001      	adds	r0, #1
 8005e66:	d12b      	bne.n	8005ec0 <_printf_float+0x23c>
 8005e68:	e767      	b.n	8005d3a <_printf_float+0xb6>
 8005e6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e6e:	f240 80dd 	bls.w	800602c <_printf_float+0x3a8>
 8005e72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e76:	2200      	movs	r2, #0
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f7fa fe2d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d033      	beq.n	8005eea <_printf_float+0x266>
 8005e82:	4a37      	ldr	r2, [pc, #220]	@ (8005f60 <_printf_float+0x2dc>)
 8005e84:	2301      	movs	r3, #1
 8005e86:	4631      	mov	r1, r6
 8005e88:	4628      	mov	r0, r5
 8005e8a:	47b8      	blx	r7
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	f43f af54 	beq.w	8005d3a <_printf_float+0xb6>
 8005e92:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005e96:	4543      	cmp	r3, r8
 8005e98:	db02      	blt.n	8005ea0 <_printf_float+0x21c>
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	07d8      	lsls	r0, r3, #31
 8005e9e:	d50f      	bpl.n	8005ec0 <_printf_float+0x23c>
 8005ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ea4:	4631      	mov	r1, r6
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	47b8      	blx	r7
 8005eaa:	3001      	adds	r0, #1
 8005eac:	f43f af45 	beq.w	8005d3a <_printf_float+0xb6>
 8005eb0:	f04f 0900 	mov.w	r9, #0
 8005eb4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005eb8:	f104 0a1a 	add.w	sl, r4, #26
 8005ebc:	45c8      	cmp	r8, r9
 8005ebe:	dc09      	bgt.n	8005ed4 <_printf_float+0x250>
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	079b      	lsls	r3, r3, #30
 8005ec4:	f100 8103 	bmi.w	80060ce <_printf_float+0x44a>
 8005ec8:	68e0      	ldr	r0, [r4, #12]
 8005eca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ecc:	4298      	cmp	r0, r3
 8005ece:	bfb8      	it	lt
 8005ed0:	4618      	movlt	r0, r3
 8005ed2:	e734      	b.n	8005d3e <_printf_float+0xba>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	4652      	mov	r2, sl
 8005ed8:	4631      	mov	r1, r6
 8005eda:	4628      	mov	r0, r5
 8005edc:	47b8      	blx	r7
 8005ede:	3001      	adds	r0, #1
 8005ee0:	f43f af2b 	beq.w	8005d3a <_printf_float+0xb6>
 8005ee4:	f109 0901 	add.w	r9, r9, #1
 8005ee8:	e7e8      	b.n	8005ebc <_printf_float+0x238>
 8005eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	dc39      	bgt.n	8005f64 <_printf_float+0x2e0>
 8005ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f60 <_printf_float+0x2dc>)
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	4631      	mov	r1, r6
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	47b8      	blx	r7
 8005efa:	3001      	adds	r0, #1
 8005efc:	f43f af1d 	beq.w	8005d3a <_printf_float+0xb6>
 8005f00:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005f04:	ea59 0303 	orrs.w	r3, r9, r3
 8005f08:	d102      	bne.n	8005f10 <_printf_float+0x28c>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	07d9      	lsls	r1, r3, #31
 8005f0e:	d5d7      	bpl.n	8005ec0 <_printf_float+0x23c>
 8005f10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f14:	4631      	mov	r1, r6
 8005f16:	4628      	mov	r0, r5
 8005f18:	47b8      	blx	r7
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	f43f af0d 	beq.w	8005d3a <_printf_float+0xb6>
 8005f20:	f04f 0a00 	mov.w	sl, #0
 8005f24:	f104 0b1a 	add.w	fp, r4, #26
 8005f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f2a:	425b      	negs	r3, r3
 8005f2c:	4553      	cmp	r3, sl
 8005f2e:	dc01      	bgt.n	8005f34 <_printf_float+0x2b0>
 8005f30:	464b      	mov	r3, r9
 8005f32:	e793      	b.n	8005e5c <_printf_float+0x1d8>
 8005f34:	2301      	movs	r3, #1
 8005f36:	465a      	mov	r2, fp
 8005f38:	4631      	mov	r1, r6
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	47b8      	blx	r7
 8005f3e:	3001      	adds	r0, #1
 8005f40:	f43f aefb 	beq.w	8005d3a <_printf_float+0xb6>
 8005f44:	f10a 0a01 	add.w	sl, sl, #1
 8005f48:	e7ee      	b.n	8005f28 <_printf_float+0x2a4>
 8005f4a:	bf00      	nop
 8005f4c:	7fefffff 	.word	0x7fefffff
 8005f50:	08008a6c 	.word	0x08008a6c
 8005f54:	08008a68 	.word	0x08008a68
 8005f58:	08008a74 	.word	0x08008a74
 8005f5c:	08008a70 	.word	0x08008a70
 8005f60:	08008a78 	.word	0x08008a78
 8005f64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f6a:	4553      	cmp	r3, sl
 8005f6c:	bfa8      	it	ge
 8005f6e:	4653      	movge	r3, sl
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	4699      	mov	r9, r3
 8005f74:	dc36      	bgt.n	8005fe4 <_printf_float+0x360>
 8005f76:	f04f 0b00 	mov.w	fp, #0
 8005f7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f7e:	f104 021a 	add.w	r2, r4, #26
 8005f82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f84:	9306      	str	r3, [sp, #24]
 8005f86:	eba3 0309 	sub.w	r3, r3, r9
 8005f8a:	455b      	cmp	r3, fp
 8005f8c:	dc31      	bgt.n	8005ff2 <_printf_float+0x36e>
 8005f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f90:	459a      	cmp	sl, r3
 8005f92:	dc3a      	bgt.n	800600a <_printf_float+0x386>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	07da      	lsls	r2, r3, #31
 8005f98:	d437      	bmi.n	800600a <_printf_float+0x386>
 8005f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f9c:	ebaa 0903 	sub.w	r9, sl, r3
 8005fa0:	9b06      	ldr	r3, [sp, #24]
 8005fa2:	ebaa 0303 	sub.w	r3, sl, r3
 8005fa6:	4599      	cmp	r9, r3
 8005fa8:	bfa8      	it	ge
 8005faa:	4699      	movge	r9, r3
 8005fac:	f1b9 0f00 	cmp.w	r9, #0
 8005fb0:	dc33      	bgt.n	800601a <_printf_float+0x396>
 8005fb2:	f04f 0800 	mov.w	r8, #0
 8005fb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fba:	f104 0b1a 	add.w	fp, r4, #26
 8005fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fc0:	ebaa 0303 	sub.w	r3, sl, r3
 8005fc4:	eba3 0309 	sub.w	r3, r3, r9
 8005fc8:	4543      	cmp	r3, r8
 8005fca:	f77f af79 	ble.w	8005ec0 <_printf_float+0x23c>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	465a      	mov	r2, fp
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	47b8      	blx	r7
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f43f aeae 	beq.w	8005d3a <_printf_float+0xb6>
 8005fde:	f108 0801 	add.w	r8, r8, #1
 8005fe2:	e7ec      	b.n	8005fbe <_printf_float+0x33a>
 8005fe4:	4642      	mov	r2, r8
 8005fe6:	4631      	mov	r1, r6
 8005fe8:	4628      	mov	r0, r5
 8005fea:	47b8      	blx	r7
 8005fec:	3001      	adds	r0, #1
 8005fee:	d1c2      	bne.n	8005f76 <_printf_float+0x2f2>
 8005ff0:	e6a3      	b.n	8005d3a <_printf_float+0xb6>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	9206      	str	r2, [sp, #24]
 8005ffa:	47b8      	blx	r7
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	f43f ae9c 	beq.w	8005d3a <_printf_float+0xb6>
 8006002:	9a06      	ldr	r2, [sp, #24]
 8006004:	f10b 0b01 	add.w	fp, fp, #1
 8006008:	e7bb      	b.n	8005f82 <_printf_float+0x2fe>
 800600a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800600e:	4631      	mov	r1, r6
 8006010:	4628      	mov	r0, r5
 8006012:	47b8      	blx	r7
 8006014:	3001      	adds	r0, #1
 8006016:	d1c0      	bne.n	8005f9a <_printf_float+0x316>
 8006018:	e68f      	b.n	8005d3a <_printf_float+0xb6>
 800601a:	9a06      	ldr	r2, [sp, #24]
 800601c:	464b      	mov	r3, r9
 800601e:	4442      	add	r2, r8
 8006020:	4631      	mov	r1, r6
 8006022:	4628      	mov	r0, r5
 8006024:	47b8      	blx	r7
 8006026:	3001      	adds	r0, #1
 8006028:	d1c3      	bne.n	8005fb2 <_printf_float+0x32e>
 800602a:	e686      	b.n	8005d3a <_printf_float+0xb6>
 800602c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006030:	f1ba 0f01 	cmp.w	sl, #1
 8006034:	dc01      	bgt.n	800603a <_printf_float+0x3b6>
 8006036:	07db      	lsls	r3, r3, #31
 8006038:	d536      	bpl.n	80060a8 <_printf_float+0x424>
 800603a:	2301      	movs	r3, #1
 800603c:	4642      	mov	r2, r8
 800603e:	4631      	mov	r1, r6
 8006040:	4628      	mov	r0, r5
 8006042:	47b8      	blx	r7
 8006044:	3001      	adds	r0, #1
 8006046:	f43f ae78 	beq.w	8005d3a <_printf_float+0xb6>
 800604a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800604e:	4631      	mov	r1, r6
 8006050:	4628      	mov	r0, r5
 8006052:	47b8      	blx	r7
 8006054:	3001      	adds	r0, #1
 8006056:	f43f ae70 	beq.w	8005d3a <_printf_float+0xb6>
 800605a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800605e:	2200      	movs	r2, #0
 8006060:	2300      	movs	r3, #0
 8006062:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006066:	f7fa fd37 	bl	8000ad8 <__aeabi_dcmpeq>
 800606a:	b9c0      	cbnz	r0, 800609e <_printf_float+0x41a>
 800606c:	4653      	mov	r3, sl
 800606e:	f108 0201 	add.w	r2, r8, #1
 8006072:	4631      	mov	r1, r6
 8006074:	4628      	mov	r0, r5
 8006076:	47b8      	blx	r7
 8006078:	3001      	adds	r0, #1
 800607a:	d10c      	bne.n	8006096 <_printf_float+0x412>
 800607c:	e65d      	b.n	8005d3a <_printf_float+0xb6>
 800607e:	2301      	movs	r3, #1
 8006080:	465a      	mov	r2, fp
 8006082:	4631      	mov	r1, r6
 8006084:	4628      	mov	r0, r5
 8006086:	47b8      	blx	r7
 8006088:	3001      	adds	r0, #1
 800608a:	f43f ae56 	beq.w	8005d3a <_printf_float+0xb6>
 800608e:	f108 0801 	add.w	r8, r8, #1
 8006092:	45d0      	cmp	r8, sl
 8006094:	dbf3      	blt.n	800607e <_printf_float+0x3fa>
 8006096:	464b      	mov	r3, r9
 8006098:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800609c:	e6df      	b.n	8005e5e <_printf_float+0x1da>
 800609e:	f04f 0800 	mov.w	r8, #0
 80060a2:	f104 0b1a 	add.w	fp, r4, #26
 80060a6:	e7f4      	b.n	8006092 <_printf_float+0x40e>
 80060a8:	2301      	movs	r3, #1
 80060aa:	4642      	mov	r2, r8
 80060ac:	e7e1      	b.n	8006072 <_printf_float+0x3ee>
 80060ae:	2301      	movs	r3, #1
 80060b0:	464a      	mov	r2, r9
 80060b2:	4631      	mov	r1, r6
 80060b4:	4628      	mov	r0, r5
 80060b6:	47b8      	blx	r7
 80060b8:	3001      	adds	r0, #1
 80060ba:	f43f ae3e 	beq.w	8005d3a <_printf_float+0xb6>
 80060be:	f108 0801 	add.w	r8, r8, #1
 80060c2:	68e3      	ldr	r3, [r4, #12]
 80060c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060c6:	1a5b      	subs	r3, r3, r1
 80060c8:	4543      	cmp	r3, r8
 80060ca:	dcf0      	bgt.n	80060ae <_printf_float+0x42a>
 80060cc:	e6fc      	b.n	8005ec8 <_printf_float+0x244>
 80060ce:	f04f 0800 	mov.w	r8, #0
 80060d2:	f104 0919 	add.w	r9, r4, #25
 80060d6:	e7f4      	b.n	80060c2 <_printf_float+0x43e>

080060d8 <_printf_common>:
 80060d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	4616      	mov	r6, r2
 80060de:	4698      	mov	r8, r3
 80060e0:	688a      	ldr	r2, [r1, #8]
 80060e2:	690b      	ldr	r3, [r1, #16]
 80060e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060e8:	4293      	cmp	r3, r2
 80060ea:	bfb8      	it	lt
 80060ec:	4613      	movlt	r3, r2
 80060ee:	6033      	str	r3, [r6, #0]
 80060f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060f4:	4607      	mov	r7, r0
 80060f6:	460c      	mov	r4, r1
 80060f8:	b10a      	cbz	r2, 80060fe <_printf_common+0x26>
 80060fa:	3301      	adds	r3, #1
 80060fc:	6033      	str	r3, [r6, #0]
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	0699      	lsls	r1, r3, #26
 8006102:	bf42      	ittt	mi
 8006104:	6833      	ldrmi	r3, [r6, #0]
 8006106:	3302      	addmi	r3, #2
 8006108:	6033      	strmi	r3, [r6, #0]
 800610a:	6825      	ldr	r5, [r4, #0]
 800610c:	f015 0506 	ands.w	r5, r5, #6
 8006110:	d106      	bne.n	8006120 <_printf_common+0x48>
 8006112:	f104 0a19 	add.w	sl, r4, #25
 8006116:	68e3      	ldr	r3, [r4, #12]
 8006118:	6832      	ldr	r2, [r6, #0]
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	42ab      	cmp	r3, r5
 800611e:	dc26      	bgt.n	800616e <_printf_common+0x96>
 8006120:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006124:	6822      	ldr	r2, [r4, #0]
 8006126:	3b00      	subs	r3, #0
 8006128:	bf18      	it	ne
 800612a:	2301      	movne	r3, #1
 800612c:	0692      	lsls	r2, r2, #26
 800612e:	d42b      	bmi.n	8006188 <_printf_common+0xb0>
 8006130:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006134:	4641      	mov	r1, r8
 8006136:	4638      	mov	r0, r7
 8006138:	47c8      	blx	r9
 800613a:	3001      	adds	r0, #1
 800613c:	d01e      	beq.n	800617c <_printf_common+0xa4>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	6922      	ldr	r2, [r4, #16]
 8006142:	f003 0306 	and.w	r3, r3, #6
 8006146:	2b04      	cmp	r3, #4
 8006148:	bf02      	ittt	eq
 800614a:	68e5      	ldreq	r5, [r4, #12]
 800614c:	6833      	ldreq	r3, [r6, #0]
 800614e:	1aed      	subeq	r5, r5, r3
 8006150:	68a3      	ldr	r3, [r4, #8]
 8006152:	bf0c      	ite	eq
 8006154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006158:	2500      	movne	r5, #0
 800615a:	4293      	cmp	r3, r2
 800615c:	bfc4      	itt	gt
 800615e:	1a9b      	subgt	r3, r3, r2
 8006160:	18ed      	addgt	r5, r5, r3
 8006162:	2600      	movs	r6, #0
 8006164:	341a      	adds	r4, #26
 8006166:	42b5      	cmp	r5, r6
 8006168:	d11a      	bne.n	80061a0 <_printf_common+0xc8>
 800616a:	2000      	movs	r0, #0
 800616c:	e008      	b.n	8006180 <_printf_common+0xa8>
 800616e:	2301      	movs	r3, #1
 8006170:	4652      	mov	r2, sl
 8006172:	4641      	mov	r1, r8
 8006174:	4638      	mov	r0, r7
 8006176:	47c8      	blx	r9
 8006178:	3001      	adds	r0, #1
 800617a:	d103      	bne.n	8006184 <_printf_common+0xac>
 800617c:	f04f 30ff 	mov.w	r0, #4294967295
 8006180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006184:	3501      	adds	r5, #1
 8006186:	e7c6      	b.n	8006116 <_printf_common+0x3e>
 8006188:	18e1      	adds	r1, r4, r3
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	2030      	movs	r0, #48	@ 0x30
 800618e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006192:	4422      	add	r2, r4
 8006194:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006198:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800619c:	3302      	adds	r3, #2
 800619e:	e7c7      	b.n	8006130 <_printf_common+0x58>
 80061a0:	2301      	movs	r3, #1
 80061a2:	4622      	mov	r2, r4
 80061a4:	4641      	mov	r1, r8
 80061a6:	4638      	mov	r0, r7
 80061a8:	47c8      	blx	r9
 80061aa:	3001      	adds	r0, #1
 80061ac:	d0e6      	beq.n	800617c <_printf_common+0xa4>
 80061ae:	3601      	adds	r6, #1
 80061b0:	e7d9      	b.n	8006166 <_printf_common+0x8e>
	...

080061b4 <_printf_i>:
 80061b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061b8:	7e0f      	ldrb	r7, [r1, #24]
 80061ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061bc:	2f78      	cmp	r7, #120	@ 0x78
 80061be:	4691      	mov	r9, r2
 80061c0:	4680      	mov	r8, r0
 80061c2:	460c      	mov	r4, r1
 80061c4:	469a      	mov	sl, r3
 80061c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061ca:	d807      	bhi.n	80061dc <_printf_i+0x28>
 80061cc:	2f62      	cmp	r7, #98	@ 0x62
 80061ce:	d80a      	bhi.n	80061e6 <_printf_i+0x32>
 80061d0:	2f00      	cmp	r7, #0
 80061d2:	f000 80d1 	beq.w	8006378 <_printf_i+0x1c4>
 80061d6:	2f58      	cmp	r7, #88	@ 0x58
 80061d8:	f000 80b8 	beq.w	800634c <_printf_i+0x198>
 80061dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061e4:	e03a      	b.n	800625c <_printf_i+0xa8>
 80061e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061ea:	2b15      	cmp	r3, #21
 80061ec:	d8f6      	bhi.n	80061dc <_printf_i+0x28>
 80061ee:	a101      	add	r1, pc, #4	@ (adr r1, 80061f4 <_printf_i+0x40>)
 80061f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061f4:	0800624d 	.word	0x0800624d
 80061f8:	08006261 	.word	0x08006261
 80061fc:	080061dd 	.word	0x080061dd
 8006200:	080061dd 	.word	0x080061dd
 8006204:	080061dd 	.word	0x080061dd
 8006208:	080061dd 	.word	0x080061dd
 800620c:	08006261 	.word	0x08006261
 8006210:	080061dd 	.word	0x080061dd
 8006214:	080061dd 	.word	0x080061dd
 8006218:	080061dd 	.word	0x080061dd
 800621c:	080061dd 	.word	0x080061dd
 8006220:	0800635f 	.word	0x0800635f
 8006224:	0800628b 	.word	0x0800628b
 8006228:	08006319 	.word	0x08006319
 800622c:	080061dd 	.word	0x080061dd
 8006230:	080061dd 	.word	0x080061dd
 8006234:	08006381 	.word	0x08006381
 8006238:	080061dd 	.word	0x080061dd
 800623c:	0800628b 	.word	0x0800628b
 8006240:	080061dd 	.word	0x080061dd
 8006244:	080061dd 	.word	0x080061dd
 8006248:	08006321 	.word	0x08006321
 800624c:	6833      	ldr	r3, [r6, #0]
 800624e:	1d1a      	adds	r2, r3, #4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6032      	str	r2, [r6, #0]
 8006254:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006258:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800625c:	2301      	movs	r3, #1
 800625e:	e09c      	b.n	800639a <_printf_i+0x1e6>
 8006260:	6833      	ldr	r3, [r6, #0]
 8006262:	6820      	ldr	r0, [r4, #0]
 8006264:	1d19      	adds	r1, r3, #4
 8006266:	6031      	str	r1, [r6, #0]
 8006268:	0606      	lsls	r6, r0, #24
 800626a:	d501      	bpl.n	8006270 <_printf_i+0xbc>
 800626c:	681d      	ldr	r5, [r3, #0]
 800626e:	e003      	b.n	8006278 <_printf_i+0xc4>
 8006270:	0645      	lsls	r5, r0, #25
 8006272:	d5fb      	bpl.n	800626c <_printf_i+0xb8>
 8006274:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006278:	2d00      	cmp	r5, #0
 800627a:	da03      	bge.n	8006284 <_printf_i+0xd0>
 800627c:	232d      	movs	r3, #45	@ 0x2d
 800627e:	426d      	negs	r5, r5
 8006280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006284:	4858      	ldr	r0, [pc, #352]	@ (80063e8 <_printf_i+0x234>)
 8006286:	230a      	movs	r3, #10
 8006288:	e011      	b.n	80062ae <_printf_i+0xfa>
 800628a:	6821      	ldr	r1, [r4, #0]
 800628c:	6833      	ldr	r3, [r6, #0]
 800628e:	0608      	lsls	r0, r1, #24
 8006290:	f853 5b04 	ldr.w	r5, [r3], #4
 8006294:	d402      	bmi.n	800629c <_printf_i+0xe8>
 8006296:	0649      	lsls	r1, r1, #25
 8006298:	bf48      	it	mi
 800629a:	b2ad      	uxthmi	r5, r5
 800629c:	2f6f      	cmp	r7, #111	@ 0x6f
 800629e:	4852      	ldr	r0, [pc, #328]	@ (80063e8 <_printf_i+0x234>)
 80062a0:	6033      	str	r3, [r6, #0]
 80062a2:	bf14      	ite	ne
 80062a4:	230a      	movne	r3, #10
 80062a6:	2308      	moveq	r3, #8
 80062a8:	2100      	movs	r1, #0
 80062aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062ae:	6866      	ldr	r6, [r4, #4]
 80062b0:	60a6      	str	r6, [r4, #8]
 80062b2:	2e00      	cmp	r6, #0
 80062b4:	db05      	blt.n	80062c2 <_printf_i+0x10e>
 80062b6:	6821      	ldr	r1, [r4, #0]
 80062b8:	432e      	orrs	r6, r5
 80062ba:	f021 0104 	bic.w	r1, r1, #4
 80062be:	6021      	str	r1, [r4, #0]
 80062c0:	d04b      	beq.n	800635a <_printf_i+0x1a6>
 80062c2:	4616      	mov	r6, r2
 80062c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80062c8:	fb03 5711 	mls	r7, r3, r1, r5
 80062cc:	5dc7      	ldrb	r7, [r0, r7]
 80062ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062d2:	462f      	mov	r7, r5
 80062d4:	42bb      	cmp	r3, r7
 80062d6:	460d      	mov	r5, r1
 80062d8:	d9f4      	bls.n	80062c4 <_printf_i+0x110>
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d10b      	bne.n	80062f6 <_printf_i+0x142>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	07df      	lsls	r7, r3, #31
 80062e2:	d508      	bpl.n	80062f6 <_printf_i+0x142>
 80062e4:	6923      	ldr	r3, [r4, #16]
 80062e6:	6861      	ldr	r1, [r4, #4]
 80062e8:	4299      	cmp	r1, r3
 80062ea:	bfde      	ittt	le
 80062ec:	2330      	movle	r3, #48	@ 0x30
 80062ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062f6:	1b92      	subs	r2, r2, r6
 80062f8:	6122      	str	r2, [r4, #16]
 80062fa:	f8cd a000 	str.w	sl, [sp]
 80062fe:	464b      	mov	r3, r9
 8006300:	aa03      	add	r2, sp, #12
 8006302:	4621      	mov	r1, r4
 8006304:	4640      	mov	r0, r8
 8006306:	f7ff fee7 	bl	80060d8 <_printf_common>
 800630a:	3001      	adds	r0, #1
 800630c:	d14a      	bne.n	80063a4 <_printf_i+0x1f0>
 800630e:	f04f 30ff 	mov.w	r0, #4294967295
 8006312:	b004      	add	sp, #16
 8006314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	f043 0320 	orr.w	r3, r3, #32
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	4832      	ldr	r0, [pc, #200]	@ (80063ec <_printf_i+0x238>)
 8006322:	2778      	movs	r7, #120	@ 0x78
 8006324:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	6831      	ldr	r1, [r6, #0]
 800632c:	061f      	lsls	r7, r3, #24
 800632e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006332:	d402      	bmi.n	800633a <_printf_i+0x186>
 8006334:	065f      	lsls	r7, r3, #25
 8006336:	bf48      	it	mi
 8006338:	b2ad      	uxthmi	r5, r5
 800633a:	6031      	str	r1, [r6, #0]
 800633c:	07d9      	lsls	r1, r3, #31
 800633e:	bf44      	itt	mi
 8006340:	f043 0320 	orrmi.w	r3, r3, #32
 8006344:	6023      	strmi	r3, [r4, #0]
 8006346:	b11d      	cbz	r5, 8006350 <_printf_i+0x19c>
 8006348:	2310      	movs	r3, #16
 800634a:	e7ad      	b.n	80062a8 <_printf_i+0xf4>
 800634c:	4826      	ldr	r0, [pc, #152]	@ (80063e8 <_printf_i+0x234>)
 800634e:	e7e9      	b.n	8006324 <_printf_i+0x170>
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	f023 0320 	bic.w	r3, r3, #32
 8006356:	6023      	str	r3, [r4, #0]
 8006358:	e7f6      	b.n	8006348 <_printf_i+0x194>
 800635a:	4616      	mov	r6, r2
 800635c:	e7bd      	b.n	80062da <_printf_i+0x126>
 800635e:	6833      	ldr	r3, [r6, #0]
 8006360:	6825      	ldr	r5, [r4, #0]
 8006362:	6961      	ldr	r1, [r4, #20]
 8006364:	1d18      	adds	r0, r3, #4
 8006366:	6030      	str	r0, [r6, #0]
 8006368:	062e      	lsls	r6, r5, #24
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	d501      	bpl.n	8006372 <_printf_i+0x1be>
 800636e:	6019      	str	r1, [r3, #0]
 8006370:	e002      	b.n	8006378 <_printf_i+0x1c4>
 8006372:	0668      	lsls	r0, r5, #25
 8006374:	d5fb      	bpl.n	800636e <_printf_i+0x1ba>
 8006376:	8019      	strh	r1, [r3, #0]
 8006378:	2300      	movs	r3, #0
 800637a:	6123      	str	r3, [r4, #16]
 800637c:	4616      	mov	r6, r2
 800637e:	e7bc      	b.n	80062fa <_printf_i+0x146>
 8006380:	6833      	ldr	r3, [r6, #0]
 8006382:	1d1a      	adds	r2, r3, #4
 8006384:	6032      	str	r2, [r6, #0]
 8006386:	681e      	ldr	r6, [r3, #0]
 8006388:	6862      	ldr	r2, [r4, #4]
 800638a:	2100      	movs	r1, #0
 800638c:	4630      	mov	r0, r6
 800638e:	f7f9 ff27 	bl	80001e0 <memchr>
 8006392:	b108      	cbz	r0, 8006398 <_printf_i+0x1e4>
 8006394:	1b80      	subs	r0, r0, r6
 8006396:	6060      	str	r0, [r4, #4]
 8006398:	6863      	ldr	r3, [r4, #4]
 800639a:	6123      	str	r3, [r4, #16]
 800639c:	2300      	movs	r3, #0
 800639e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063a2:	e7aa      	b.n	80062fa <_printf_i+0x146>
 80063a4:	6923      	ldr	r3, [r4, #16]
 80063a6:	4632      	mov	r2, r6
 80063a8:	4649      	mov	r1, r9
 80063aa:	4640      	mov	r0, r8
 80063ac:	47d0      	blx	sl
 80063ae:	3001      	adds	r0, #1
 80063b0:	d0ad      	beq.n	800630e <_printf_i+0x15a>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	079b      	lsls	r3, r3, #30
 80063b6:	d413      	bmi.n	80063e0 <_printf_i+0x22c>
 80063b8:	68e0      	ldr	r0, [r4, #12]
 80063ba:	9b03      	ldr	r3, [sp, #12]
 80063bc:	4298      	cmp	r0, r3
 80063be:	bfb8      	it	lt
 80063c0:	4618      	movlt	r0, r3
 80063c2:	e7a6      	b.n	8006312 <_printf_i+0x15e>
 80063c4:	2301      	movs	r3, #1
 80063c6:	4632      	mov	r2, r6
 80063c8:	4649      	mov	r1, r9
 80063ca:	4640      	mov	r0, r8
 80063cc:	47d0      	blx	sl
 80063ce:	3001      	adds	r0, #1
 80063d0:	d09d      	beq.n	800630e <_printf_i+0x15a>
 80063d2:	3501      	adds	r5, #1
 80063d4:	68e3      	ldr	r3, [r4, #12]
 80063d6:	9903      	ldr	r1, [sp, #12]
 80063d8:	1a5b      	subs	r3, r3, r1
 80063da:	42ab      	cmp	r3, r5
 80063dc:	dcf2      	bgt.n	80063c4 <_printf_i+0x210>
 80063de:	e7eb      	b.n	80063b8 <_printf_i+0x204>
 80063e0:	2500      	movs	r5, #0
 80063e2:	f104 0619 	add.w	r6, r4, #25
 80063e6:	e7f5      	b.n	80063d4 <_printf_i+0x220>
 80063e8:	08008a7a 	.word	0x08008a7a
 80063ec:	08008a8b 	.word	0x08008a8b

080063f0 <std>:
 80063f0:	2300      	movs	r3, #0
 80063f2:	b510      	push	{r4, lr}
 80063f4:	4604      	mov	r4, r0
 80063f6:	e9c0 3300 	strd	r3, r3, [r0]
 80063fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063fe:	6083      	str	r3, [r0, #8]
 8006400:	8181      	strh	r1, [r0, #12]
 8006402:	6643      	str	r3, [r0, #100]	@ 0x64
 8006404:	81c2      	strh	r2, [r0, #14]
 8006406:	6183      	str	r3, [r0, #24]
 8006408:	4619      	mov	r1, r3
 800640a:	2208      	movs	r2, #8
 800640c:	305c      	adds	r0, #92	@ 0x5c
 800640e:	f000 f9f9 	bl	8006804 <memset>
 8006412:	4b0d      	ldr	r3, [pc, #52]	@ (8006448 <std+0x58>)
 8006414:	6263      	str	r3, [r4, #36]	@ 0x24
 8006416:	4b0d      	ldr	r3, [pc, #52]	@ (800644c <std+0x5c>)
 8006418:	62a3      	str	r3, [r4, #40]	@ 0x28
 800641a:	4b0d      	ldr	r3, [pc, #52]	@ (8006450 <std+0x60>)
 800641c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800641e:	4b0d      	ldr	r3, [pc, #52]	@ (8006454 <std+0x64>)
 8006420:	6323      	str	r3, [r4, #48]	@ 0x30
 8006422:	4b0d      	ldr	r3, [pc, #52]	@ (8006458 <std+0x68>)
 8006424:	6224      	str	r4, [r4, #32]
 8006426:	429c      	cmp	r4, r3
 8006428:	d006      	beq.n	8006438 <std+0x48>
 800642a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800642e:	4294      	cmp	r4, r2
 8006430:	d002      	beq.n	8006438 <std+0x48>
 8006432:	33d0      	adds	r3, #208	@ 0xd0
 8006434:	429c      	cmp	r4, r3
 8006436:	d105      	bne.n	8006444 <std+0x54>
 8006438:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800643c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006440:	f000 ba5c 	b.w	80068fc <__retarget_lock_init_recursive>
 8006444:	bd10      	pop	{r4, pc}
 8006446:	bf00      	nop
 8006448:	08006655 	.word	0x08006655
 800644c:	08006677 	.word	0x08006677
 8006450:	080066af 	.word	0x080066af
 8006454:	080066d3 	.word	0x080066d3
 8006458:	20000344 	.word	0x20000344

0800645c <stdio_exit_handler>:
 800645c:	4a02      	ldr	r2, [pc, #8]	@ (8006468 <stdio_exit_handler+0xc>)
 800645e:	4903      	ldr	r1, [pc, #12]	@ (800646c <stdio_exit_handler+0x10>)
 8006460:	4803      	ldr	r0, [pc, #12]	@ (8006470 <stdio_exit_handler+0x14>)
 8006462:	f000 b869 	b.w	8006538 <_fwalk_sglue>
 8006466:	bf00      	nop
 8006468:	20000014 	.word	0x20000014
 800646c:	08008251 	.word	0x08008251
 8006470:	20000024 	.word	0x20000024

08006474 <cleanup_stdio>:
 8006474:	6841      	ldr	r1, [r0, #4]
 8006476:	4b0c      	ldr	r3, [pc, #48]	@ (80064a8 <cleanup_stdio+0x34>)
 8006478:	4299      	cmp	r1, r3
 800647a:	b510      	push	{r4, lr}
 800647c:	4604      	mov	r4, r0
 800647e:	d001      	beq.n	8006484 <cleanup_stdio+0x10>
 8006480:	f001 fee6 	bl	8008250 <_fflush_r>
 8006484:	68a1      	ldr	r1, [r4, #8]
 8006486:	4b09      	ldr	r3, [pc, #36]	@ (80064ac <cleanup_stdio+0x38>)
 8006488:	4299      	cmp	r1, r3
 800648a:	d002      	beq.n	8006492 <cleanup_stdio+0x1e>
 800648c:	4620      	mov	r0, r4
 800648e:	f001 fedf 	bl	8008250 <_fflush_r>
 8006492:	68e1      	ldr	r1, [r4, #12]
 8006494:	4b06      	ldr	r3, [pc, #24]	@ (80064b0 <cleanup_stdio+0x3c>)
 8006496:	4299      	cmp	r1, r3
 8006498:	d004      	beq.n	80064a4 <cleanup_stdio+0x30>
 800649a:	4620      	mov	r0, r4
 800649c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a0:	f001 bed6 	b.w	8008250 <_fflush_r>
 80064a4:	bd10      	pop	{r4, pc}
 80064a6:	bf00      	nop
 80064a8:	20000344 	.word	0x20000344
 80064ac:	200003ac 	.word	0x200003ac
 80064b0:	20000414 	.word	0x20000414

080064b4 <global_stdio_init.part.0>:
 80064b4:	b510      	push	{r4, lr}
 80064b6:	4b0b      	ldr	r3, [pc, #44]	@ (80064e4 <global_stdio_init.part.0+0x30>)
 80064b8:	4c0b      	ldr	r4, [pc, #44]	@ (80064e8 <global_stdio_init.part.0+0x34>)
 80064ba:	4a0c      	ldr	r2, [pc, #48]	@ (80064ec <global_stdio_init.part.0+0x38>)
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	4620      	mov	r0, r4
 80064c0:	2200      	movs	r2, #0
 80064c2:	2104      	movs	r1, #4
 80064c4:	f7ff ff94 	bl	80063f0 <std>
 80064c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064cc:	2201      	movs	r2, #1
 80064ce:	2109      	movs	r1, #9
 80064d0:	f7ff ff8e 	bl	80063f0 <std>
 80064d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064d8:	2202      	movs	r2, #2
 80064da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064de:	2112      	movs	r1, #18
 80064e0:	f7ff bf86 	b.w	80063f0 <std>
 80064e4:	2000047c 	.word	0x2000047c
 80064e8:	20000344 	.word	0x20000344
 80064ec:	0800645d 	.word	0x0800645d

080064f0 <__sfp_lock_acquire>:
 80064f0:	4801      	ldr	r0, [pc, #4]	@ (80064f8 <__sfp_lock_acquire+0x8>)
 80064f2:	f000 ba04 	b.w	80068fe <__retarget_lock_acquire_recursive>
 80064f6:	bf00      	nop
 80064f8:	20000485 	.word	0x20000485

080064fc <__sfp_lock_release>:
 80064fc:	4801      	ldr	r0, [pc, #4]	@ (8006504 <__sfp_lock_release+0x8>)
 80064fe:	f000 b9ff 	b.w	8006900 <__retarget_lock_release_recursive>
 8006502:	bf00      	nop
 8006504:	20000485 	.word	0x20000485

08006508 <__sinit>:
 8006508:	b510      	push	{r4, lr}
 800650a:	4604      	mov	r4, r0
 800650c:	f7ff fff0 	bl	80064f0 <__sfp_lock_acquire>
 8006510:	6a23      	ldr	r3, [r4, #32]
 8006512:	b11b      	cbz	r3, 800651c <__sinit+0x14>
 8006514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006518:	f7ff bff0 	b.w	80064fc <__sfp_lock_release>
 800651c:	4b04      	ldr	r3, [pc, #16]	@ (8006530 <__sinit+0x28>)
 800651e:	6223      	str	r3, [r4, #32]
 8006520:	4b04      	ldr	r3, [pc, #16]	@ (8006534 <__sinit+0x2c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1f5      	bne.n	8006514 <__sinit+0xc>
 8006528:	f7ff ffc4 	bl	80064b4 <global_stdio_init.part.0>
 800652c:	e7f2      	b.n	8006514 <__sinit+0xc>
 800652e:	bf00      	nop
 8006530:	08006475 	.word	0x08006475
 8006534:	2000047c 	.word	0x2000047c

08006538 <_fwalk_sglue>:
 8006538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800653c:	4607      	mov	r7, r0
 800653e:	4688      	mov	r8, r1
 8006540:	4614      	mov	r4, r2
 8006542:	2600      	movs	r6, #0
 8006544:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006548:	f1b9 0901 	subs.w	r9, r9, #1
 800654c:	d505      	bpl.n	800655a <_fwalk_sglue+0x22>
 800654e:	6824      	ldr	r4, [r4, #0]
 8006550:	2c00      	cmp	r4, #0
 8006552:	d1f7      	bne.n	8006544 <_fwalk_sglue+0xc>
 8006554:	4630      	mov	r0, r6
 8006556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800655a:	89ab      	ldrh	r3, [r5, #12]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d907      	bls.n	8006570 <_fwalk_sglue+0x38>
 8006560:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006564:	3301      	adds	r3, #1
 8006566:	d003      	beq.n	8006570 <_fwalk_sglue+0x38>
 8006568:	4629      	mov	r1, r5
 800656a:	4638      	mov	r0, r7
 800656c:	47c0      	blx	r8
 800656e:	4306      	orrs	r6, r0
 8006570:	3568      	adds	r5, #104	@ 0x68
 8006572:	e7e9      	b.n	8006548 <_fwalk_sglue+0x10>

08006574 <iprintf>:
 8006574:	b40f      	push	{r0, r1, r2, r3}
 8006576:	b507      	push	{r0, r1, r2, lr}
 8006578:	4906      	ldr	r1, [pc, #24]	@ (8006594 <iprintf+0x20>)
 800657a:	ab04      	add	r3, sp, #16
 800657c:	6808      	ldr	r0, [r1, #0]
 800657e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006582:	6881      	ldr	r1, [r0, #8]
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	f001 fcc7 	bl	8007f18 <_vfiprintf_r>
 800658a:	b003      	add	sp, #12
 800658c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006590:	b004      	add	sp, #16
 8006592:	4770      	bx	lr
 8006594:	20000020 	.word	0x20000020

08006598 <_puts_r>:
 8006598:	6a03      	ldr	r3, [r0, #32]
 800659a:	b570      	push	{r4, r5, r6, lr}
 800659c:	6884      	ldr	r4, [r0, #8]
 800659e:	4605      	mov	r5, r0
 80065a0:	460e      	mov	r6, r1
 80065a2:	b90b      	cbnz	r3, 80065a8 <_puts_r+0x10>
 80065a4:	f7ff ffb0 	bl	8006508 <__sinit>
 80065a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065aa:	07db      	lsls	r3, r3, #31
 80065ac:	d405      	bmi.n	80065ba <_puts_r+0x22>
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	0598      	lsls	r0, r3, #22
 80065b2:	d402      	bmi.n	80065ba <_puts_r+0x22>
 80065b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065b6:	f000 f9a2 	bl	80068fe <__retarget_lock_acquire_recursive>
 80065ba:	89a3      	ldrh	r3, [r4, #12]
 80065bc:	0719      	lsls	r1, r3, #28
 80065be:	d502      	bpl.n	80065c6 <_puts_r+0x2e>
 80065c0:	6923      	ldr	r3, [r4, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d135      	bne.n	8006632 <_puts_r+0x9a>
 80065c6:	4621      	mov	r1, r4
 80065c8:	4628      	mov	r0, r5
 80065ca:	f000 f8c5 	bl	8006758 <__swsetup_r>
 80065ce:	b380      	cbz	r0, 8006632 <_puts_r+0x9a>
 80065d0:	f04f 35ff 	mov.w	r5, #4294967295
 80065d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065d6:	07da      	lsls	r2, r3, #31
 80065d8:	d405      	bmi.n	80065e6 <_puts_r+0x4e>
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	059b      	lsls	r3, r3, #22
 80065de:	d402      	bmi.n	80065e6 <_puts_r+0x4e>
 80065e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065e2:	f000 f98d 	bl	8006900 <__retarget_lock_release_recursive>
 80065e6:	4628      	mov	r0, r5
 80065e8:	bd70      	pop	{r4, r5, r6, pc}
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	da04      	bge.n	80065f8 <_puts_r+0x60>
 80065ee:	69a2      	ldr	r2, [r4, #24]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	dc17      	bgt.n	8006624 <_puts_r+0x8c>
 80065f4:	290a      	cmp	r1, #10
 80065f6:	d015      	beq.n	8006624 <_puts_r+0x8c>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	6022      	str	r2, [r4, #0]
 80065fe:	7019      	strb	r1, [r3, #0]
 8006600:	68a3      	ldr	r3, [r4, #8]
 8006602:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006606:	3b01      	subs	r3, #1
 8006608:	60a3      	str	r3, [r4, #8]
 800660a:	2900      	cmp	r1, #0
 800660c:	d1ed      	bne.n	80065ea <_puts_r+0x52>
 800660e:	2b00      	cmp	r3, #0
 8006610:	da11      	bge.n	8006636 <_puts_r+0x9e>
 8006612:	4622      	mov	r2, r4
 8006614:	210a      	movs	r1, #10
 8006616:	4628      	mov	r0, r5
 8006618:	f000 f85f 	bl	80066da <__swbuf_r>
 800661c:	3001      	adds	r0, #1
 800661e:	d0d7      	beq.n	80065d0 <_puts_r+0x38>
 8006620:	250a      	movs	r5, #10
 8006622:	e7d7      	b.n	80065d4 <_puts_r+0x3c>
 8006624:	4622      	mov	r2, r4
 8006626:	4628      	mov	r0, r5
 8006628:	f000 f857 	bl	80066da <__swbuf_r>
 800662c:	3001      	adds	r0, #1
 800662e:	d1e7      	bne.n	8006600 <_puts_r+0x68>
 8006630:	e7ce      	b.n	80065d0 <_puts_r+0x38>
 8006632:	3e01      	subs	r6, #1
 8006634:	e7e4      	b.n	8006600 <_puts_r+0x68>
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	6022      	str	r2, [r4, #0]
 800663c:	220a      	movs	r2, #10
 800663e:	701a      	strb	r2, [r3, #0]
 8006640:	e7ee      	b.n	8006620 <_puts_r+0x88>
	...

08006644 <puts>:
 8006644:	4b02      	ldr	r3, [pc, #8]	@ (8006650 <puts+0xc>)
 8006646:	4601      	mov	r1, r0
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	f7ff bfa5 	b.w	8006598 <_puts_r>
 800664e:	bf00      	nop
 8006650:	20000020 	.word	0x20000020

08006654 <__sread>:
 8006654:	b510      	push	{r4, lr}
 8006656:	460c      	mov	r4, r1
 8006658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665c:	f000 f900 	bl	8006860 <_read_r>
 8006660:	2800      	cmp	r0, #0
 8006662:	bfab      	itete	ge
 8006664:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006666:	89a3      	ldrhlt	r3, [r4, #12]
 8006668:	181b      	addge	r3, r3, r0
 800666a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800666e:	bfac      	ite	ge
 8006670:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006672:	81a3      	strhlt	r3, [r4, #12]
 8006674:	bd10      	pop	{r4, pc}

08006676 <__swrite>:
 8006676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800667a:	461f      	mov	r7, r3
 800667c:	898b      	ldrh	r3, [r1, #12]
 800667e:	05db      	lsls	r3, r3, #23
 8006680:	4605      	mov	r5, r0
 8006682:	460c      	mov	r4, r1
 8006684:	4616      	mov	r6, r2
 8006686:	d505      	bpl.n	8006694 <__swrite+0x1e>
 8006688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800668c:	2302      	movs	r3, #2
 800668e:	2200      	movs	r2, #0
 8006690:	f000 f8d4 	bl	800683c <_lseek_r>
 8006694:	89a3      	ldrh	r3, [r4, #12]
 8006696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800669a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800669e:	81a3      	strh	r3, [r4, #12]
 80066a0:	4632      	mov	r2, r6
 80066a2:	463b      	mov	r3, r7
 80066a4:	4628      	mov	r0, r5
 80066a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066aa:	f000 b8eb 	b.w	8006884 <_write_r>

080066ae <__sseek>:
 80066ae:	b510      	push	{r4, lr}
 80066b0:	460c      	mov	r4, r1
 80066b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b6:	f000 f8c1 	bl	800683c <_lseek_r>
 80066ba:	1c43      	adds	r3, r0, #1
 80066bc:	89a3      	ldrh	r3, [r4, #12]
 80066be:	bf15      	itete	ne
 80066c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066ca:	81a3      	strheq	r3, [r4, #12]
 80066cc:	bf18      	it	ne
 80066ce:	81a3      	strhne	r3, [r4, #12]
 80066d0:	bd10      	pop	{r4, pc}

080066d2 <__sclose>:
 80066d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d6:	f000 b8a1 	b.w	800681c <_close_r>

080066da <__swbuf_r>:
 80066da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066dc:	460e      	mov	r6, r1
 80066de:	4614      	mov	r4, r2
 80066e0:	4605      	mov	r5, r0
 80066e2:	b118      	cbz	r0, 80066ec <__swbuf_r+0x12>
 80066e4:	6a03      	ldr	r3, [r0, #32]
 80066e6:	b90b      	cbnz	r3, 80066ec <__swbuf_r+0x12>
 80066e8:	f7ff ff0e 	bl	8006508 <__sinit>
 80066ec:	69a3      	ldr	r3, [r4, #24]
 80066ee:	60a3      	str	r3, [r4, #8]
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	071a      	lsls	r2, r3, #28
 80066f4:	d501      	bpl.n	80066fa <__swbuf_r+0x20>
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	b943      	cbnz	r3, 800670c <__swbuf_r+0x32>
 80066fa:	4621      	mov	r1, r4
 80066fc:	4628      	mov	r0, r5
 80066fe:	f000 f82b 	bl	8006758 <__swsetup_r>
 8006702:	b118      	cbz	r0, 800670c <__swbuf_r+0x32>
 8006704:	f04f 37ff 	mov.w	r7, #4294967295
 8006708:	4638      	mov	r0, r7
 800670a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	6922      	ldr	r2, [r4, #16]
 8006710:	1a98      	subs	r0, r3, r2
 8006712:	6963      	ldr	r3, [r4, #20]
 8006714:	b2f6      	uxtb	r6, r6
 8006716:	4283      	cmp	r3, r0
 8006718:	4637      	mov	r7, r6
 800671a:	dc05      	bgt.n	8006728 <__swbuf_r+0x4e>
 800671c:	4621      	mov	r1, r4
 800671e:	4628      	mov	r0, r5
 8006720:	f001 fd96 	bl	8008250 <_fflush_r>
 8006724:	2800      	cmp	r0, #0
 8006726:	d1ed      	bne.n	8006704 <__swbuf_r+0x2a>
 8006728:	68a3      	ldr	r3, [r4, #8]
 800672a:	3b01      	subs	r3, #1
 800672c:	60a3      	str	r3, [r4, #8]
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	6022      	str	r2, [r4, #0]
 8006734:	701e      	strb	r6, [r3, #0]
 8006736:	6962      	ldr	r2, [r4, #20]
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	429a      	cmp	r2, r3
 800673c:	d004      	beq.n	8006748 <__swbuf_r+0x6e>
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	07db      	lsls	r3, r3, #31
 8006742:	d5e1      	bpl.n	8006708 <__swbuf_r+0x2e>
 8006744:	2e0a      	cmp	r6, #10
 8006746:	d1df      	bne.n	8006708 <__swbuf_r+0x2e>
 8006748:	4621      	mov	r1, r4
 800674a:	4628      	mov	r0, r5
 800674c:	f001 fd80 	bl	8008250 <_fflush_r>
 8006750:	2800      	cmp	r0, #0
 8006752:	d0d9      	beq.n	8006708 <__swbuf_r+0x2e>
 8006754:	e7d6      	b.n	8006704 <__swbuf_r+0x2a>
	...

08006758 <__swsetup_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4b29      	ldr	r3, [pc, #164]	@ (8006800 <__swsetup_r+0xa8>)
 800675c:	4605      	mov	r5, r0
 800675e:	6818      	ldr	r0, [r3, #0]
 8006760:	460c      	mov	r4, r1
 8006762:	b118      	cbz	r0, 800676c <__swsetup_r+0x14>
 8006764:	6a03      	ldr	r3, [r0, #32]
 8006766:	b90b      	cbnz	r3, 800676c <__swsetup_r+0x14>
 8006768:	f7ff fece 	bl	8006508 <__sinit>
 800676c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006770:	0719      	lsls	r1, r3, #28
 8006772:	d422      	bmi.n	80067ba <__swsetup_r+0x62>
 8006774:	06da      	lsls	r2, r3, #27
 8006776:	d407      	bmi.n	8006788 <__swsetup_r+0x30>
 8006778:	2209      	movs	r2, #9
 800677a:	602a      	str	r2, [r5, #0]
 800677c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006780:	81a3      	strh	r3, [r4, #12]
 8006782:	f04f 30ff 	mov.w	r0, #4294967295
 8006786:	e033      	b.n	80067f0 <__swsetup_r+0x98>
 8006788:	0758      	lsls	r0, r3, #29
 800678a:	d512      	bpl.n	80067b2 <__swsetup_r+0x5a>
 800678c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800678e:	b141      	cbz	r1, 80067a2 <__swsetup_r+0x4a>
 8006790:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006794:	4299      	cmp	r1, r3
 8006796:	d002      	beq.n	800679e <__swsetup_r+0x46>
 8006798:	4628      	mov	r0, r5
 800679a:	f000 ff19 	bl	80075d0 <_free_r>
 800679e:	2300      	movs	r3, #0
 80067a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067a8:	81a3      	strh	r3, [r4, #12]
 80067aa:	2300      	movs	r3, #0
 80067ac:	6063      	str	r3, [r4, #4]
 80067ae:	6923      	ldr	r3, [r4, #16]
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	f043 0308 	orr.w	r3, r3, #8
 80067b8:	81a3      	strh	r3, [r4, #12]
 80067ba:	6923      	ldr	r3, [r4, #16]
 80067bc:	b94b      	cbnz	r3, 80067d2 <__swsetup_r+0x7a>
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067c8:	d003      	beq.n	80067d2 <__swsetup_r+0x7a>
 80067ca:	4621      	mov	r1, r4
 80067cc:	4628      	mov	r0, r5
 80067ce:	f001 fd8d 	bl	80082ec <__smakebuf_r>
 80067d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067d6:	f013 0201 	ands.w	r2, r3, #1
 80067da:	d00a      	beq.n	80067f2 <__swsetup_r+0x9a>
 80067dc:	2200      	movs	r2, #0
 80067de:	60a2      	str	r2, [r4, #8]
 80067e0:	6962      	ldr	r2, [r4, #20]
 80067e2:	4252      	negs	r2, r2
 80067e4:	61a2      	str	r2, [r4, #24]
 80067e6:	6922      	ldr	r2, [r4, #16]
 80067e8:	b942      	cbnz	r2, 80067fc <__swsetup_r+0xa4>
 80067ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80067ee:	d1c5      	bne.n	800677c <__swsetup_r+0x24>
 80067f0:	bd38      	pop	{r3, r4, r5, pc}
 80067f2:	0799      	lsls	r1, r3, #30
 80067f4:	bf58      	it	pl
 80067f6:	6962      	ldrpl	r2, [r4, #20]
 80067f8:	60a2      	str	r2, [r4, #8]
 80067fa:	e7f4      	b.n	80067e6 <__swsetup_r+0x8e>
 80067fc:	2000      	movs	r0, #0
 80067fe:	e7f7      	b.n	80067f0 <__swsetup_r+0x98>
 8006800:	20000020 	.word	0x20000020

08006804 <memset>:
 8006804:	4402      	add	r2, r0
 8006806:	4603      	mov	r3, r0
 8006808:	4293      	cmp	r3, r2
 800680a:	d100      	bne.n	800680e <memset+0xa>
 800680c:	4770      	bx	lr
 800680e:	f803 1b01 	strb.w	r1, [r3], #1
 8006812:	e7f9      	b.n	8006808 <memset+0x4>

08006814 <_localeconv_r>:
 8006814:	4800      	ldr	r0, [pc, #0]	@ (8006818 <_localeconv_r+0x4>)
 8006816:	4770      	bx	lr
 8006818:	20000160 	.word	0x20000160

0800681c <_close_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4d06      	ldr	r5, [pc, #24]	@ (8006838 <_close_r+0x1c>)
 8006820:	2300      	movs	r3, #0
 8006822:	4604      	mov	r4, r0
 8006824:	4608      	mov	r0, r1
 8006826:	602b      	str	r3, [r5, #0]
 8006828:	f7fb fc5a 	bl	80020e0 <_close>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d102      	bne.n	8006836 <_close_r+0x1a>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	b103      	cbz	r3, 8006836 <_close_r+0x1a>
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	bd38      	pop	{r3, r4, r5, pc}
 8006838:	20000480 	.word	0x20000480

0800683c <_lseek_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	4d07      	ldr	r5, [pc, #28]	@ (800685c <_lseek_r+0x20>)
 8006840:	4604      	mov	r4, r0
 8006842:	4608      	mov	r0, r1
 8006844:	4611      	mov	r1, r2
 8006846:	2200      	movs	r2, #0
 8006848:	602a      	str	r2, [r5, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	f7fb fc6f 	bl	800212e <_lseek>
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	d102      	bne.n	800685a <_lseek_r+0x1e>
 8006854:	682b      	ldr	r3, [r5, #0]
 8006856:	b103      	cbz	r3, 800685a <_lseek_r+0x1e>
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	bd38      	pop	{r3, r4, r5, pc}
 800685c:	20000480 	.word	0x20000480

08006860 <_read_r>:
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	4d07      	ldr	r5, [pc, #28]	@ (8006880 <_read_r+0x20>)
 8006864:	4604      	mov	r4, r0
 8006866:	4608      	mov	r0, r1
 8006868:	4611      	mov	r1, r2
 800686a:	2200      	movs	r2, #0
 800686c:	602a      	str	r2, [r5, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	f7fb fbfd 	bl	800206e <_read>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d102      	bne.n	800687e <_read_r+0x1e>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	b103      	cbz	r3, 800687e <_read_r+0x1e>
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	bd38      	pop	{r3, r4, r5, pc}
 8006880:	20000480 	.word	0x20000480

08006884 <_write_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4d07      	ldr	r5, [pc, #28]	@ (80068a4 <_write_r+0x20>)
 8006888:	4604      	mov	r4, r0
 800688a:	4608      	mov	r0, r1
 800688c:	4611      	mov	r1, r2
 800688e:	2200      	movs	r2, #0
 8006890:	602a      	str	r2, [r5, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	f7fb fc08 	bl	80020a8 <_write>
 8006898:	1c43      	adds	r3, r0, #1
 800689a:	d102      	bne.n	80068a2 <_write_r+0x1e>
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	b103      	cbz	r3, 80068a2 <_write_r+0x1e>
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	bd38      	pop	{r3, r4, r5, pc}
 80068a4:	20000480 	.word	0x20000480

080068a8 <__errno>:
 80068a8:	4b01      	ldr	r3, [pc, #4]	@ (80068b0 <__errno+0x8>)
 80068aa:	6818      	ldr	r0, [r3, #0]
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	20000020 	.word	0x20000020

080068b4 <__libc_init_array>:
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	4d0d      	ldr	r5, [pc, #52]	@ (80068ec <__libc_init_array+0x38>)
 80068b8:	4c0d      	ldr	r4, [pc, #52]	@ (80068f0 <__libc_init_array+0x3c>)
 80068ba:	1b64      	subs	r4, r4, r5
 80068bc:	10a4      	asrs	r4, r4, #2
 80068be:	2600      	movs	r6, #0
 80068c0:	42a6      	cmp	r6, r4
 80068c2:	d109      	bne.n	80068d8 <__libc_init_array+0x24>
 80068c4:	4d0b      	ldr	r5, [pc, #44]	@ (80068f4 <__libc_init_array+0x40>)
 80068c6:	4c0c      	ldr	r4, [pc, #48]	@ (80068f8 <__libc_init_array+0x44>)
 80068c8:	f001 ffac 	bl	8008824 <_init>
 80068cc:	1b64      	subs	r4, r4, r5
 80068ce:	10a4      	asrs	r4, r4, #2
 80068d0:	2600      	movs	r6, #0
 80068d2:	42a6      	cmp	r6, r4
 80068d4:	d105      	bne.n	80068e2 <__libc_init_array+0x2e>
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068dc:	4798      	blx	r3
 80068de:	3601      	adds	r6, #1
 80068e0:	e7ee      	b.n	80068c0 <__libc_init_array+0xc>
 80068e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e6:	4798      	blx	r3
 80068e8:	3601      	adds	r6, #1
 80068ea:	e7f2      	b.n	80068d2 <__libc_init_array+0x1e>
 80068ec:	08008e1c 	.word	0x08008e1c
 80068f0:	08008e1c 	.word	0x08008e1c
 80068f4:	08008e1c 	.word	0x08008e1c
 80068f8:	08008e20 	.word	0x08008e20

080068fc <__retarget_lock_init_recursive>:
 80068fc:	4770      	bx	lr

080068fe <__retarget_lock_acquire_recursive>:
 80068fe:	4770      	bx	lr

08006900 <__retarget_lock_release_recursive>:
 8006900:	4770      	bx	lr

08006902 <memcpy>:
 8006902:	440a      	add	r2, r1
 8006904:	4291      	cmp	r1, r2
 8006906:	f100 33ff 	add.w	r3, r0, #4294967295
 800690a:	d100      	bne.n	800690e <memcpy+0xc>
 800690c:	4770      	bx	lr
 800690e:	b510      	push	{r4, lr}
 8006910:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006918:	4291      	cmp	r1, r2
 800691a:	d1f9      	bne.n	8006910 <memcpy+0xe>
 800691c:	bd10      	pop	{r4, pc}

0800691e <quorem>:
 800691e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006922:	6903      	ldr	r3, [r0, #16]
 8006924:	690c      	ldr	r4, [r1, #16]
 8006926:	42a3      	cmp	r3, r4
 8006928:	4607      	mov	r7, r0
 800692a:	db7e      	blt.n	8006a2a <quorem+0x10c>
 800692c:	3c01      	subs	r4, #1
 800692e:	f101 0814 	add.w	r8, r1, #20
 8006932:	00a3      	lsls	r3, r4, #2
 8006934:	f100 0514 	add.w	r5, r0, #20
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006944:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006948:	3301      	adds	r3, #1
 800694a:	429a      	cmp	r2, r3
 800694c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006950:	fbb2 f6f3 	udiv	r6, r2, r3
 8006954:	d32e      	bcc.n	80069b4 <quorem+0x96>
 8006956:	f04f 0a00 	mov.w	sl, #0
 800695a:	46c4      	mov	ip, r8
 800695c:	46ae      	mov	lr, r5
 800695e:	46d3      	mov	fp, sl
 8006960:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006964:	b298      	uxth	r0, r3
 8006966:	fb06 a000 	mla	r0, r6, r0, sl
 800696a:	0c02      	lsrs	r2, r0, #16
 800696c:	0c1b      	lsrs	r3, r3, #16
 800696e:	fb06 2303 	mla	r3, r6, r3, r2
 8006972:	f8de 2000 	ldr.w	r2, [lr]
 8006976:	b280      	uxth	r0, r0
 8006978:	b292      	uxth	r2, r2
 800697a:	1a12      	subs	r2, r2, r0
 800697c:	445a      	add	r2, fp
 800697e:	f8de 0000 	ldr.w	r0, [lr]
 8006982:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006986:	b29b      	uxth	r3, r3
 8006988:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800698c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006990:	b292      	uxth	r2, r2
 8006992:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006996:	45e1      	cmp	r9, ip
 8006998:	f84e 2b04 	str.w	r2, [lr], #4
 800699c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80069a0:	d2de      	bcs.n	8006960 <quorem+0x42>
 80069a2:	9b00      	ldr	r3, [sp, #0]
 80069a4:	58eb      	ldr	r3, [r5, r3]
 80069a6:	b92b      	cbnz	r3, 80069b4 <quorem+0x96>
 80069a8:	9b01      	ldr	r3, [sp, #4]
 80069aa:	3b04      	subs	r3, #4
 80069ac:	429d      	cmp	r5, r3
 80069ae:	461a      	mov	r2, r3
 80069b0:	d32f      	bcc.n	8006a12 <quorem+0xf4>
 80069b2:	613c      	str	r4, [r7, #16]
 80069b4:	4638      	mov	r0, r7
 80069b6:	f001 f97d 	bl	8007cb4 <__mcmp>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	db25      	blt.n	8006a0a <quorem+0xec>
 80069be:	4629      	mov	r1, r5
 80069c0:	2000      	movs	r0, #0
 80069c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80069c6:	f8d1 c000 	ldr.w	ip, [r1]
 80069ca:	fa1f fe82 	uxth.w	lr, r2
 80069ce:	fa1f f38c 	uxth.w	r3, ip
 80069d2:	eba3 030e 	sub.w	r3, r3, lr
 80069d6:	4403      	add	r3, r0
 80069d8:	0c12      	lsrs	r2, r2, #16
 80069da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80069de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069e8:	45c1      	cmp	r9, r8
 80069ea:	f841 3b04 	str.w	r3, [r1], #4
 80069ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069f2:	d2e6      	bcs.n	80069c2 <quorem+0xa4>
 80069f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069fc:	b922      	cbnz	r2, 8006a08 <quorem+0xea>
 80069fe:	3b04      	subs	r3, #4
 8006a00:	429d      	cmp	r5, r3
 8006a02:	461a      	mov	r2, r3
 8006a04:	d30b      	bcc.n	8006a1e <quorem+0x100>
 8006a06:	613c      	str	r4, [r7, #16]
 8006a08:	3601      	adds	r6, #1
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	b003      	add	sp, #12
 8006a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	3b04      	subs	r3, #4
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	d1cb      	bne.n	80069b2 <quorem+0x94>
 8006a1a:	3c01      	subs	r4, #1
 8006a1c:	e7c6      	b.n	80069ac <quorem+0x8e>
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	3b04      	subs	r3, #4
 8006a22:	2a00      	cmp	r2, #0
 8006a24:	d1ef      	bne.n	8006a06 <quorem+0xe8>
 8006a26:	3c01      	subs	r4, #1
 8006a28:	e7ea      	b.n	8006a00 <quorem+0xe2>
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	e7ee      	b.n	8006a0c <quorem+0xee>
	...

08006a30 <_dtoa_r>:
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	69c7      	ldr	r7, [r0, #28]
 8006a36:	b097      	sub	sp, #92	@ 0x5c
 8006a38:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006a3c:	ec55 4b10 	vmov	r4, r5, d0
 8006a40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006a42:	9107      	str	r1, [sp, #28]
 8006a44:	4681      	mov	r9, r0
 8006a46:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a48:	9311      	str	r3, [sp, #68]	@ 0x44
 8006a4a:	b97f      	cbnz	r7, 8006a6c <_dtoa_r+0x3c>
 8006a4c:	2010      	movs	r0, #16
 8006a4e:	f000 fe09 	bl	8007664 <malloc>
 8006a52:	4602      	mov	r2, r0
 8006a54:	f8c9 001c 	str.w	r0, [r9, #28]
 8006a58:	b920      	cbnz	r0, 8006a64 <_dtoa_r+0x34>
 8006a5a:	4ba9      	ldr	r3, [pc, #676]	@ (8006d00 <_dtoa_r+0x2d0>)
 8006a5c:	21ef      	movs	r1, #239	@ 0xef
 8006a5e:	48a9      	ldr	r0, [pc, #676]	@ (8006d04 <_dtoa_r+0x2d4>)
 8006a60:	f001 fcb2 	bl	80083c8 <__assert_func>
 8006a64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a68:	6007      	str	r7, [r0, #0]
 8006a6a:	60c7      	str	r7, [r0, #12]
 8006a6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a70:	6819      	ldr	r1, [r3, #0]
 8006a72:	b159      	cbz	r1, 8006a8c <_dtoa_r+0x5c>
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	604a      	str	r2, [r1, #4]
 8006a78:	2301      	movs	r3, #1
 8006a7a:	4093      	lsls	r3, r2
 8006a7c:	608b      	str	r3, [r1, #8]
 8006a7e:	4648      	mov	r0, r9
 8006a80:	f000 fee6 	bl	8007850 <_Bfree>
 8006a84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	1e2b      	subs	r3, r5, #0
 8006a8e:	bfb9      	ittee	lt
 8006a90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a94:	9305      	strlt	r3, [sp, #20]
 8006a96:	2300      	movge	r3, #0
 8006a98:	6033      	strge	r3, [r6, #0]
 8006a9a:	9f05      	ldr	r7, [sp, #20]
 8006a9c:	4b9a      	ldr	r3, [pc, #616]	@ (8006d08 <_dtoa_r+0x2d8>)
 8006a9e:	bfbc      	itt	lt
 8006aa0:	2201      	movlt	r2, #1
 8006aa2:	6032      	strlt	r2, [r6, #0]
 8006aa4:	43bb      	bics	r3, r7
 8006aa6:	d112      	bne.n	8006ace <_dtoa_r+0x9e>
 8006aa8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006aaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ab4:	4323      	orrs	r3, r4
 8006ab6:	f000 855a 	beq.w	800756e <_dtoa_r+0xb3e>
 8006aba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006abc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006d1c <_dtoa_r+0x2ec>
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 855c 	beq.w	800757e <_dtoa_r+0xb4e>
 8006ac6:	f10a 0303 	add.w	r3, sl, #3
 8006aca:	f000 bd56 	b.w	800757a <_dtoa_r+0xb4a>
 8006ace:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	ec51 0b17 	vmov	r0, r1, d7
 8006ad8:	2300      	movs	r3, #0
 8006ada:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006ade:	f7f9 fffb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ae2:	4680      	mov	r8, r0
 8006ae4:	b158      	cbz	r0, 8006afe <_dtoa_r+0xce>
 8006ae6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ae8:	2301      	movs	r3, #1
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006aee:	b113      	cbz	r3, 8006af6 <_dtoa_r+0xc6>
 8006af0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006af2:	4b86      	ldr	r3, [pc, #536]	@ (8006d0c <_dtoa_r+0x2dc>)
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006d20 <_dtoa_r+0x2f0>
 8006afa:	f000 bd40 	b.w	800757e <_dtoa_r+0xb4e>
 8006afe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006b02:	aa14      	add	r2, sp, #80	@ 0x50
 8006b04:	a915      	add	r1, sp, #84	@ 0x54
 8006b06:	4648      	mov	r0, r9
 8006b08:	f001 f984 	bl	8007e14 <__d2b>
 8006b0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006b10:	9002      	str	r0, [sp, #8]
 8006b12:	2e00      	cmp	r6, #0
 8006b14:	d078      	beq.n	8006c08 <_dtoa_r+0x1d8>
 8006b16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b30:	4619      	mov	r1, r3
 8006b32:	2200      	movs	r2, #0
 8006b34:	4b76      	ldr	r3, [pc, #472]	@ (8006d10 <_dtoa_r+0x2e0>)
 8006b36:	f7f9 fbaf 	bl	8000298 <__aeabi_dsub>
 8006b3a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006ce8 <_dtoa_r+0x2b8>)
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	f7f9 fd62 	bl	8000608 <__aeabi_dmul>
 8006b44:	a36a      	add	r3, pc, #424	@ (adr r3, 8006cf0 <_dtoa_r+0x2c0>)
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f7f9 fba7 	bl	800029c <__adddf3>
 8006b4e:	4604      	mov	r4, r0
 8006b50:	4630      	mov	r0, r6
 8006b52:	460d      	mov	r5, r1
 8006b54:	f7f9 fcee 	bl	8000534 <__aeabi_i2d>
 8006b58:	a367      	add	r3, pc, #412	@ (adr r3, 8006cf8 <_dtoa_r+0x2c8>)
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	f7f9 fd53 	bl	8000608 <__aeabi_dmul>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4620      	mov	r0, r4
 8006b68:	4629      	mov	r1, r5
 8006b6a:	f7f9 fb97 	bl	800029c <__adddf3>
 8006b6e:	4604      	mov	r4, r0
 8006b70:	460d      	mov	r5, r1
 8006b72:	f7f9 fff9 	bl	8000b68 <__aeabi_d2iz>
 8006b76:	2200      	movs	r2, #0
 8006b78:	4607      	mov	r7, r0
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	4629      	mov	r1, r5
 8006b80:	f7f9 ffb4 	bl	8000aec <__aeabi_dcmplt>
 8006b84:	b140      	cbz	r0, 8006b98 <_dtoa_r+0x168>
 8006b86:	4638      	mov	r0, r7
 8006b88:	f7f9 fcd4 	bl	8000534 <__aeabi_i2d>
 8006b8c:	4622      	mov	r2, r4
 8006b8e:	462b      	mov	r3, r5
 8006b90:	f7f9 ffa2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b94:	b900      	cbnz	r0, 8006b98 <_dtoa_r+0x168>
 8006b96:	3f01      	subs	r7, #1
 8006b98:	2f16      	cmp	r7, #22
 8006b9a:	d852      	bhi.n	8006c42 <_dtoa_r+0x212>
 8006b9c:	4b5d      	ldr	r3, [pc, #372]	@ (8006d14 <_dtoa_r+0x2e4>)
 8006b9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006baa:	f7f9 ff9f 	bl	8000aec <__aeabi_dcmplt>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d049      	beq.n	8006c46 <_dtoa_r+0x216>
 8006bb2:	3f01      	subs	r7, #1
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006bb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006bba:	1b9b      	subs	r3, r3, r6
 8006bbc:	1e5a      	subs	r2, r3, #1
 8006bbe:	bf45      	ittet	mi
 8006bc0:	f1c3 0301 	rsbmi	r3, r3, #1
 8006bc4:	9300      	strmi	r3, [sp, #0]
 8006bc6:	2300      	movpl	r3, #0
 8006bc8:	2300      	movmi	r3, #0
 8006bca:	9206      	str	r2, [sp, #24]
 8006bcc:	bf54      	ite	pl
 8006bce:	9300      	strpl	r3, [sp, #0]
 8006bd0:	9306      	strmi	r3, [sp, #24]
 8006bd2:	2f00      	cmp	r7, #0
 8006bd4:	db39      	blt.n	8006c4a <_dtoa_r+0x21a>
 8006bd6:	9b06      	ldr	r3, [sp, #24]
 8006bd8:	970d      	str	r7, [sp, #52]	@ 0x34
 8006bda:	443b      	add	r3, r7
 8006bdc:	9306      	str	r3, [sp, #24]
 8006bde:	2300      	movs	r3, #0
 8006be0:	9308      	str	r3, [sp, #32]
 8006be2:	9b07      	ldr	r3, [sp, #28]
 8006be4:	2b09      	cmp	r3, #9
 8006be6:	d863      	bhi.n	8006cb0 <_dtoa_r+0x280>
 8006be8:	2b05      	cmp	r3, #5
 8006bea:	bfc4      	itt	gt
 8006bec:	3b04      	subgt	r3, #4
 8006bee:	9307      	strgt	r3, [sp, #28]
 8006bf0:	9b07      	ldr	r3, [sp, #28]
 8006bf2:	f1a3 0302 	sub.w	r3, r3, #2
 8006bf6:	bfcc      	ite	gt
 8006bf8:	2400      	movgt	r4, #0
 8006bfa:	2401      	movle	r4, #1
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d863      	bhi.n	8006cc8 <_dtoa_r+0x298>
 8006c00:	e8df f003 	tbb	[pc, r3]
 8006c04:	2b375452 	.word	0x2b375452
 8006c08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006c0c:	441e      	add	r6, r3
 8006c0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006c12:	2b20      	cmp	r3, #32
 8006c14:	bfc1      	itttt	gt
 8006c16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c1a:	409f      	lslgt	r7, r3
 8006c1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c20:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c24:	bfd6      	itet	le
 8006c26:	f1c3 0320 	rsble	r3, r3, #32
 8006c2a:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c2e:	fa04 f003 	lslle.w	r0, r4, r3
 8006c32:	f7f9 fc6f 	bl	8000514 <__aeabi_ui2d>
 8006c36:	2201      	movs	r2, #1
 8006c38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c3c:	3e01      	subs	r6, #1
 8006c3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006c40:	e776      	b.n	8006b30 <_dtoa_r+0x100>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e7b7      	b.n	8006bb6 <_dtoa_r+0x186>
 8006c46:	9010      	str	r0, [sp, #64]	@ 0x40
 8006c48:	e7b6      	b.n	8006bb8 <_dtoa_r+0x188>
 8006c4a:	9b00      	ldr	r3, [sp, #0]
 8006c4c:	1bdb      	subs	r3, r3, r7
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	427b      	negs	r3, r7
 8006c52:	9308      	str	r3, [sp, #32]
 8006c54:	2300      	movs	r3, #0
 8006c56:	930d      	str	r3, [sp, #52]	@ 0x34
 8006c58:	e7c3      	b.n	8006be2 <_dtoa_r+0x1b2>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c60:	eb07 0b03 	add.w	fp, r7, r3
 8006c64:	f10b 0301 	add.w	r3, fp, #1
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	9303      	str	r3, [sp, #12]
 8006c6c:	bfb8      	it	lt
 8006c6e:	2301      	movlt	r3, #1
 8006c70:	e006      	b.n	8006c80 <_dtoa_r+0x250>
 8006c72:	2301      	movs	r3, #1
 8006c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	dd28      	ble.n	8006cce <_dtoa_r+0x29e>
 8006c7c:	469b      	mov	fp, r3
 8006c7e:	9303      	str	r3, [sp, #12]
 8006c80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006c84:	2100      	movs	r1, #0
 8006c86:	2204      	movs	r2, #4
 8006c88:	f102 0514 	add.w	r5, r2, #20
 8006c8c:	429d      	cmp	r5, r3
 8006c8e:	d926      	bls.n	8006cde <_dtoa_r+0x2ae>
 8006c90:	6041      	str	r1, [r0, #4]
 8006c92:	4648      	mov	r0, r9
 8006c94:	f000 fd9c 	bl	80077d0 <_Balloc>
 8006c98:	4682      	mov	sl, r0
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d142      	bne.n	8006d24 <_dtoa_r+0x2f4>
 8006c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006d18 <_dtoa_r+0x2e8>)
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	f240 11af 	movw	r1, #431	@ 0x1af
 8006ca6:	e6da      	b.n	8006a5e <_dtoa_r+0x2e>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e7e3      	b.n	8006c74 <_dtoa_r+0x244>
 8006cac:	2300      	movs	r3, #0
 8006cae:	e7d5      	b.n	8006c5c <_dtoa_r+0x22c>
 8006cb0:	2401      	movs	r4, #1
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	9307      	str	r3, [sp, #28]
 8006cb6:	9409      	str	r4, [sp, #36]	@ 0x24
 8006cb8:	f04f 3bff 	mov.w	fp, #4294967295
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8cd b00c 	str.w	fp, [sp, #12]
 8006cc2:	2312      	movs	r3, #18
 8006cc4:	920c      	str	r2, [sp, #48]	@ 0x30
 8006cc6:	e7db      	b.n	8006c80 <_dtoa_r+0x250>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ccc:	e7f4      	b.n	8006cb8 <_dtoa_r+0x288>
 8006cce:	f04f 0b01 	mov.w	fp, #1
 8006cd2:	f8cd b00c 	str.w	fp, [sp, #12]
 8006cd6:	465b      	mov	r3, fp
 8006cd8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006cdc:	e7d0      	b.n	8006c80 <_dtoa_r+0x250>
 8006cde:	3101      	adds	r1, #1
 8006ce0:	0052      	lsls	r2, r2, #1
 8006ce2:	e7d1      	b.n	8006c88 <_dtoa_r+0x258>
 8006ce4:	f3af 8000 	nop.w
 8006ce8:	636f4361 	.word	0x636f4361
 8006cec:	3fd287a7 	.word	0x3fd287a7
 8006cf0:	8b60c8b3 	.word	0x8b60c8b3
 8006cf4:	3fc68a28 	.word	0x3fc68a28
 8006cf8:	509f79fb 	.word	0x509f79fb
 8006cfc:	3fd34413 	.word	0x3fd34413
 8006d00:	08008aa9 	.word	0x08008aa9
 8006d04:	08008ac0 	.word	0x08008ac0
 8006d08:	7ff00000 	.word	0x7ff00000
 8006d0c:	08008a79 	.word	0x08008a79
 8006d10:	3ff80000 	.word	0x3ff80000
 8006d14:	08008c10 	.word	0x08008c10
 8006d18:	08008b18 	.word	0x08008b18
 8006d1c:	08008aa5 	.word	0x08008aa5
 8006d20:	08008a78 	.word	0x08008a78
 8006d24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006d28:	6018      	str	r0, [r3, #0]
 8006d2a:	9b03      	ldr	r3, [sp, #12]
 8006d2c:	2b0e      	cmp	r3, #14
 8006d2e:	f200 80a1 	bhi.w	8006e74 <_dtoa_r+0x444>
 8006d32:	2c00      	cmp	r4, #0
 8006d34:	f000 809e 	beq.w	8006e74 <_dtoa_r+0x444>
 8006d38:	2f00      	cmp	r7, #0
 8006d3a:	dd33      	ble.n	8006da4 <_dtoa_r+0x374>
 8006d3c:	4b9c      	ldr	r3, [pc, #624]	@ (8006fb0 <_dtoa_r+0x580>)
 8006d3e:	f007 020f 	and.w	r2, r7, #15
 8006d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d46:	ed93 7b00 	vldr	d7, [r3]
 8006d4a:	05f8      	lsls	r0, r7, #23
 8006d4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006d50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d54:	d516      	bpl.n	8006d84 <_dtoa_r+0x354>
 8006d56:	4b97      	ldr	r3, [pc, #604]	@ (8006fb4 <_dtoa_r+0x584>)
 8006d58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d60:	f7f9 fd7c 	bl	800085c <__aeabi_ddiv>
 8006d64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d68:	f004 040f 	and.w	r4, r4, #15
 8006d6c:	2603      	movs	r6, #3
 8006d6e:	4d91      	ldr	r5, [pc, #580]	@ (8006fb4 <_dtoa_r+0x584>)
 8006d70:	b954      	cbnz	r4, 8006d88 <_dtoa_r+0x358>
 8006d72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d7a:	f7f9 fd6f 	bl	800085c <__aeabi_ddiv>
 8006d7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d82:	e028      	b.n	8006dd6 <_dtoa_r+0x3a6>
 8006d84:	2602      	movs	r6, #2
 8006d86:	e7f2      	b.n	8006d6e <_dtoa_r+0x33e>
 8006d88:	07e1      	lsls	r1, r4, #31
 8006d8a:	d508      	bpl.n	8006d9e <_dtoa_r+0x36e>
 8006d8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006d90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d94:	f7f9 fc38 	bl	8000608 <__aeabi_dmul>
 8006d98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d9c:	3601      	adds	r6, #1
 8006d9e:	1064      	asrs	r4, r4, #1
 8006da0:	3508      	adds	r5, #8
 8006da2:	e7e5      	b.n	8006d70 <_dtoa_r+0x340>
 8006da4:	f000 80af 	beq.w	8006f06 <_dtoa_r+0x4d6>
 8006da8:	427c      	negs	r4, r7
 8006daa:	4b81      	ldr	r3, [pc, #516]	@ (8006fb0 <_dtoa_r+0x580>)
 8006dac:	4d81      	ldr	r5, [pc, #516]	@ (8006fb4 <_dtoa_r+0x584>)
 8006dae:	f004 020f 	and.w	r2, r4, #15
 8006db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006dbe:	f7f9 fc23 	bl	8000608 <__aeabi_dmul>
 8006dc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dc6:	1124      	asrs	r4, r4, #4
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2602      	movs	r6, #2
 8006dcc:	2c00      	cmp	r4, #0
 8006dce:	f040 808f 	bne.w	8006ef0 <_dtoa_r+0x4c0>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1d3      	bne.n	8006d7e <_dtoa_r+0x34e>
 8006dd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006dd8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8094 	beq.w	8006f0a <_dtoa_r+0x4da>
 8006de2:	4b75      	ldr	r3, [pc, #468]	@ (8006fb8 <_dtoa_r+0x588>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	4620      	mov	r0, r4
 8006de8:	4629      	mov	r1, r5
 8006dea:	f7f9 fe7f 	bl	8000aec <__aeabi_dcmplt>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	f000 808b 	beq.w	8006f0a <_dtoa_r+0x4da>
 8006df4:	9b03      	ldr	r3, [sp, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 8087 	beq.w	8006f0a <_dtoa_r+0x4da>
 8006dfc:	f1bb 0f00 	cmp.w	fp, #0
 8006e00:	dd34      	ble.n	8006e6c <_dtoa_r+0x43c>
 8006e02:	4620      	mov	r0, r4
 8006e04:	4b6d      	ldr	r3, [pc, #436]	@ (8006fbc <_dtoa_r+0x58c>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	4629      	mov	r1, r5
 8006e0a:	f7f9 fbfd 	bl	8000608 <__aeabi_dmul>
 8006e0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e12:	f107 38ff 	add.w	r8, r7, #4294967295
 8006e16:	3601      	adds	r6, #1
 8006e18:	465c      	mov	r4, fp
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f7f9 fb8a 	bl	8000534 <__aeabi_i2d>
 8006e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e24:	f7f9 fbf0 	bl	8000608 <__aeabi_dmul>
 8006e28:	4b65      	ldr	r3, [pc, #404]	@ (8006fc0 <_dtoa_r+0x590>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f7f9 fa36 	bl	800029c <__adddf3>
 8006e30:	4605      	mov	r5, r0
 8006e32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e36:	2c00      	cmp	r4, #0
 8006e38:	d16a      	bne.n	8006f10 <_dtoa_r+0x4e0>
 8006e3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e3e:	4b61      	ldr	r3, [pc, #388]	@ (8006fc4 <_dtoa_r+0x594>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	f7f9 fa29 	bl	8000298 <__aeabi_dsub>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e4e:	462a      	mov	r2, r5
 8006e50:	4633      	mov	r3, r6
 8006e52:	f7f9 fe69 	bl	8000b28 <__aeabi_dcmpgt>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	f040 8298 	bne.w	800738c <_dtoa_r+0x95c>
 8006e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e60:	462a      	mov	r2, r5
 8006e62:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e66:	f7f9 fe41 	bl	8000aec <__aeabi_dcmplt>
 8006e6a:	bb38      	cbnz	r0, 8006ebc <_dtoa_r+0x48c>
 8006e6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006e70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f2c0 8157 	blt.w	800712a <_dtoa_r+0x6fa>
 8006e7c:	2f0e      	cmp	r7, #14
 8006e7e:	f300 8154 	bgt.w	800712a <_dtoa_r+0x6fa>
 8006e82:	4b4b      	ldr	r3, [pc, #300]	@ (8006fb0 <_dtoa_r+0x580>)
 8006e84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e88:	ed93 7b00 	vldr	d7, [r3]
 8006e8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	ed8d 7b00 	vstr	d7, [sp]
 8006e94:	f280 80e5 	bge.w	8007062 <_dtoa_r+0x632>
 8006e98:	9b03      	ldr	r3, [sp, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f300 80e1 	bgt.w	8007062 <_dtoa_r+0x632>
 8006ea0:	d10c      	bne.n	8006ebc <_dtoa_r+0x48c>
 8006ea2:	4b48      	ldr	r3, [pc, #288]	@ (8006fc4 <_dtoa_r+0x594>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	ec51 0b17 	vmov	r0, r1, d7
 8006eaa:	f7f9 fbad 	bl	8000608 <__aeabi_dmul>
 8006eae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eb2:	f7f9 fe2f 	bl	8000b14 <__aeabi_dcmpge>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	f000 8266 	beq.w	8007388 <_dtoa_r+0x958>
 8006ebc:	2400      	movs	r4, #0
 8006ebe:	4625      	mov	r5, r4
 8006ec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ec2:	4656      	mov	r6, sl
 8006ec4:	ea6f 0803 	mvn.w	r8, r3
 8006ec8:	2700      	movs	r7, #0
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4648      	mov	r0, r9
 8006ece:	f000 fcbf 	bl	8007850 <_Bfree>
 8006ed2:	2d00      	cmp	r5, #0
 8006ed4:	f000 80bd 	beq.w	8007052 <_dtoa_r+0x622>
 8006ed8:	b12f      	cbz	r7, 8006ee6 <_dtoa_r+0x4b6>
 8006eda:	42af      	cmp	r7, r5
 8006edc:	d003      	beq.n	8006ee6 <_dtoa_r+0x4b6>
 8006ede:	4639      	mov	r1, r7
 8006ee0:	4648      	mov	r0, r9
 8006ee2:	f000 fcb5 	bl	8007850 <_Bfree>
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	4648      	mov	r0, r9
 8006eea:	f000 fcb1 	bl	8007850 <_Bfree>
 8006eee:	e0b0      	b.n	8007052 <_dtoa_r+0x622>
 8006ef0:	07e2      	lsls	r2, r4, #31
 8006ef2:	d505      	bpl.n	8006f00 <_dtoa_r+0x4d0>
 8006ef4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ef8:	f7f9 fb86 	bl	8000608 <__aeabi_dmul>
 8006efc:	3601      	adds	r6, #1
 8006efe:	2301      	movs	r3, #1
 8006f00:	1064      	asrs	r4, r4, #1
 8006f02:	3508      	adds	r5, #8
 8006f04:	e762      	b.n	8006dcc <_dtoa_r+0x39c>
 8006f06:	2602      	movs	r6, #2
 8006f08:	e765      	b.n	8006dd6 <_dtoa_r+0x3a6>
 8006f0a:	9c03      	ldr	r4, [sp, #12]
 8006f0c:	46b8      	mov	r8, r7
 8006f0e:	e784      	b.n	8006e1a <_dtoa_r+0x3ea>
 8006f10:	4b27      	ldr	r3, [pc, #156]	@ (8006fb0 <_dtoa_r+0x580>)
 8006f12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f1c:	4454      	add	r4, sl
 8006f1e:	2900      	cmp	r1, #0
 8006f20:	d054      	beq.n	8006fcc <_dtoa_r+0x59c>
 8006f22:	4929      	ldr	r1, [pc, #164]	@ (8006fc8 <_dtoa_r+0x598>)
 8006f24:	2000      	movs	r0, #0
 8006f26:	f7f9 fc99 	bl	800085c <__aeabi_ddiv>
 8006f2a:	4633      	mov	r3, r6
 8006f2c:	462a      	mov	r2, r5
 8006f2e:	f7f9 f9b3 	bl	8000298 <__aeabi_dsub>
 8006f32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f36:	4656      	mov	r6, sl
 8006f38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f3c:	f7f9 fe14 	bl	8000b68 <__aeabi_d2iz>
 8006f40:	4605      	mov	r5, r0
 8006f42:	f7f9 faf7 	bl	8000534 <__aeabi_i2d>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f4e:	f7f9 f9a3 	bl	8000298 <__aeabi_dsub>
 8006f52:	3530      	adds	r5, #48	@ 0x30
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f5c:	f806 5b01 	strb.w	r5, [r6], #1
 8006f60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f64:	f7f9 fdc2 	bl	8000aec <__aeabi_dcmplt>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d172      	bne.n	8007052 <_dtoa_r+0x622>
 8006f6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f70:	4911      	ldr	r1, [pc, #68]	@ (8006fb8 <_dtoa_r+0x588>)
 8006f72:	2000      	movs	r0, #0
 8006f74:	f7f9 f990 	bl	8000298 <__aeabi_dsub>
 8006f78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f7c:	f7f9 fdb6 	bl	8000aec <__aeabi_dcmplt>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	f040 80b4 	bne.w	80070ee <_dtoa_r+0x6be>
 8006f86:	42a6      	cmp	r6, r4
 8006f88:	f43f af70 	beq.w	8006e6c <_dtoa_r+0x43c>
 8006f8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006f90:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <_dtoa_r+0x58c>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	f7f9 fb38 	bl	8000608 <__aeabi_dmul>
 8006f98:	4b08      	ldr	r3, [pc, #32]	@ (8006fbc <_dtoa_r+0x58c>)
 8006f9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fa4:	f7f9 fb30 	bl	8000608 <__aeabi_dmul>
 8006fa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fac:	e7c4      	b.n	8006f38 <_dtoa_r+0x508>
 8006fae:	bf00      	nop
 8006fb0:	08008c10 	.word	0x08008c10
 8006fb4:	08008be8 	.word	0x08008be8
 8006fb8:	3ff00000 	.word	0x3ff00000
 8006fbc:	40240000 	.word	0x40240000
 8006fc0:	401c0000 	.word	0x401c0000
 8006fc4:	40140000 	.word	0x40140000
 8006fc8:	3fe00000 	.word	0x3fe00000
 8006fcc:	4631      	mov	r1, r6
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f7f9 fb1a 	bl	8000608 <__aeabi_dmul>
 8006fd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006fd8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006fda:	4656      	mov	r6, sl
 8006fdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fe0:	f7f9 fdc2 	bl	8000b68 <__aeabi_d2iz>
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	f7f9 faa5 	bl	8000534 <__aeabi_i2d>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ff2:	f7f9 f951 	bl	8000298 <__aeabi_dsub>
 8006ff6:	3530      	adds	r5, #48	@ 0x30
 8006ff8:	f806 5b01 	strb.w	r5, [r6], #1
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	42a6      	cmp	r6, r4
 8007002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	d124      	bne.n	8007056 <_dtoa_r+0x626>
 800700c:	4baf      	ldr	r3, [pc, #700]	@ (80072cc <_dtoa_r+0x89c>)
 800700e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007012:	f7f9 f943 	bl	800029c <__adddf3>
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800701e:	f7f9 fd83 	bl	8000b28 <__aeabi_dcmpgt>
 8007022:	2800      	cmp	r0, #0
 8007024:	d163      	bne.n	80070ee <_dtoa_r+0x6be>
 8007026:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800702a:	49a8      	ldr	r1, [pc, #672]	@ (80072cc <_dtoa_r+0x89c>)
 800702c:	2000      	movs	r0, #0
 800702e:	f7f9 f933 	bl	8000298 <__aeabi_dsub>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800703a:	f7f9 fd57 	bl	8000aec <__aeabi_dcmplt>
 800703e:	2800      	cmp	r0, #0
 8007040:	f43f af14 	beq.w	8006e6c <_dtoa_r+0x43c>
 8007044:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007046:	1e73      	subs	r3, r6, #1
 8007048:	9313      	str	r3, [sp, #76]	@ 0x4c
 800704a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800704e:	2b30      	cmp	r3, #48	@ 0x30
 8007050:	d0f8      	beq.n	8007044 <_dtoa_r+0x614>
 8007052:	4647      	mov	r7, r8
 8007054:	e03b      	b.n	80070ce <_dtoa_r+0x69e>
 8007056:	4b9e      	ldr	r3, [pc, #632]	@ (80072d0 <_dtoa_r+0x8a0>)
 8007058:	f7f9 fad6 	bl	8000608 <__aeabi_dmul>
 800705c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007060:	e7bc      	b.n	8006fdc <_dtoa_r+0x5ac>
 8007062:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007066:	4656      	mov	r6, sl
 8007068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800706c:	4620      	mov	r0, r4
 800706e:	4629      	mov	r1, r5
 8007070:	f7f9 fbf4 	bl	800085c <__aeabi_ddiv>
 8007074:	f7f9 fd78 	bl	8000b68 <__aeabi_d2iz>
 8007078:	4680      	mov	r8, r0
 800707a:	f7f9 fa5b 	bl	8000534 <__aeabi_i2d>
 800707e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007082:	f7f9 fac1 	bl	8000608 <__aeabi_dmul>
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	4620      	mov	r0, r4
 800708c:	4629      	mov	r1, r5
 800708e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007092:	f7f9 f901 	bl	8000298 <__aeabi_dsub>
 8007096:	f806 4b01 	strb.w	r4, [r6], #1
 800709a:	9d03      	ldr	r5, [sp, #12]
 800709c:	eba6 040a 	sub.w	r4, r6, sl
 80070a0:	42a5      	cmp	r5, r4
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	d133      	bne.n	8007110 <_dtoa_r+0x6e0>
 80070a8:	f7f9 f8f8 	bl	800029c <__adddf3>
 80070ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070b0:	4604      	mov	r4, r0
 80070b2:	460d      	mov	r5, r1
 80070b4:	f7f9 fd38 	bl	8000b28 <__aeabi_dcmpgt>
 80070b8:	b9c0      	cbnz	r0, 80070ec <_dtoa_r+0x6bc>
 80070ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070be:	4620      	mov	r0, r4
 80070c0:	4629      	mov	r1, r5
 80070c2:	f7f9 fd09 	bl	8000ad8 <__aeabi_dcmpeq>
 80070c6:	b110      	cbz	r0, 80070ce <_dtoa_r+0x69e>
 80070c8:	f018 0f01 	tst.w	r8, #1
 80070cc:	d10e      	bne.n	80070ec <_dtoa_r+0x6bc>
 80070ce:	9902      	ldr	r1, [sp, #8]
 80070d0:	4648      	mov	r0, r9
 80070d2:	f000 fbbd 	bl	8007850 <_Bfree>
 80070d6:	2300      	movs	r3, #0
 80070d8:	7033      	strb	r3, [r6, #0]
 80070da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070dc:	3701      	adds	r7, #1
 80070de:	601f      	str	r7, [r3, #0]
 80070e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 824b 	beq.w	800757e <_dtoa_r+0xb4e>
 80070e8:	601e      	str	r6, [r3, #0]
 80070ea:	e248      	b.n	800757e <_dtoa_r+0xb4e>
 80070ec:	46b8      	mov	r8, r7
 80070ee:	4633      	mov	r3, r6
 80070f0:	461e      	mov	r6, r3
 80070f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070f6:	2a39      	cmp	r2, #57	@ 0x39
 80070f8:	d106      	bne.n	8007108 <_dtoa_r+0x6d8>
 80070fa:	459a      	cmp	sl, r3
 80070fc:	d1f8      	bne.n	80070f0 <_dtoa_r+0x6c0>
 80070fe:	2230      	movs	r2, #48	@ 0x30
 8007100:	f108 0801 	add.w	r8, r8, #1
 8007104:	f88a 2000 	strb.w	r2, [sl]
 8007108:	781a      	ldrb	r2, [r3, #0]
 800710a:	3201      	adds	r2, #1
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	e7a0      	b.n	8007052 <_dtoa_r+0x622>
 8007110:	4b6f      	ldr	r3, [pc, #444]	@ (80072d0 <_dtoa_r+0x8a0>)
 8007112:	2200      	movs	r2, #0
 8007114:	f7f9 fa78 	bl	8000608 <__aeabi_dmul>
 8007118:	2200      	movs	r2, #0
 800711a:	2300      	movs	r3, #0
 800711c:	4604      	mov	r4, r0
 800711e:	460d      	mov	r5, r1
 8007120:	f7f9 fcda 	bl	8000ad8 <__aeabi_dcmpeq>
 8007124:	2800      	cmp	r0, #0
 8007126:	d09f      	beq.n	8007068 <_dtoa_r+0x638>
 8007128:	e7d1      	b.n	80070ce <_dtoa_r+0x69e>
 800712a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800712c:	2a00      	cmp	r2, #0
 800712e:	f000 80ea 	beq.w	8007306 <_dtoa_r+0x8d6>
 8007132:	9a07      	ldr	r2, [sp, #28]
 8007134:	2a01      	cmp	r2, #1
 8007136:	f300 80cd 	bgt.w	80072d4 <_dtoa_r+0x8a4>
 800713a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800713c:	2a00      	cmp	r2, #0
 800713e:	f000 80c1 	beq.w	80072c4 <_dtoa_r+0x894>
 8007142:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007146:	9c08      	ldr	r4, [sp, #32]
 8007148:	9e00      	ldr	r6, [sp, #0]
 800714a:	9a00      	ldr	r2, [sp, #0]
 800714c:	441a      	add	r2, r3
 800714e:	9200      	str	r2, [sp, #0]
 8007150:	9a06      	ldr	r2, [sp, #24]
 8007152:	2101      	movs	r1, #1
 8007154:	441a      	add	r2, r3
 8007156:	4648      	mov	r0, r9
 8007158:	9206      	str	r2, [sp, #24]
 800715a:	f000 fc2d 	bl	80079b8 <__i2b>
 800715e:	4605      	mov	r5, r0
 8007160:	b166      	cbz	r6, 800717c <_dtoa_r+0x74c>
 8007162:	9b06      	ldr	r3, [sp, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dd09      	ble.n	800717c <_dtoa_r+0x74c>
 8007168:	42b3      	cmp	r3, r6
 800716a:	9a00      	ldr	r2, [sp, #0]
 800716c:	bfa8      	it	ge
 800716e:	4633      	movge	r3, r6
 8007170:	1ad2      	subs	r2, r2, r3
 8007172:	9200      	str	r2, [sp, #0]
 8007174:	9a06      	ldr	r2, [sp, #24]
 8007176:	1af6      	subs	r6, r6, r3
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	9306      	str	r3, [sp, #24]
 800717c:	9b08      	ldr	r3, [sp, #32]
 800717e:	b30b      	cbz	r3, 80071c4 <_dtoa_r+0x794>
 8007180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 80c6 	beq.w	8007314 <_dtoa_r+0x8e4>
 8007188:	2c00      	cmp	r4, #0
 800718a:	f000 80c0 	beq.w	800730e <_dtoa_r+0x8de>
 800718e:	4629      	mov	r1, r5
 8007190:	4622      	mov	r2, r4
 8007192:	4648      	mov	r0, r9
 8007194:	f000 fcc8 	bl	8007b28 <__pow5mult>
 8007198:	9a02      	ldr	r2, [sp, #8]
 800719a:	4601      	mov	r1, r0
 800719c:	4605      	mov	r5, r0
 800719e:	4648      	mov	r0, r9
 80071a0:	f000 fc20 	bl	80079e4 <__multiply>
 80071a4:	9902      	ldr	r1, [sp, #8]
 80071a6:	4680      	mov	r8, r0
 80071a8:	4648      	mov	r0, r9
 80071aa:	f000 fb51 	bl	8007850 <_Bfree>
 80071ae:	9b08      	ldr	r3, [sp, #32]
 80071b0:	1b1b      	subs	r3, r3, r4
 80071b2:	9308      	str	r3, [sp, #32]
 80071b4:	f000 80b1 	beq.w	800731a <_dtoa_r+0x8ea>
 80071b8:	9a08      	ldr	r2, [sp, #32]
 80071ba:	4641      	mov	r1, r8
 80071bc:	4648      	mov	r0, r9
 80071be:	f000 fcb3 	bl	8007b28 <__pow5mult>
 80071c2:	9002      	str	r0, [sp, #8]
 80071c4:	2101      	movs	r1, #1
 80071c6:	4648      	mov	r0, r9
 80071c8:	f000 fbf6 	bl	80079b8 <__i2b>
 80071cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071ce:	4604      	mov	r4, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 81d8 	beq.w	8007586 <_dtoa_r+0xb56>
 80071d6:	461a      	mov	r2, r3
 80071d8:	4601      	mov	r1, r0
 80071da:	4648      	mov	r0, r9
 80071dc:	f000 fca4 	bl	8007b28 <__pow5mult>
 80071e0:	9b07      	ldr	r3, [sp, #28]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	4604      	mov	r4, r0
 80071e6:	f300 809f 	bgt.w	8007328 <_dtoa_r+0x8f8>
 80071ea:	9b04      	ldr	r3, [sp, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f040 8097 	bne.w	8007320 <_dtoa_r+0x8f0>
 80071f2:	9b05      	ldr	r3, [sp, #20]
 80071f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f040 8093 	bne.w	8007324 <_dtoa_r+0x8f4>
 80071fe:	9b05      	ldr	r3, [sp, #20]
 8007200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007204:	0d1b      	lsrs	r3, r3, #20
 8007206:	051b      	lsls	r3, r3, #20
 8007208:	b133      	cbz	r3, 8007218 <_dtoa_r+0x7e8>
 800720a:	9b00      	ldr	r3, [sp, #0]
 800720c:	3301      	adds	r3, #1
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	9b06      	ldr	r3, [sp, #24]
 8007212:	3301      	adds	r3, #1
 8007214:	9306      	str	r3, [sp, #24]
 8007216:	2301      	movs	r3, #1
 8007218:	9308      	str	r3, [sp, #32]
 800721a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 81b8 	beq.w	8007592 <_dtoa_r+0xb62>
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007228:	6918      	ldr	r0, [r3, #16]
 800722a:	f000 fb79 	bl	8007920 <__hi0bits>
 800722e:	f1c0 0020 	rsb	r0, r0, #32
 8007232:	9b06      	ldr	r3, [sp, #24]
 8007234:	4418      	add	r0, r3
 8007236:	f010 001f 	ands.w	r0, r0, #31
 800723a:	f000 8082 	beq.w	8007342 <_dtoa_r+0x912>
 800723e:	f1c0 0320 	rsb	r3, r0, #32
 8007242:	2b04      	cmp	r3, #4
 8007244:	dd73      	ble.n	800732e <_dtoa_r+0x8fe>
 8007246:	9b00      	ldr	r3, [sp, #0]
 8007248:	f1c0 001c 	rsb	r0, r0, #28
 800724c:	4403      	add	r3, r0
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	9b06      	ldr	r3, [sp, #24]
 8007252:	4403      	add	r3, r0
 8007254:	4406      	add	r6, r0
 8007256:	9306      	str	r3, [sp, #24]
 8007258:	9b00      	ldr	r3, [sp, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	dd05      	ble.n	800726a <_dtoa_r+0x83a>
 800725e:	9902      	ldr	r1, [sp, #8]
 8007260:	461a      	mov	r2, r3
 8007262:	4648      	mov	r0, r9
 8007264:	f000 fcba 	bl	8007bdc <__lshift>
 8007268:	9002      	str	r0, [sp, #8]
 800726a:	9b06      	ldr	r3, [sp, #24]
 800726c:	2b00      	cmp	r3, #0
 800726e:	dd05      	ble.n	800727c <_dtoa_r+0x84c>
 8007270:	4621      	mov	r1, r4
 8007272:	461a      	mov	r2, r3
 8007274:	4648      	mov	r0, r9
 8007276:	f000 fcb1 	bl	8007bdc <__lshift>
 800727a:	4604      	mov	r4, r0
 800727c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	d061      	beq.n	8007346 <_dtoa_r+0x916>
 8007282:	9802      	ldr	r0, [sp, #8]
 8007284:	4621      	mov	r1, r4
 8007286:	f000 fd15 	bl	8007cb4 <__mcmp>
 800728a:	2800      	cmp	r0, #0
 800728c:	da5b      	bge.n	8007346 <_dtoa_r+0x916>
 800728e:	2300      	movs	r3, #0
 8007290:	9902      	ldr	r1, [sp, #8]
 8007292:	220a      	movs	r2, #10
 8007294:	4648      	mov	r0, r9
 8007296:	f000 fafd 	bl	8007894 <__multadd>
 800729a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800729c:	9002      	str	r0, [sp, #8]
 800729e:	f107 38ff 	add.w	r8, r7, #4294967295
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 8177 	beq.w	8007596 <_dtoa_r+0xb66>
 80072a8:	4629      	mov	r1, r5
 80072aa:	2300      	movs	r3, #0
 80072ac:	220a      	movs	r2, #10
 80072ae:	4648      	mov	r0, r9
 80072b0:	f000 faf0 	bl	8007894 <__multadd>
 80072b4:	f1bb 0f00 	cmp.w	fp, #0
 80072b8:	4605      	mov	r5, r0
 80072ba:	dc6f      	bgt.n	800739c <_dtoa_r+0x96c>
 80072bc:	9b07      	ldr	r3, [sp, #28]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	dc49      	bgt.n	8007356 <_dtoa_r+0x926>
 80072c2:	e06b      	b.n	800739c <_dtoa_r+0x96c>
 80072c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80072c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80072ca:	e73c      	b.n	8007146 <_dtoa_r+0x716>
 80072cc:	3fe00000 	.word	0x3fe00000
 80072d0:	40240000 	.word	0x40240000
 80072d4:	9b03      	ldr	r3, [sp, #12]
 80072d6:	1e5c      	subs	r4, r3, #1
 80072d8:	9b08      	ldr	r3, [sp, #32]
 80072da:	42a3      	cmp	r3, r4
 80072dc:	db09      	blt.n	80072f2 <_dtoa_r+0x8c2>
 80072de:	1b1c      	subs	r4, r3, r4
 80072e0:	9b03      	ldr	r3, [sp, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f6bf af30 	bge.w	8007148 <_dtoa_r+0x718>
 80072e8:	9b00      	ldr	r3, [sp, #0]
 80072ea:	9a03      	ldr	r2, [sp, #12]
 80072ec:	1a9e      	subs	r6, r3, r2
 80072ee:	2300      	movs	r3, #0
 80072f0:	e72b      	b.n	800714a <_dtoa_r+0x71a>
 80072f2:	9b08      	ldr	r3, [sp, #32]
 80072f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80072f6:	9408      	str	r4, [sp, #32]
 80072f8:	1ae3      	subs	r3, r4, r3
 80072fa:	441a      	add	r2, r3
 80072fc:	9e00      	ldr	r6, [sp, #0]
 80072fe:	9b03      	ldr	r3, [sp, #12]
 8007300:	920d      	str	r2, [sp, #52]	@ 0x34
 8007302:	2400      	movs	r4, #0
 8007304:	e721      	b.n	800714a <_dtoa_r+0x71a>
 8007306:	9c08      	ldr	r4, [sp, #32]
 8007308:	9e00      	ldr	r6, [sp, #0]
 800730a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800730c:	e728      	b.n	8007160 <_dtoa_r+0x730>
 800730e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007312:	e751      	b.n	80071b8 <_dtoa_r+0x788>
 8007314:	9a08      	ldr	r2, [sp, #32]
 8007316:	9902      	ldr	r1, [sp, #8]
 8007318:	e750      	b.n	80071bc <_dtoa_r+0x78c>
 800731a:	f8cd 8008 	str.w	r8, [sp, #8]
 800731e:	e751      	b.n	80071c4 <_dtoa_r+0x794>
 8007320:	2300      	movs	r3, #0
 8007322:	e779      	b.n	8007218 <_dtoa_r+0x7e8>
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	e777      	b.n	8007218 <_dtoa_r+0x7e8>
 8007328:	2300      	movs	r3, #0
 800732a:	9308      	str	r3, [sp, #32]
 800732c:	e779      	b.n	8007222 <_dtoa_r+0x7f2>
 800732e:	d093      	beq.n	8007258 <_dtoa_r+0x828>
 8007330:	9a00      	ldr	r2, [sp, #0]
 8007332:	331c      	adds	r3, #28
 8007334:	441a      	add	r2, r3
 8007336:	9200      	str	r2, [sp, #0]
 8007338:	9a06      	ldr	r2, [sp, #24]
 800733a:	441a      	add	r2, r3
 800733c:	441e      	add	r6, r3
 800733e:	9206      	str	r2, [sp, #24]
 8007340:	e78a      	b.n	8007258 <_dtoa_r+0x828>
 8007342:	4603      	mov	r3, r0
 8007344:	e7f4      	b.n	8007330 <_dtoa_r+0x900>
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	46b8      	mov	r8, r7
 800734c:	dc20      	bgt.n	8007390 <_dtoa_r+0x960>
 800734e:	469b      	mov	fp, r3
 8007350:	9b07      	ldr	r3, [sp, #28]
 8007352:	2b02      	cmp	r3, #2
 8007354:	dd1e      	ble.n	8007394 <_dtoa_r+0x964>
 8007356:	f1bb 0f00 	cmp.w	fp, #0
 800735a:	f47f adb1 	bne.w	8006ec0 <_dtoa_r+0x490>
 800735e:	4621      	mov	r1, r4
 8007360:	465b      	mov	r3, fp
 8007362:	2205      	movs	r2, #5
 8007364:	4648      	mov	r0, r9
 8007366:	f000 fa95 	bl	8007894 <__multadd>
 800736a:	4601      	mov	r1, r0
 800736c:	4604      	mov	r4, r0
 800736e:	9802      	ldr	r0, [sp, #8]
 8007370:	f000 fca0 	bl	8007cb4 <__mcmp>
 8007374:	2800      	cmp	r0, #0
 8007376:	f77f ada3 	ble.w	8006ec0 <_dtoa_r+0x490>
 800737a:	4656      	mov	r6, sl
 800737c:	2331      	movs	r3, #49	@ 0x31
 800737e:	f806 3b01 	strb.w	r3, [r6], #1
 8007382:	f108 0801 	add.w	r8, r8, #1
 8007386:	e59f      	b.n	8006ec8 <_dtoa_r+0x498>
 8007388:	9c03      	ldr	r4, [sp, #12]
 800738a:	46b8      	mov	r8, r7
 800738c:	4625      	mov	r5, r4
 800738e:	e7f4      	b.n	800737a <_dtoa_r+0x94a>
 8007390:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 8101 	beq.w	800759e <_dtoa_r+0xb6e>
 800739c:	2e00      	cmp	r6, #0
 800739e:	dd05      	ble.n	80073ac <_dtoa_r+0x97c>
 80073a0:	4629      	mov	r1, r5
 80073a2:	4632      	mov	r2, r6
 80073a4:	4648      	mov	r0, r9
 80073a6:	f000 fc19 	bl	8007bdc <__lshift>
 80073aa:	4605      	mov	r5, r0
 80073ac:	9b08      	ldr	r3, [sp, #32]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d05c      	beq.n	800746c <_dtoa_r+0xa3c>
 80073b2:	6869      	ldr	r1, [r5, #4]
 80073b4:	4648      	mov	r0, r9
 80073b6:	f000 fa0b 	bl	80077d0 <_Balloc>
 80073ba:	4606      	mov	r6, r0
 80073bc:	b928      	cbnz	r0, 80073ca <_dtoa_r+0x99a>
 80073be:	4b82      	ldr	r3, [pc, #520]	@ (80075c8 <_dtoa_r+0xb98>)
 80073c0:	4602      	mov	r2, r0
 80073c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80073c6:	f7ff bb4a 	b.w	8006a5e <_dtoa_r+0x2e>
 80073ca:	692a      	ldr	r2, [r5, #16]
 80073cc:	3202      	adds	r2, #2
 80073ce:	0092      	lsls	r2, r2, #2
 80073d0:	f105 010c 	add.w	r1, r5, #12
 80073d4:	300c      	adds	r0, #12
 80073d6:	f7ff fa94 	bl	8006902 <memcpy>
 80073da:	2201      	movs	r2, #1
 80073dc:	4631      	mov	r1, r6
 80073de:	4648      	mov	r0, r9
 80073e0:	f000 fbfc 	bl	8007bdc <__lshift>
 80073e4:	f10a 0301 	add.w	r3, sl, #1
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	eb0a 030b 	add.w	r3, sl, fp
 80073ee:	9308      	str	r3, [sp, #32]
 80073f0:	9b04      	ldr	r3, [sp, #16]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	462f      	mov	r7, r5
 80073f8:	9306      	str	r3, [sp, #24]
 80073fa:	4605      	mov	r5, r0
 80073fc:	9b00      	ldr	r3, [sp, #0]
 80073fe:	9802      	ldr	r0, [sp, #8]
 8007400:	4621      	mov	r1, r4
 8007402:	f103 3bff 	add.w	fp, r3, #4294967295
 8007406:	f7ff fa8a 	bl	800691e <quorem>
 800740a:	4603      	mov	r3, r0
 800740c:	3330      	adds	r3, #48	@ 0x30
 800740e:	9003      	str	r0, [sp, #12]
 8007410:	4639      	mov	r1, r7
 8007412:	9802      	ldr	r0, [sp, #8]
 8007414:	9309      	str	r3, [sp, #36]	@ 0x24
 8007416:	f000 fc4d 	bl	8007cb4 <__mcmp>
 800741a:	462a      	mov	r2, r5
 800741c:	9004      	str	r0, [sp, #16]
 800741e:	4621      	mov	r1, r4
 8007420:	4648      	mov	r0, r9
 8007422:	f000 fc63 	bl	8007cec <__mdiff>
 8007426:	68c2      	ldr	r2, [r0, #12]
 8007428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800742a:	4606      	mov	r6, r0
 800742c:	bb02      	cbnz	r2, 8007470 <_dtoa_r+0xa40>
 800742e:	4601      	mov	r1, r0
 8007430:	9802      	ldr	r0, [sp, #8]
 8007432:	f000 fc3f 	bl	8007cb4 <__mcmp>
 8007436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007438:	4602      	mov	r2, r0
 800743a:	4631      	mov	r1, r6
 800743c:	4648      	mov	r0, r9
 800743e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007440:	9309      	str	r3, [sp, #36]	@ 0x24
 8007442:	f000 fa05 	bl	8007850 <_Bfree>
 8007446:	9b07      	ldr	r3, [sp, #28]
 8007448:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800744a:	9e00      	ldr	r6, [sp, #0]
 800744c:	ea42 0103 	orr.w	r1, r2, r3
 8007450:	9b06      	ldr	r3, [sp, #24]
 8007452:	4319      	orrs	r1, r3
 8007454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007456:	d10d      	bne.n	8007474 <_dtoa_r+0xa44>
 8007458:	2b39      	cmp	r3, #57	@ 0x39
 800745a:	d027      	beq.n	80074ac <_dtoa_r+0xa7c>
 800745c:	9a04      	ldr	r2, [sp, #16]
 800745e:	2a00      	cmp	r2, #0
 8007460:	dd01      	ble.n	8007466 <_dtoa_r+0xa36>
 8007462:	9b03      	ldr	r3, [sp, #12]
 8007464:	3331      	adds	r3, #49	@ 0x31
 8007466:	f88b 3000 	strb.w	r3, [fp]
 800746a:	e52e      	b.n	8006eca <_dtoa_r+0x49a>
 800746c:	4628      	mov	r0, r5
 800746e:	e7b9      	b.n	80073e4 <_dtoa_r+0x9b4>
 8007470:	2201      	movs	r2, #1
 8007472:	e7e2      	b.n	800743a <_dtoa_r+0xa0a>
 8007474:	9904      	ldr	r1, [sp, #16]
 8007476:	2900      	cmp	r1, #0
 8007478:	db04      	blt.n	8007484 <_dtoa_r+0xa54>
 800747a:	9807      	ldr	r0, [sp, #28]
 800747c:	4301      	orrs	r1, r0
 800747e:	9806      	ldr	r0, [sp, #24]
 8007480:	4301      	orrs	r1, r0
 8007482:	d120      	bne.n	80074c6 <_dtoa_r+0xa96>
 8007484:	2a00      	cmp	r2, #0
 8007486:	ddee      	ble.n	8007466 <_dtoa_r+0xa36>
 8007488:	9902      	ldr	r1, [sp, #8]
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	2201      	movs	r2, #1
 800748e:	4648      	mov	r0, r9
 8007490:	f000 fba4 	bl	8007bdc <__lshift>
 8007494:	4621      	mov	r1, r4
 8007496:	9002      	str	r0, [sp, #8]
 8007498:	f000 fc0c 	bl	8007cb4 <__mcmp>
 800749c:	2800      	cmp	r0, #0
 800749e:	9b00      	ldr	r3, [sp, #0]
 80074a0:	dc02      	bgt.n	80074a8 <_dtoa_r+0xa78>
 80074a2:	d1e0      	bne.n	8007466 <_dtoa_r+0xa36>
 80074a4:	07da      	lsls	r2, r3, #31
 80074a6:	d5de      	bpl.n	8007466 <_dtoa_r+0xa36>
 80074a8:	2b39      	cmp	r3, #57	@ 0x39
 80074aa:	d1da      	bne.n	8007462 <_dtoa_r+0xa32>
 80074ac:	2339      	movs	r3, #57	@ 0x39
 80074ae:	f88b 3000 	strb.w	r3, [fp]
 80074b2:	4633      	mov	r3, r6
 80074b4:	461e      	mov	r6, r3
 80074b6:	3b01      	subs	r3, #1
 80074b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80074bc:	2a39      	cmp	r2, #57	@ 0x39
 80074be:	d04e      	beq.n	800755e <_dtoa_r+0xb2e>
 80074c0:	3201      	adds	r2, #1
 80074c2:	701a      	strb	r2, [r3, #0]
 80074c4:	e501      	b.n	8006eca <_dtoa_r+0x49a>
 80074c6:	2a00      	cmp	r2, #0
 80074c8:	dd03      	ble.n	80074d2 <_dtoa_r+0xaa2>
 80074ca:	2b39      	cmp	r3, #57	@ 0x39
 80074cc:	d0ee      	beq.n	80074ac <_dtoa_r+0xa7c>
 80074ce:	3301      	adds	r3, #1
 80074d0:	e7c9      	b.n	8007466 <_dtoa_r+0xa36>
 80074d2:	9a00      	ldr	r2, [sp, #0]
 80074d4:	9908      	ldr	r1, [sp, #32]
 80074d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80074da:	428a      	cmp	r2, r1
 80074dc:	d028      	beq.n	8007530 <_dtoa_r+0xb00>
 80074de:	9902      	ldr	r1, [sp, #8]
 80074e0:	2300      	movs	r3, #0
 80074e2:	220a      	movs	r2, #10
 80074e4:	4648      	mov	r0, r9
 80074e6:	f000 f9d5 	bl	8007894 <__multadd>
 80074ea:	42af      	cmp	r7, r5
 80074ec:	9002      	str	r0, [sp, #8]
 80074ee:	f04f 0300 	mov.w	r3, #0
 80074f2:	f04f 020a 	mov.w	r2, #10
 80074f6:	4639      	mov	r1, r7
 80074f8:	4648      	mov	r0, r9
 80074fa:	d107      	bne.n	800750c <_dtoa_r+0xadc>
 80074fc:	f000 f9ca 	bl	8007894 <__multadd>
 8007500:	4607      	mov	r7, r0
 8007502:	4605      	mov	r5, r0
 8007504:	9b00      	ldr	r3, [sp, #0]
 8007506:	3301      	adds	r3, #1
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	e777      	b.n	80073fc <_dtoa_r+0x9cc>
 800750c:	f000 f9c2 	bl	8007894 <__multadd>
 8007510:	4629      	mov	r1, r5
 8007512:	4607      	mov	r7, r0
 8007514:	2300      	movs	r3, #0
 8007516:	220a      	movs	r2, #10
 8007518:	4648      	mov	r0, r9
 800751a:	f000 f9bb 	bl	8007894 <__multadd>
 800751e:	4605      	mov	r5, r0
 8007520:	e7f0      	b.n	8007504 <_dtoa_r+0xad4>
 8007522:	f1bb 0f00 	cmp.w	fp, #0
 8007526:	bfcc      	ite	gt
 8007528:	465e      	movgt	r6, fp
 800752a:	2601      	movle	r6, #1
 800752c:	4456      	add	r6, sl
 800752e:	2700      	movs	r7, #0
 8007530:	9902      	ldr	r1, [sp, #8]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	2201      	movs	r2, #1
 8007536:	4648      	mov	r0, r9
 8007538:	f000 fb50 	bl	8007bdc <__lshift>
 800753c:	4621      	mov	r1, r4
 800753e:	9002      	str	r0, [sp, #8]
 8007540:	f000 fbb8 	bl	8007cb4 <__mcmp>
 8007544:	2800      	cmp	r0, #0
 8007546:	dcb4      	bgt.n	80074b2 <_dtoa_r+0xa82>
 8007548:	d102      	bne.n	8007550 <_dtoa_r+0xb20>
 800754a:	9b00      	ldr	r3, [sp, #0]
 800754c:	07db      	lsls	r3, r3, #31
 800754e:	d4b0      	bmi.n	80074b2 <_dtoa_r+0xa82>
 8007550:	4633      	mov	r3, r6
 8007552:	461e      	mov	r6, r3
 8007554:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007558:	2a30      	cmp	r2, #48	@ 0x30
 800755a:	d0fa      	beq.n	8007552 <_dtoa_r+0xb22>
 800755c:	e4b5      	b.n	8006eca <_dtoa_r+0x49a>
 800755e:	459a      	cmp	sl, r3
 8007560:	d1a8      	bne.n	80074b4 <_dtoa_r+0xa84>
 8007562:	2331      	movs	r3, #49	@ 0x31
 8007564:	f108 0801 	add.w	r8, r8, #1
 8007568:	f88a 3000 	strb.w	r3, [sl]
 800756c:	e4ad      	b.n	8006eca <_dtoa_r+0x49a>
 800756e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007570:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80075cc <_dtoa_r+0xb9c>
 8007574:	b11b      	cbz	r3, 800757e <_dtoa_r+0xb4e>
 8007576:	f10a 0308 	add.w	r3, sl, #8
 800757a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	4650      	mov	r0, sl
 8007580:	b017      	add	sp, #92	@ 0x5c
 8007582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007586:	9b07      	ldr	r3, [sp, #28]
 8007588:	2b01      	cmp	r3, #1
 800758a:	f77f ae2e 	ble.w	80071ea <_dtoa_r+0x7ba>
 800758e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007590:	9308      	str	r3, [sp, #32]
 8007592:	2001      	movs	r0, #1
 8007594:	e64d      	b.n	8007232 <_dtoa_r+0x802>
 8007596:	f1bb 0f00 	cmp.w	fp, #0
 800759a:	f77f aed9 	ble.w	8007350 <_dtoa_r+0x920>
 800759e:	4656      	mov	r6, sl
 80075a0:	9802      	ldr	r0, [sp, #8]
 80075a2:	4621      	mov	r1, r4
 80075a4:	f7ff f9bb 	bl	800691e <quorem>
 80075a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80075ac:	f806 3b01 	strb.w	r3, [r6], #1
 80075b0:	eba6 020a 	sub.w	r2, r6, sl
 80075b4:	4593      	cmp	fp, r2
 80075b6:	ddb4      	ble.n	8007522 <_dtoa_r+0xaf2>
 80075b8:	9902      	ldr	r1, [sp, #8]
 80075ba:	2300      	movs	r3, #0
 80075bc:	220a      	movs	r2, #10
 80075be:	4648      	mov	r0, r9
 80075c0:	f000 f968 	bl	8007894 <__multadd>
 80075c4:	9002      	str	r0, [sp, #8]
 80075c6:	e7eb      	b.n	80075a0 <_dtoa_r+0xb70>
 80075c8:	08008b18 	.word	0x08008b18
 80075cc:	08008a9c 	.word	0x08008a9c

080075d0 <_free_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4605      	mov	r5, r0
 80075d4:	2900      	cmp	r1, #0
 80075d6:	d041      	beq.n	800765c <_free_r+0x8c>
 80075d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075dc:	1f0c      	subs	r4, r1, #4
 80075de:	2b00      	cmp	r3, #0
 80075e0:	bfb8      	it	lt
 80075e2:	18e4      	addlt	r4, r4, r3
 80075e4:	f000 f8e8 	bl	80077b8 <__malloc_lock>
 80075e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007660 <_free_r+0x90>)
 80075ea:	6813      	ldr	r3, [r2, #0]
 80075ec:	b933      	cbnz	r3, 80075fc <_free_r+0x2c>
 80075ee:	6063      	str	r3, [r4, #4]
 80075f0:	6014      	str	r4, [r2, #0]
 80075f2:	4628      	mov	r0, r5
 80075f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075f8:	f000 b8e4 	b.w	80077c4 <__malloc_unlock>
 80075fc:	42a3      	cmp	r3, r4
 80075fe:	d908      	bls.n	8007612 <_free_r+0x42>
 8007600:	6820      	ldr	r0, [r4, #0]
 8007602:	1821      	adds	r1, r4, r0
 8007604:	428b      	cmp	r3, r1
 8007606:	bf01      	itttt	eq
 8007608:	6819      	ldreq	r1, [r3, #0]
 800760a:	685b      	ldreq	r3, [r3, #4]
 800760c:	1809      	addeq	r1, r1, r0
 800760e:	6021      	streq	r1, [r4, #0]
 8007610:	e7ed      	b.n	80075ee <_free_r+0x1e>
 8007612:	461a      	mov	r2, r3
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	b10b      	cbz	r3, 800761c <_free_r+0x4c>
 8007618:	42a3      	cmp	r3, r4
 800761a:	d9fa      	bls.n	8007612 <_free_r+0x42>
 800761c:	6811      	ldr	r1, [r2, #0]
 800761e:	1850      	adds	r0, r2, r1
 8007620:	42a0      	cmp	r0, r4
 8007622:	d10b      	bne.n	800763c <_free_r+0x6c>
 8007624:	6820      	ldr	r0, [r4, #0]
 8007626:	4401      	add	r1, r0
 8007628:	1850      	adds	r0, r2, r1
 800762a:	4283      	cmp	r3, r0
 800762c:	6011      	str	r1, [r2, #0]
 800762e:	d1e0      	bne.n	80075f2 <_free_r+0x22>
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	6053      	str	r3, [r2, #4]
 8007636:	4408      	add	r0, r1
 8007638:	6010      	str	r0, [r2, #0]
 800763a:	e7da      	b.n	80075f2 <_free_r+0x22>
 800763c:	d902      	bls.n	8007644 <_free_r+0x74>
 800763e:	230c      	movs	r3, #12
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	e7d6      	b.n	80075f2 <_free_r+0x22>
 8007644:	6820      	ldr	r0, [r4, #0]
 8007646:	1821      	adds	r1, r4, r0
 8007648:	428b      	cmp	r3, r1
 800764a:	bf04      	itt	eq
 800764c:	6819      	ldreq	r1, [r3, #0]
 800764e:	685b      	ldreq	r3, [r3, #4]
 8007650:	6063      	str	r3, [r4, #4]
 8007652:	bf04      	itt	eq
 8007654:	1809      	addeq	r1, r1, r0
 8007656:	6021      	streq	r1, [r4, #0]
 8007658:	6054      	str	r4, [r2, #4]
 800765a:	e7ca      	b.n	80075f2 <_free_r+0x22>
 800765c:	bd38      	pop	{r3, r4, r5, pc}
 800765e:	bf00      	nop
 8007660:	2000048c 	.word	0x2000048c

08007664 <malloc>:
 8007664:	4b02      	ldr	r3, [pc, #8]	@ (8007670 <malloc+0xc>)
 8007666:	4601      	mov	r1, r0
 8007668:	6818      	ldr	r0, [r3, #0]
 800766a:	f000 b825 	b.w	80076b8 <_malloc_r>
 800766e:	bf00      	nop
 8007670:	20000020 	.word	0x20000020

08007674 <sbrk_aligned>:
 8007674:	b570      	push	{r4, r5, r6, lr}
 8007676:	4e0f      	ldr	r6, [pc, #60]	@ (80076b4 <sbrk_aligned+0x40>)
 8007678:	460c      	mov	r4, r1
 800767a:	6831      	ldr	r1, [r6, #0]
 800767c:	4605      	mov	r5, r0
 800767e:	b911      	cbnz	r1, 8007686 <sbrk_aligned+0x12>
 8007680:	f000 fe92 	bl	80083a8 <_sbrk_r>
 8007684:	6030      	str	r0, [r6, #0]
 8007686:	4621      	mov	r1, r4
 8007688:	4628      	mov	r0, r5
 800768a:	f000 fe8d 	bl	80083a8 <_sbrk_r>
 800768e:	1c43      	adds	r3, r0, #1
 8007690:	d103      	bne.n	800769a <sbrk_aligned+0x26>
 8007692:	f04f 34ff 	mov.w	r4, #4294967295
 8007696:	4620      	mov	r0, r4
 8007698:	bd70      	pop	{r4, r5, r6, pc}
 800769a:	1cc4      	adds	r4, r0, #3
 800769c:	f024 0403 	bic.w	r4, r4, #3
 80076a0:	42a0      	cmp	r0, r4
 80076a2:	d0f8      	beq.n	8007696 <sbrk_aligned+0x22>
 80076a4:	1a21      	subs	r1, r4, r0
 80076a6:	4628      	mov	r0, r5
 80076a8:	f000 fe7e 	bl	80083a8 <_sbrk_r>
 80076ac:	3001      	adds	r0, #1
 80076ae:	d1f2      	bne.n	8007696 <sbrk_aligned+0x22>
 80076b0:	e7ef      	b.n	8007692 <sbrk_aligned+0x1e>
 80076b2:	bf00      	nop
 80076b4:	20000488 	.word	0x20000488

080076b8 <_malloc_r>:
 80076b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076bc:	1ccd      	adds	r5, r1, #3
 80076be:	f025 0503 	bic.w	r5, r5, #3
 80076c2:	3508      	adds	r5, #8
 80076c4:	2d0c      	cmp	r5, #12
 80076c6:	bf38      	it	cc
 80076c8:	250c      	movcc	r5, #12
 80076ca:	2d00      	cmp	r5, #0
 80076cc:	4606      	mov	r6, r0
 80076ce:	db01      	blt.n	80076d4 <_malloc_r+0x1c>
 80076d0:	42a9      	cmp	r1, r5
 80076d2:	d904      	bls.n	80076de <_malloc_r+0x26>
 80076d4:	230c      	movs	r3, #12
 80076d6:	6033      	str	r3, [r6, #0]
 80076d8:	2000      	movs	r0, #0
 80076da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077b4 <_malloc_r+0xfc>
 80076e2:	f000 f869 	bl	80077b8 <__malloc_lock>
 80076e6:	f8d8 3000 	ldr.w	r3, [r8]
 80076ea:	461c      	mov	r4, r3
 80076ec:	bb44      	cbnz	r4, 8007740 <_malloc_r+0x88>
 80076ee:	4629      	mov	r1, r5
 80076f0:	4630      	mov	r0, r6
 80076f2:	f7ff ffbf 	bl	8007674 <sbrk_aligned>
 80076f6:	1c43      	adds	r3, r0, #1
 80076f8:	4604      	mov	r4, r0
 80076fa:	d158      	bne.n	80077ae <_malloc_r+0xf6>
 80076fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007700:	4627      	mov	r7, r4
 8007702:	2f00      	cmp	r7, #0
 8007704:	d143      	bne.n	800778e <_malloc_r+0xd6>
 8007706:	2c00      	cmp	r4, #0
 8007708:	d04b      	beq.n	80077a2 <_malloc_r+0xea>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	4639      	mov	r1, r7
 800770e:	4630      	mov	r0, r6
 8007710:	eb04 0903 	add.w	r9, r4, r3
 8007714:	f000 fe48 	bl	80083a8 <_sbrk_r>
 8007718:	4581      	cmp	r9, r0
 800771a:	d142      	bne.n	80077a2 <_malloc_r+0xea>
 800771c:	6821      	ldr	r1, [r4, #0]
 800771e:	1a6d      	subs	r5, r5, r1
 8007720:	4629      	mov	r1, r5
 8007722:	4630      	mov	r0, r6
 8007724:	f7ff ffa6 	bl	8007674 <sbrk_aligned>
 8007728:	3001      	adds	r0, #1
 800772a:	d03a      	beq.n	80077a2 <_malloc_r+0xea>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	442b      	add	r3, r5
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	f8d8 3000 	ldr.w	r3, [r8]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	bb62      	cbnz	r2, 8007794 <_malloc_r+0xdc>
 800773a:	f8c8 7000 	str.w	r7, [r8]
 800773e:	e00f      	b.n	8007760 <_malloc_r+0xa8>
 8007740:	6822      	ldr	r2, [r4, #0]
 8007742:	1b52      	subs	r2, r2, r5
 8007744:	d420      	bmi.n	8007788 <_malloc_r+0xd0>
 8007746:	2a0b      	cmp	r2, #11
 8007748:	d917      	bls.n	800777a <_malloc_r+0xc2>
 800774a:	1961      	adds	r1, r4, r5
 800774c:	42a3      	cmp	r3, r4
 800774e:	6025      	str	r5, [r4, #0]
 8007750:	bf18      	it	ne
 8007752:	6059      	strne	r1, [r3, #4]
 8007754:	6863      	ldr	r3, [r4, #4]
 8007756:	bf08      	it	eq
 8007758:	f8c8 1000 	streq.w	r1, [r8]
 800775c:	5162      	str	r2, [r4, r5]
 800775e:	604b      	str	r3, [r1, #4]
 8007760:	4630      	mov	r0, r6
 8007762:	f000 f82f 	bl	80077c4 <__malloc_unlock>
 8007766:	f104 000b 	add.w	r0, r4, #11
 800776a:	1d23      	adds	r3, r4, #4
 800776c:	f020 0007 	bic.w	r0, r0, #7
 8007770:	1ac2      	subs	r2, r0, r3
 8007772:	bf1c      	itt	ne
 8007774:	1a1b      	subne	r3, r3, r0
 8007776:	50a3      	strne	r3, [r4, r2]
 8007778:	e7af      	b.n	80076da <_malloc_r+0x22>
 800777a:	6862      	ldr	r2, [r4, #4]
 800777c:	42a3      	cmp	r3, r4
 800777e:	bf0c      	ite	eq
 8007780:	f8c8 2000 	streq.w	r2, [r8]
 8007784:	605a      	strne	r2, [r3, #4]
 8007786:	e7eb      	b.n	8007760 <_malloc_r+0xa8>
 8007788:	4623      	mov	r3, r4
 800778a:	6864      	ldr	r4, [r4, #4]
 800778c:	e7ae      	b.n	80076ec <_malloc_r+0x34>
 800778e:	463c      	mov	r4, r7
 8007790:	687f      	ldr	r7, [r7, #4]
 8007792:	e7b6      	b.n	8007702 <_malloc_r+0x4a>
 8007794:	461a      	mov	r2, r3
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	42a3      	cmp	r3, r4
 800779a:	d1fb      	bne.n	8007794 <_malloc_r+0xdc>
 800779c:	2300      	movs	r3, #0
 800779e:	6053      	str	r3, [r2, #4]
 80077a0:	e7de      	b.n	8007760 <_malloc_r+0xa8>
 80077a2:	230c      	movs	r3, #12
 80077a4:	6033      	str	r3, [r6, #0]
 80077a6:	4630      	mov	r0, r6
 80077a8:	f000 f80c 	bl	80077c4 <__malloc_unlock>
 80077ac:	e794      	b.n	80076d8 <_malloc_r+0x20>
 80077ae:	6005      	str	r5, [r0, #0]
 80077b0:	e7d6      	b.n	8007760 <_malloc_r+0xa8>
 80077b2:	bf00      	nop
 80077b4:	2000048c 	.word	0x2000048c

080077b8 <__malloc_lock>:
 80077b8:	4801      	ldr	r0, [pc, #4]	@ (80077c0 <__malloc_lock+0x8>)
 80077ba:	f7ff b8a0 	b.w	80068fe <__retarget_lock_acquire_recursive>
 80077be:	bf00      	nop
 80077c0:	20000484 	.word	0x20000484

080077c4 <__malloc_unlock>:
 80077c4:	4801      	ldr	r0, [pc, #4]	@ (80077cc <__malloc_unlock+0x8>)
 80077c6:	f7ff b89b 	b.w	8006900 <__retarget_lock_release_recursive>
 80077ca:	bf00      	nop
 80077cc:	20000484 	.word	0x20000484

080077d0 <_Balloc>:
 80077d0:	b570      	push	{r4, r5, r6, lr}
 80077d2:	69c6      	ldr	r6, [r0, #28]
 80077d4:	4604      	mov	r4, r0
 80077d6:	460d      	mov	r5, r1
 80077d8:	b976      	cbnz	r6, 80077f8 <_Balloc+0x28>
 80077da:	2010      	movs	r0, #16
 80077dc:	f7ff ff42 	bl	8007664 <malloc>
 80077e0:	4602      	mov	r2, r0
 80077e2:	61e0      	str	r0, [r4, #28]
 80077e4:	b920      	cbnz	r0, 80077f0 <_Balloc+0x20>
 80077e6:	4b18      	ldr	r3, [pc, #96]	@ (8007848 <_Balloc+0x78>)
 80077e8:	4818      	ldr	r0, [pc, #96]	@ (800784c <_Balloc+0x7c>)
 80077ea:	216b      	movs	r1, #107	@ 0x6b
 80077ec:	f000 fdec 	bl	80083c8 <__assert_func>
 80077f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077f4:	6006      	str	r6, [r0, #0]
 80077f6:	60c6      	str	r6, [r0, #12]
 80077f8:	69e6      	ldr	r6, [r4, #28]
 80077fa:	68f3      	ldr	r3, [r6, #12]
 80077fc:	b183      	cbz	r3, 8007820 <_Balloc+0x50>
 80077fe:	69e3      	ldr	r3, [r4, #28]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007806:	b9b8      	cbnz	r0, 8007838 <_Balloc+0x68>
 8007808:	2101      	movs	r1, #1
 800780a:	fa01 f605 	lsl.w	r6, r1, r5
 800780e:	1d72      	adds	r2, r6, #5
 8007810:	0092      	lsls	r2, r2, #2
 8007812:	4620      	mov	r0, r4
 8007814:	f000 fdf6 	bl	8008404 <_calloc_r>
 8007818:	b160      	cbz	r0, 8007834 <_Balloc+0x64>
 800781a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800781e:	e00e      	b.n	800783e <_Balloc+0x6e>
 8007820:	2221      	movs	r2, #33	@ 0x21
 8007822:	2104      	movs	r1, #4
 8007824:	4620      	mov	r0, r4
 8007826:	f000 fded 	bl	8008404 <_calloc_r>
 800782a:	69e3      	ldr	r3, [r4, #28]
 800782c:	60f0      	str	r0, [r6, #12]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1e4      	bne.n	80077fe <_Balloc+0x2e>
 8007834:	2000      	movs	r0, #0
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	6802      	ldr	r2, [r0, #0]
 800783a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800783e:	2300      	movs	r3, #0
 8007840:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007844:	e7f7      	b.n	8007836 <_Balloc+0x66>
 8007846:	bf00      	nop
 8007848:	08008aa9 	.word	0x08008aa9
 800784c:	08008b29 	.word	0x08008b29

08007850 <_Bfree>:
 8007850:	b570      	push	{r4, r5, r6, lr}
 8007852:	69c6      	ldr	r6, [r0, #28]
 8007854:	4605      	mov	r5, r0
 8007856:	460c      	mov	r4, r1
 8007858:	b976      	cbnz	r6, 8007878 <_Bfree+0x28>
 800785a:	2010      	movs	r0, #16
 800785c:	f7ff ff02 	bl	8007664 <malloc>
 8007860:	4602      	mov	r2, r0
 8007862:	61e8      	str	r0, [r5, #28]
 8007864:	b920      	cbnz	r0, 8007870 <_Bfree+0x20>
 8007866:	4b09      	ldr	r3, [pc, #36]	@ (800788c <_Bfree+0x3c>)
 8007868:	4809      	ldr	r0, [pc, #36]	@ (8007890 <_Bfree+0x40>)
 800786a:	218f      	movs	r1, #143	@ 0x8f
 800786c:	f000 fdac 	bl	80083c8 <__assert_func>
 8007870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007874:	6006      	str	r6, [r0, #0]
 8007876:	60c6      	str	r6, [r0, #12]
 8007878:	b13c      	cbz	r4, 800788a <_Bfree+0x3a>
 800787a:	69eb      	ldr	r3, [r5, #28]
 800787c:	6862      	ldr	r2, [r4, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007884:	6021      	str	r1, [r4, #0]
 8007886:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800788a:	bd70      	pop	{r4, r5, r6, pc}
 800788c:	08008aa9 	.word	0x08008aa9
 8007890:	08008b29 	.word	0x08008b29

08007894 <__multadd>:
 8007894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007898:	690d      	ldr	r5, [r1, #16]
 800789a:	4607      	mov	r7, r0
 800789c:	460c      	mov	r4, r1
 800789e:	461e      	mov	r6, r3
 80078a0:	f101 0c14 	add.w	ip, r1, #20
 80078a4:	2000      	movs	r0, #0
 80078a6:	f8dc 3000 	ldr.w	r3, [ip]
 80078aa:	b299      	uxth	r1, r3
 80078ac:	fb02 6101 	mla	r1, r2, r1, r6
 80078b0:	0c1e      	lsrs	r6, r3, #16
 80078b2:	0c0b      	lsrs	r3, r1, #16
 80078b4:	fb02 3306 	mla	r3, r2, r6, r3
 80078b8:	b289      	uxth	r1, r1
 80078ba:	3001      	adds	r0, #1
 80078bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078c0:	4285      	cmp	r5, r0
 80078c2:	f84c 1b04 	str.w	r1, [ip], #4
 80078c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078ca:	dcec      	bgt.n	80078a6 <__multadd+0x12>
 80078cc:	b30e      	cbz	r6, 8007912 <__multadd+0x7e>
 80078ce:	68a3      	ldr	r3, [r4, #8]
 80078d0:	42ab      	cmp	r3, r5
 80078d2:	dc19      	bgt.n	8007908 <__multadd+0x74>
 80078d4:	6861      	ldr	r1, [r4, #4]
 80078d6:	4638      	mov	r0, r7
 80078d8:	3101      	adds	r1, #1
 80078da:	f7ff ff79 	bl	80077d0 <_Balloc>
 80078de:	4680      	mov	r8, r0
 80078e0:	b928      	cbnz	r0, 80078ee <__multadd+0x5a>
 80078e2:	4602      	mov	r2, r0
 80078e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007918 <__multadd+0x84>)
 80078e6:	480d      	ldr	r0, [pc, #52]	@ (800791c <__multadd+0x88>)
 80078e8:	21ba      	movs	r1, #186	@ 0xba
 80078ea:	f000 fd6d 	bl	80083c8 <__assert_func>
 80078ee:	6922      	ldr	r2, [r4, #16]
 80078f0:	3202      	adds	r2, #2
 80078f2:	f104 010c 	add.w	r1, r4, #12
 80078f6:	0092      	lsls	r2, r2, #2
 80078f8:	300c      	adds	r0, #12
 80078fa:	f7ff f802 	bl	8006902 <memcpy>
 80078fe:	4621      	mov	r1, r4
 8007900:	4638      	mov	r0, r7
 8007902:	f7ff ffa5 	bl	8007850 <_Bfree>
 8007906:	4644      	mov	r4, r8
 8007908:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800790c:	3501      	adds	r5, #1
 800790e:	615e      	str	r6, [r3, #20]
 8007910:	6125      	str	r5, [r4, #16]
 8007912:	4620      	mov	r0, r4
 8007914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007918:	08008b18 	.word	0x08008b18
 800791c:	08008b29 	.word	0x08008b29

08007920 <__hi0bits>:
 8007920:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007924:	4603      	mov	r3, r0
 8007926:	bf36      	itet	cc
 8007928:	0403      	lslcc	r3, r0, #16
 800792a:	2000      	movcs	r0, #0
 800792c:	2010      	movcc	r0, #16
 800792e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007932:	bf3c      	itt	cc
 8007934:	021b      	lslcc	r3, r3, #8
 8007936:	3008      	addcc	r0, #8
 8007938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800793c:	bf3c      	itt	cc
 800793e:	011b      	lslcc	r3, r3, #4
 8007940:	3004      	addcc	r0, #4
 8007942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007946:	bf3c      	itt	cc
 8007948:	009b      	lslcc	r3, r3, #2
 800794a:	3002      	addcc	r0, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	db05      	blt.n	800795c <__hi0bits+0x3c>
 8007950:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007954:	f100 0001 	add.w	r0, r0, #1
 8007958:	bf08      	it	eq
 800795a:	2020      	moveq	r0, #32
 800795c:	4770      	bx	lr

0800795e <__lo0bits>:
 800795e:	6803      	ldr	r3, [r0, #0]
 8007960:	4602      	mov	r2, r0
 8007962:	f013 0007 	ands.w	r0, r3, #7
 8007966:	d00b      	beq.n	8007980 <__lo0bits+0x22>
 8007968:	07d9      	lsls	r1, r3, #31
 800796a:	d421      	bmi.n	80079b0 <__lo0bits+0x52>
 800796c:	0798      	lsls	r0, r3, #30
 800796e:	bf49      	itett	mi
 8007970:	085b      	lsrmi	r3, r3, #1
 8007972:	089b      	lsrpl	r3, r3, #2
 8007974:	2001      	movmi	r0, #1
 8007976:	6013      	strmi	r3, [r2, #0]
 8007978:	bf5c      	itt	pl
 800797a:	6013      	strpl	r3, [r2, #0]
 800797c:	2002      	movpl	r0, #2
 800797e:	4770      	bx	lr
 8007980:	b299      	uxth	r1, r3
 8007982:	b909      	cbnz	r1, 8007988 <__lo0bits+0x2a>
 8007984:	0c1b      	lsrs	r3, r3, #16
 8007986:	2010      	movs	r0, #16
 8007988:	b2d9      	uxtb	r1, r3
 800798a:	b909      	cbnz	r1, 8007990 <__lo0bits+0x32>
 800798c:	3008      	adds	r0, #8
 800798e:	0a1b      	lsrs	r3, r3, #8
 8007990:	0719      	lsls	r1, r3, #28
 8007992:	bf04      	itt	eq
 8007994:	091b      	lsreq	r3, r3, #4
 8007996:	3004      	addeq	r0, #4
 8007998:	0799      	lsls	r1, r3, #30
 800799a:	bf04      	itt	eq
 800799c:	089b      	lsreq	r3, r3, #2
 800799e:	3002      	addeq	r0, #2
 80079a0:	07d9      	lsls	r1, r3, #31
 80079a2:	d403      	bmi.n	80079ac <__lo0bits+0x4e>
 80079a4:	085b      	lsrs	r3, r3, #1
 80079a6:	f100 0001 	add.w	r0, r0, #1
 80079aa:	d003      	beq.n	80079b4 <__lo0bits+0x56>
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	4770      	bx	lr
 80079b0:	2000      	movs	r0, #0
 80079b2:	4770      	bx	lr
 80079b4:	2020      	movs	r0, #32
 80079b6:	4770      	bx	lr

080079b8 <__i2b>:
 80079b8:	b510      	push	{r4, lr}
 80079ba:	460c      	mov	r4, r1
 80079bc:	2101      	movs	r1, #1
 80079be:	f7ff ff07 	bl	80077d0 <_Balloc>
 80079c2:	4602      	mov	r2, r0
 80079c4:	b928      	cbnz	r0, 80079d2 <__i2b+0x1a>
 80079c6:	4b05      	ldr	r3, [pc, #20]	@ (80079dc <__i2b+0x24>)
 80079c8:	4805      	ldr	r0, [pc, #20]	@ (80079e0 <__i2b+0x28>)
 80079ca:	f240 1145 	movw	r1, #325	@ 0x145
 80079ce:	f000 fcfb 	bl	80083c8 <__assert_func>
 80079d2:	2301      	movs	r3, #1
 80079d4:	6144      	str	r4, [r0, #20]
 80079d6:	6103      	str	r3, [r0, #16]
 80079d8:	bd10      	pop	{r4, pc}
 80079da:	bf00      	nop
 80079dc:	08008b18 	.word	0x08008b18
 80079e0:	08008b29 	.word	0x08008b29

080079e4 <__multiply>:
 80079e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e8:	4617      	mov	r7, r2
 80079ea:	690a      	ldr	r2, [r1, #16]
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	bfa8      	it	ge
 80079f2:	463b      	movge	r3, r7
 80079f4:	4689      	mov	r9, r1
 80079f6:	bfa4      	itt	ge
 80079f8:	460f      	movge	r7, r1
 80079fa:	4699      	movge	r9, r3
 80079fc:	693d      	ldr	r5, [r7, #16]
 80079fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	eb05 060a 	add.w	r6, r5, sl
 8007a0a:	42b3      	cmp	r3, r6
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	bfb8      	it	lt
 8007a10:	3101      	addlt	r1, #1
 8007a12:	f7ff fedd 	bl	80077d0 <_Balloc>
 8007a16:	b930      	cbnz	r0, 8007a26 <__multiply+0x42>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	4b41      	ldr	r3, [pc, #260]	@ (8007b20 <__multiply+0x13c>)
 8007a1c:	4841      	ldr	r0, [pc, #260]	@ (8007b24 <__multiply+0x140>)
 8007a1e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a22:	f000 fcd1 	bl	80083c8 <__assert_func>
 8007a26:	f100 0414 	add.w	r4, r0, #20
 8007a2a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007a2e:	4623      	mov	r3, r4
 8007a30:	2200      	movs	r2, #0
 8007a32:	4573      	cmp	r3, lr
 8007a34:	d320      	bcc.n	8007a78 <__multiply+0x94>
 8007a36:	f107 0814 	add.w	r8, r7, #20
 8007a3a:	f109 0114 	add.w	r1, r9, #20
 8007a3e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007a42:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007a46:	9302      	str	r3, [sp, #8]
 8007a48:	1beb      	subs	r3, r5, r7
 8007a4a:	3b15      	subs	r3, #21
 8007a4c:	f023 0303 	bic.w	r3, r3, #3
 8007a50:	3304      	adds	r3, #4
 8007a52:	3715      	adds	r7, #21
 8007a54:	42bd      	cmp	r5, r7
 8007a56:	bf38      	it	cc
 8007a58:	2304      	movcc	r3, #4
 8007a5a:	9301      	str	r3, [sp, #4]
 8007a5c:	9b02      	ldr	r3, [sp, #8]
 8007a5e:	9103      	str	r1, [sp, #12]
 8007a60:	428b      	cmp	r3, r1
 8007a62:	d80c      	bhi.n	8007a7e <__multiply+0x9a>
 8007a64:	2e00      	cmp	r6, #0
 8007a66:	dd03      	ble.n	8007a70 <__multiply+0x8c>
 8007a68:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d055      	beq.n	8007b1c <__multiply+0x138>
 8007a70:	6106      	str	r6, [r0, #16]
 8007a72:	b005      	add	sp, #20
 8007a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a78:	f843 2b04 	str.w	r2, [r3], #4
 8007a7c:	e7d9      	b.n	8007a32 <__multiply+0x4e>
 8007a7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a82:	f1ba 0f00 	cmp.w	sl, #0
 8007a86:	d01f      	beq.n	8007ac8 <__multiply+0xe4>
 8007a88:	46c4      	mov	ip, r8
 8007a8a:	46a1      	mov	r9, r4
 8007a8c:	2700      	movs	r7, #0
 8007a8e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007a92:	f8d9 3000 	ldr.w	r3, [r9]
 8007a96:	fa1f fb82 	uxth.w	fp, r2
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007aa0:	443b      	add	r3, r7
 8007aa2:	f8d9 7000 	ldr.w	r7, [r9]
 8007aa6:	0c12      	lsrs	r2, r2, #16
 8007aa8:	0c3f      	lsrs	r7, r7, #16
 8007aaa:	fb0a 7202 	mla	r2, sl, r2, r7
 8007aae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ab8:	4565      	cmp	r5, ip
 8007aba:	f849 3b04 	str.w	r3, [r9], #4
 8007abe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007ac2:	d8e4      	bhi.n	8007a8e <__multiply+0xaa>
 8007ac4:	9b01      	ldr	r3, [sp, #4]
 8007ac6:	50e7      	str	r7, [r4, r3]
 8007ac8:	9b03      	ldr	r3, [sp, #12]
 8007aca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ace:	3104      	adds	r1, #4
 8007ad0:	f1b9 0f00 	cmp.w	r9, #0
 8007ad4:	d020      	beq.n	8007b18 <__multiply+0x134>
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	4647      	mov	r7, r8
 8007ada:	46a4      	mov	ip, r4
 8007adc:	f04f 0a00 	mov.w	sl, #0
 8007ae0:	f8b7 b000 	ldrh.w	fp, [r7]
 8007ae4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007ae8:	fb09 220b 	mla	r2, r9, fp, r2
 8007aec:	4452      	add	r2, sl
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007af4:	f84c 3b04 	str.w	r3, [ip], #4
 8007af8:	f857 3b04 	ldr.w	r3, [r7], #4
 8007afc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b00:	f8bc 3000 	ldrh.w	r3, [ip]
 8007b04:	fb09 330a 	mla	r3, r9, sl, r3
 8007b08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007b0c:	42bd      	cmp	r5, r7
 8007b0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b12:	d8e5      	bhi.n	8007ae0 <__multiply+0xfc>
 8007b14:	9a01      	ldr	r2, [sp, #4]
 8007b16:	50a3      	str	r3, [r4, r2]
 8007b18:	3404      	adds	r4, #4
 8007b1a:	e79f      	b.n	8007a5c <__multiply+0x78>
 8007b1c:	3e01      	subs	r6, #1
 8007b1e:	e7a1      	b.n	8007a64 <__multiply+0x80>
 8007b20:	08008b18 	.word	0x08008b18
 8007b24:	08008b29 	.word	0x08008b29

08007b28 <__pow5mult>:
 8007b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b2c:	4615      	mov	r5, r2
 8007b2e:	f012 0203 	ands.w	r2, r2, #3
 8007b32:	4607      	mov	r7, r0
 8007b34:	460e      	mov	r6, r1
 8007b36:	d007      	beq.n	8007b48 <__pow5mult+0x20>
 8007b38:	4c25      	ldr	r4, [pc, #148]	@ (8007bd0 <__pow5mult+0xa8>)
 8007b3a:	3a01      	subs	r2, #1
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b42:	f7ff fea7 	bl	8007894 <__multadd>
 8007b46:	4606      	mov	r6, r0
 8007b48:	10ad      	asrs	r5, r5, #2
 8007b4a:	d03d      	beq.n	8007bc8 <__pow5mult+0xa0>
 8007b4c:	69fc      	ldr	r4, [r7, #28]
 8007b4e:	b97c      	cbnz	r4, 8007b70 <__pow5mult+0x48>
 8007b50:	2010      	movs	r0, #16
 8007b52:	f7ff fd87 	bl	8007664 <malloc>
 8007b56:	4602      	mov	r2, r0
 8007b58:	61f8      	str	r0, [r7, #28]
 8007b5a:	b928      	cbnz	r0, 8007b68 <__pow5mult+0x40>
 8007b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8007bd4 <__pow5mult+0xac>)
 8007b5e:	481e      	ldr	r0, [pc, #120]	@ (8007bd8 <__pow5mult+0xb0>)
 8007b60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b64:	f000 fc30 	bl	80083c8 <__assert_func>
 8007b68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b6c:	6004      	str	r4, [r0, #0]
 8007b6e:	60c4      	str	r4, [r0, #12]
 8007b70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b78:	b94c      	cbnz	r4, 8007b8e <__pow5mult+0x66>
 8007b7a:	f240 2171 	movw	r1, #625	@ 0x271
 8007b7e:	4638      	mov	r0, r7
 8007b80:	f7ff ff1a 	bl	80079b8 <__i2b>
 8007b84:	2300      	movs	r3, #0
 8007b86:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	6003      	str	r3, [r0, #0]
 8007b8e:	f04f 0900 	mov.w	r9, #0
 8007b92:	07eb      	lsls	r3, r5, #31
 8007b94:	d50a      	bpl.n	8007bac <__pow5mult+0x84>
 8007b96:	4631      	mov	r1, r6
 8007b98:	4622      	mov	r2, r4
 8007b9a:	4638      	mov	r0, r7
 8007b9c:	f7ff ff22 	bl	80079e4 <__multiply>
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4680      	mov	r8, r0
 8007ba4:	4638      	mov	r0, r7
 8007ba6:	f7ff fe53 	bl	8007850 <_Bfree>
 8007baa:	4646      	mov	r6, r8
 8007bac:	106d      	asrs	r5, r5, #1
 8007bae:	d00b      	beq.n	8007bc8 <__pow5mult+0xa0>
 8007bb0:	6820      	ldr	r0, [r4, #0]
 8007bb2:	b938      	cbnz	r0, 8007bc4 <__pow5mult+0x9c>
 8007bb4:	4622      	mov	r2, r4
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	4638      	mov	r0, r7
 8007bba:	f7ff ff13 	bl	80079e4 <__multiply>
 8007bbe:	6020      	str	r0, [r4, #0]
 8007bc0:	f8c0 9000 	str.w	r9, [r0]
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	e7e4      	b.n	8007b92 <__pow5mult+0x6a>
 8007bc8:	4630      	mov	r0, r6
 8007bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bce:	bf00      	nop
 8007bd0:	08008bdc 	.word	0x08008bdc
 8007bd4:	08008aa9 	.word	0x08008aa9
 8007bd8:	08008b29 	.word	0x08008b29

08007bdc <__lshift>:
 8007bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be0:	460c      	mov	r4, r1
 8007be2:	6849      	ldr	r1, [r1, #4]
 8007be4:	6923      	ldr	r3, [r4, #16]
 8007be6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bea:	68a3      	ldr	r3, [r4, #8]
 8007bec:	4607      	mov	r7, r0
 8007bee:	4691      	mov	r9, r2
 8007bf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bf4:	f108 0601 	add.w	r6, r8, #1
 8007bf8:	42b3      	cmp	r3, r6
 8007bfa:	db0b      	blt.n	8007c14 <__lshift+0x38>
 8007bfc:	4638      	mov	r0, r7
 8007bfe:	f7ff fde7 	bl	80077d0 <_Balloc>
 8007c02:	4605      	mov	r5, r0
 8007c04:	b948      	cbnz	r0, 8007c1a <__lshift+0x3e>
 8007c06:	4602      	mov	r2, r0
 8007c08:	4b28      	ldr	r3, [pc, #160]	@ (8007cac <__lshift+0xd0>)
 8007c0a:	4829      	ldr	r0, [pc, #164]	@ (8007cb0 <__lshift+0xd4>)
 8007c0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c10:	f000 fbda 	bl	80083c8 <__assert_func>
 8007c14:	3101      	adds	r1, #1
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	e7ee      	b.n	8007bf8 <__lshift+0x1c>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f100 0114 	add.w	r1, r0, #20
 8007c20:	f100 0210 	add.w	r2, r0, #16
 8007c24:	4618      	mov	r0, r3
 8007c26:	4553      	cmp	r3, sl
 8007c28:	db33      	blt.n	8007c92 <__lshift+0xb6>
 8007c2a:	6920      	ldr	r0, [r4, #16]
 8007c2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c30:	f104 0314 	add.w	r3, r4, #20
 8007c34:	f019 091f 	ands.w	r9, r9, #31
 8007c38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c40:	d02b      	beq.n	8007c9a <__lshift+0xbe>
 8007c42:	f1c9 0e20 	rsb	lr, r9, #32
 8007c46:	468a      	mov	sl, r1
 8007c48:	2200      	movs	r2, #0
 8007c4a:	6818      	ldr	r0, [r3, #0]
 8007c4c:	fa00 f009 	lsl.w	r0, r0, r9
 8007c50:	4310      	orrs	r0, r2
 8007c52:	f84a 0b04 	str.w	r0, [sl], #4
 8007c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c5a:	459c      	cmp	ip, r3
 8007c5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c60:	d8f3      	bhi.n	8007c4a <__lshift+0x6e>
 8007c62:	ebac 0304 	sub.w	r3, ip, r4
 8007c66:	3b15      	subs	r3, #21
 8007c68:	f023 0303 	bic.w	r3, r3, #3
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	f104 0015 	add.w	r0, r4, #21
 8007c72:	4560      	cmp	r0, ip
 8007c74:	bf88      	it	hi
 8007c76:	2304      	movhi	r3, #4
 8007c78:	50ca      	str	r2, [r1, r3]
 8007c7a:	b10a      	cbz	r2, 8007c80 <__lshift+0xa4>
 8007c7c:	f108 0602 	add.w	r6, r8, #2
 8007c80:	3e01      	subs	r6, #1
 8007c82:	4638      	mov	r0, r7
 8007c84:	612e      	str	r6, [r5, #16]
 8007c86:	4621      	mov	r1, r4
 8007c88:	f7ff fde2 	bl	8007850 <_Bfree>
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c92:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c96:	3301      	adds	r3, #1
 8007c98:	e7c5      	b.n	8007c26 <__lshift+0x4a>
 8007c9a:	3904      	subs	r1, #4
 8007c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ca0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ca4:	459c      	cmp	ip, r3
 8007ca6:	d8f9      	bhi.n	8007c9c <__lshift+0xc0>
 8007ca8:	e7ea      	b.n	8007c80 <__lshift+0xa4>
 8007caa:	bf00      	nop
 8007cac:	08008b18 	.word	0x08008b18
 8007cb0:	08008b29 	.word	0x08008b29

08007cb4 <__mcmp>:
 8007cb4:	690a      	ldr	r2, [r1, #16]
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	6900      	ldr	r0, [r0, #16]
 8007cba:	1a80      	subs	r0, r0, r2
 8007cbc:	b530      	push	{r4, r5, lr}
 8007cbe:	d10e      	bne.n	8007cde <__mcmp+0x2a>
 8007cc0:	3314      	adds	r3, #20
 8007cc2:	3114      	adds	r1, #20
 8007cc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ccc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007cd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007cd4:	4295      	cmp	r5, r2
 8007cd6:	d003      	beq.n	8007ce0 <__mcmp+0x2c>
 8007cd8:	d205      	bcs.n	8007ce6 <__mcmp+0x32>
 8007cda:	f04f 30ff 	mov.w	r0, #4294967295
 8007cde:	bd30      	pop	{r4, r5, pc}
 8007ce0:	42a3      	cmp	r3, r4
 8007ce2:	d3f3      	bcc.n	8007ccc <__mcmp+0x18>
 8007ce4:	e7fb      	b.n	8007cde <__mcmp+0x2a>
 8007ce6:	2001      	movs	r0, #1
 8007ce8:	e7f9      	b.n	8007cde <__mcmp+0x2a>
	...

08007cec <__mdiff>:
 8007cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf0:	4689      	mov	r9, r1
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	4648      	mov	r0, r9
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	f7ff ffdb 	bl	8007cb4 <__mcmp>
 8007cfe:	1e05      	subs	r5, r0, #0
 8007d00:	d112      	bne.n	8007d28 <__mdiff+0x3c>
 8007d02:	4629      	mov	r1, r5
 8007d04:	4630      	mov	r0, r6
 8007d06:	f7ff fd63 	bl	80077d0 <_Balloc>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	b928      	cbnz	r0, 8007d1a <__mdiff+0x2e>
 8007d0e:	4b3f      	ldr	r3, [pc, #252]	@ (8007e0c <__mdiff+0x120>)
 8007d10:	f240 2137 	movw	r1, #567	@ 0x237
 8007d14:	483e      	ldr	r0, [pc, #248]	@ (8007e10 <__mdiff+0x124>)
 8007d16:	f000 fb57 	bl	80083c8 <__assert_func>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d20:	4610      	mov	r0, r2
 8007d22:	b003      	add	sp, #12
 8007d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d28:	bfbc      	itt	lt
 8007d2a:	464b      	movlt	r3, r9
 8007d2c:	46a1      	movlt	r9, r4
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d34:	bfba      	itte	lt
 8007d36:	461c      	movlt	r4, r3
 8007d38:	2501      	movlt	r5, #1
 8007d3a:	2500      	movge	r5, #0
 8007d3c:	f7ff fd48 	bl	80077d0 <_Balloc>
 8007d40:	4602      	mov	r2, r0
 8007d42:	b918      	cbnz	r0, 8007d4c <__mdiff+0x60>
 8007d44:	4b31      	ldr	r3, [pc, #196]	@ (8007e0c <__mdiff+0x120>)
 8007d46:	f240 2145 	movw	r1, #581	@ 0x245
 8007d4a:	e7e3      	b.n	8007d14 <__mdiff+0x28>
 8007d4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d50:	6926      	ldr	r6, [r4, #16]
 8007d52:	60c5      	str	r5, [r0, #12]
 8007d54:	f109 0310 	add.w	r3, r9, #16
 8007d58:	f109 0514 	add.w	r5, r9, #20
 8007d5c:	f104 0e14 	add.w	lr, r4, #20
 8007d60:	f100 0b14 	add.w	fp, r0, #20
 8007d64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	46d9      	mov	r9, fp
 8007d70:	f04f 0c00 	mov.w	ip, #0
 8007d74:	9b01      	ldr	r3, [sp, #4]
 8007d76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d7e:	9301      	str	r3, [sp, #4]
 8007d80:	fa1f f38a 	uxth.w	r3, sl
 8007d84:	4619      	mov	r1, r3
 8007d86:	b283      	uxth	r3, r0
 8007d88:	1acb      	subs	r3, r1, r3
 8007d8a:	0c00      	lsrs	r0, r0, #16
 8007d8c:	4463      	add	r3, ip
 8007d8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007d92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007d9c:	4576      	cmp	r6, lr
 8007d9e:	f849 3b04 	str.w	r3, [r9], #4
 8007da2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007da6:	d8e5      	bhi.n	8007d74 <__mdiff+0x88>
 8007da8:	1b33      	subs	r3, r6, r4
 8007daa:	3b15      	subs	r3, #21
 8007dac:	f023 0303 	bic.w	r3, r3, #3
 8007db0:	3415      	adds	r4, #21
 8007db2:	3304      	adds	r3, #4
 8007db4:	42a6      	cmp	r6, r4
 8007db6:	bf38      	it	cc
 8007db8:	2304      	movcc	r3, #4
 8007dba:	441d      	add	r5, r3
 8007dbc:	445b      	add	r3, fp
 8007dbe:	461e      	mov	r6, r3
 8007dc0:	462c      	mov	r4, r5
 8007dc2:	4544      	cmp	r4, r8
 8007dc4:	d30e      	bcc.n	8007de4 <__mdiff+0xf8>
 8007dc6:	f108 0103 	add.w	r1, r8, #3
 8007dca:	1b49      	subs	r1, r1, r5
 8007dcc:	f021 0103 	bic.w	r1, r1, #3
 8007dd0:	3d03      	subs	r5, #3
 8007dd2:	45a8      	cmp	r8, r5
 8007dd4:	bf38      	it	cc
 8007dd6:	2100      	movcc	r1, #0
 8007dd8:	440b      	add	r3, r1
 8007dda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007dde:	b191      	cbz	r1, 8007e06 <__mdiff+0x11a>
 8007de0:	6117      	str	r7, [r2, #16]
 8007de2:	e79d      	b.n	8007d20 <__mdiff+0x34>
 8007de4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007de8:	46e6      	mov	lr, ip
 8007dea:	0c08      	lsrs	r0, r1, #16
 8007dec:	fa1c fc81 	uxtah	ip, ip, r1
 8007df0:	4471      	add	r1, lr
 8007df2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007df6:	b289      	uxth	r1, r1
 8007df8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007dfc:	f846 1b04 	str.w	r1, [r6], #4
 8007e00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e04:	e7dd      	b.n	8007dc2 <__mdiff+0xd6>
 8007e06:	3f01      	subs	r7, #1
 8007e08:	e7e7      	b.n	8007dda <__mdiff+0xee>
 8007e0a:	bf00      	nop
 8007e0c:	08008b18 	.word	0x08008b18
 8007e10:	08008b29 	.word	0x08008b29

08007e14 <__d2b>:
 8007e14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e18:	460f      	mov	r7, r1
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	ec59 8b10 	vmov	r8, r9, d0
 8007e20:	4616      	mov	r6, r2
 8007e22:	f7ff fcd5 	bl	80077d0 <_Balloc>
 8007e26:	4604      	mov	r4, r0
 8007e28:	b930      	cbnz	r0, 8007e38 <__d2b+0x24>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	4b23      	ldr	r3, [pc, #140]	@ (8007ebc <__d2b+0xa8>)
 8007e2e:	4824      	ldr	r0, [pc, #144]	@ (8007ec0 <__d2b+0xac>)
 8007e30:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e34:	f000 fac8 	bl	80083c8 <__assert_func>
 8007e38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e40:	b10d      	cbz	r5, 8007e46 <__d2b+0x32>
 8007e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	f1b8 0300 	subs.w	r3, r8, #0
 8007e4c:	d023      	beq.n	8007e96 <__d2b+0x82>
 8007e4e:	4668      	mov	r0, sp
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	f7ff fd84 	bl	800795e <__lo0bits>
 8007e56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e5a:	b1d0      	cbz	r0, 8007e92 <__d2b+0x7e>
 8007e5c:	f1c0 0320 	rsb	r3, r0, #32
 8007e60:	fa02 f303 	lsl.w	r3, r2, r3
 8007e64:	430b      	orrs	r3, r1
 8007e66:	40c2      	lsrs	r2, r0
 8007e68:	6163      	str	r3, [r4, #20]
 8007e6a:	9201      	str	r2, [sp, #4]
 8007e6c:	9b01      	ldr	r3, [sp, #4]
 8007e6e:	61a3      	str	r3, [r4, #24]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bf0c      	ite	eq
 8007e74:	2201      	moveq	r2, #1
 8007e76:	2202      	movne	r2, #2
 8007e78:	6122      	str	r2, [r4, #16]
 8007e7a:	b1a5      	cbz	r5, 8007ea6 <__d2b+0x92>
 8007e7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e80:	4405      	add	r5, r0
 8007e82:	603d      	str	r5, [r7, #0]
 8007e84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e88:	6030      	str	r0, [r6, #0]
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	b003      	add	sp, #12
 8007e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e92:	6161      	str	r1, [r4, #20]
 8007e94:	e7ea      	b.n	8007e6c <__d2b+0x58>
 8007e96:	a801      	add	r0, sp, #4
 8007e98:	f7ff fd61 	bl	800795e <__lo0bits>
 8007e9c:	9b01      	ldr	r3, [sp, #4]
 8007e9e:	6163      	str	r3, [r4, #20]
 8007ea0:	3020      	adds	r0, #32
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	e7e8      	b.n	8007e78 <__d2b+0x64>
 8007ea6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007eaa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007eae:	6038      	str	r0, [r7, #0]
 8007eb0:	6918      	ldr	r0, [r3, #16]
 8007eb2:	f7ff fd35 	bl	8007920 <__hi0bits>
 8007eb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007eba:	e7e5      	b.n	8007e88 <__d2b+0x74>
 8007ebc:	08008b18 	.word	0x08008b18
 8007ec0:	08008b29 	.word	0x08008b29

08007ec4 <__sfputc_r>:
 8007ec4:	6893      	ldr	r3, [r2, #8]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	b410      	push	{r4}
 8007ecc:	6093      	str	r3, [r2, #8]
 8007ece:	da08      	bge.n	8007ee2 <__sfputc_r+0x1e>
 8007ed0:	6994      	ldr	r4, [r2, #24]
 8007ed2:	42a3      	cmp	r3, r4
 8007ed4:	db01      	blt.n	8007eda <__sfputc_r+0x16>
 8007ed6:	290a      	cmp	r1, #10
 8007ed8:	d103      	bne.n	8007ee2 <__sfputc_r+0x1e>
 8007eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ede:	f7fe bbfc 	b.w	80066da <__swbuf_r>
 8007ee2:	6813      	ldr	r3, [r2, #0]
 8007ee4:	1c58      	adds	r0, r3, #1
 8007ee6:	6010      	str	r0, [r2, #0]
 8007ee8:	7019      	strb	r1, [r3, #0]
 8007eea:	4608      	mov	r0, r1
 8007eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <__sfputs_r>:
 8007ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	460f      	mov	r7, r1
 8007ef8:	4614      	mov	r4, r2
 8007efa:	18d5      	adds	r5, r2, r3
 8007efc:	42ac      	cmp	r4, r5
 8007efe:	d101      	bne.n	8007f04 <__sfputs_r+0x12>
 8007f00:	2000      	movs	r0, #0
 8007f02:	e007      	b.n	8007f14 <__sfputs_r+0x22>
 8007f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f08:	463a      	mov	r2, r7
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f7ff ffda 	bl	8007ec4 <__sfputc_r>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d1f3      	bne.n	8007efc <__sfputs_r+0xa>
 8007f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f18 <_vfiprintf_r>:
 8007f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	460d      	mov	r5, r1
 8007f1e:	b09d      	sub	sp, #116	@ 0x74
 8007f20:	4614      	mov	r4, r2
 8007f22:	4698      	mov	r8, r3
 8007f24:	4606      	mov	r6, r0
 8007f26:	b118      	cbz	r0, 8007f30 <_vfiprintf_r+0x18>
 8007f28:	6a03      	ldr	r3, [r0, #32]
 8007f2a:	b90b      	cbnz	r3, 8007f30 <_vfiprintf_r+0x18>
 8007f2c:	f7fe faec 	bl	8006508 <__sinit>
 8007f30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f32:	07d9      	lsls	r1, r3, #31
 8007f34:	d405      	bmi.n	8007f42 <_vfiprintf_r+0x2a>
 8007f36:	89ab      	ldrh	r3, [r5, #12]
 8007f38:	059a      	lsls	r2, r3, #22
 8007f3a:	d402      	bmi.n	8007f42 <_vfiprintf_r+0x2a>
 8007f3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f3e:	f7fe fcde 	bl	80068fe <__retarget_lock_acquire_recursive>
 8007f42:	89ab      	ldrh	r3, [r5, #12]
 8007f44:	071b      	lsls	r3, r3, #28
 8007f46:	d501      	bpl.n	8007f4c <_vfiprintf_r+0x34>
 8007f48:	692b      	ldr	r3, [r5, #16]
 8007f4a:	b99b      	cbnz	r3, 8007f74 <_vfiprintf_r+0x5c>
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f7fe fc02 	bl	8006758 <__swsetup_r>
 8007f54:	b170      	cbz	r0, 8007f74 <_vfiprintf_r+0x5c>
 8007f56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f58:	07dc      	lsls	r4, r3, #31
 8007f5a:	d504      	bpl.n	8007f66 <_vfiprintf_r+0x4e>
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f60:	b01d      	add	sp, #116	@ 0x74
 8007f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f66:	89ab      	ldrh	r3, [r5, #12]
 8007f68:	0598      	lsls	r0, r3, #22
 8007f6a:	d4f7      	bmi.n	8007f5c <_vfiprintf_r+0x44>
 8007f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f6e:	f7fe fcc7 	bl	8006900 <__retarget_lock_release_recursive>
 8007f72:	e7f3      	b.n	8007f5c <_vfiprintf_r+0x44>
 8007f74:	2300      	movs	r3, #0
 8007f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f78:	2320      	movs	r3, #32
 8007f7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f82:	2330      	movs	r3, #48	@ 0x30
 8007f84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008134 <_vfiprintf_r+0x21c>
 8007f88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f8c:	f04f 0901 	mov.w	r9, #1
 8007f90:	4623      	mov	r3, r4
 8007f92:	469a      	mov	sl, r3
 8007f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f98:	b10a      	cbz	r2, 8007f9e <_vfiprintf_r+0x86>
 8007f9a:	2a25      	cmp	r2, #37	@ 0x25
 8007f9c:	d1f9      	bne.n	8007f92 <_vfiprintf_r+0x7a>
 8007f9e:	ebba 0b04 	subs.w	fp, sl, r4
 8007fa2:	d00b      	beq.n	8007fbc <_vfiprintf_r+0xa4>
 8007fa4:	465b      	mov	r3, fp
 8007fa6:	4622      	mov	r2, r4
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4630      	mov	r0, r6
 8007fac:	f7ff ffa1 	bl	8007ef2 <__sfputs_r>
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	f000 80a7 	beq.w	8008104 <_vfiprintf_r+0x1ec>
 8007fb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fb8:	445a      	add	r2, fp
 8007fba:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 809f 	beq.w	8008104 <_vfiprintf_r+0x1ec>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fd0:	f10a 0a01 	add.w	sl, sl, #1
 8007fd4:	9304      	str	r3, [sp, #16]
 8007fd6:	9307      	str	r3, [sp, #28]
 8007fd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007fdc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fde:	4654      	mov	r4, sl
 8007fe0:	2205      	movs	r2, #5
 8007fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fe6:	4853      	ldr	r0, [pc, #332]	@ (8008134 <_vfiprintf_r+0x21c>)
 8007fe8:	f7f8 f8fa 	bl	80001e0 <memchr>
 8007fec:	9a04      	ldr	r2, [sp, #16]
 8007fee:	b9d8      	cbnz	r0, 8008028 <_vfiprintf_r+0x110>
 8007ff0:	06d1      	lsls	r1, r2, #27
 8007ff2:	bf44      	itt	mi
 8007ff4:	2320      	movmi	r3, #32
 8007ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ffa:	0713      	lsls	r3, r2, #28
 8007ffc:	bf44      	itt	mi
 8007ffe:	232b      	movmi	r3, #43	@ 0x2b
 8008000:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008004:	f89a 3000 	ldrb.w	r3, [sl]
 8008008:	2b2a      	cmp	r3, #42	@ 0x2a
 800800a:	d015      	beq.n	8008038 <_vfiprintf_r+0x120>
 800800c:	9a07      	ldr	r2, [sp, #28]
 800800e:	4654      	mov	r4, sl
 8008010:	2000      	movs	r0, #0
 8008012:	f04f 0c0a 	mov.w	ip, #10
 8008016:	4621      	mov	r1, r4
 8008018:	f811 3b01 	ldrb.w	r3, [r1], #1
 800801c:	3b30      	subs	r3, #48	@ 0x30
 800801e:	2b09      	cmp	r3, #9
 8008020:	d94b      	bls.n	80080ba <_vfiprintf_r+0x1a2>
 8008022:	b1b0      	cbz	r0, 8008052 <_vfiprintf_r+0x13a>
 8008024:	9207      	str	r2, [sp, #28]
 8008026:	e014      	b.n	8008052 <_vfiprintf_r+0x13a>
 8008028:	eba0 0308 	sub.w	r3, r0, r8
 800802c:	fa09 f303 	lsl.w	r3, r9, r3
 8008030:	4313      	orrs	r3, r2
 8008032:	9304      	str	r3, [sp, #16]
 8008034:	46a2      	mov	sl, r4
 8008036:	e7d2      	b.n	8007fde <_vfiprintf_r+0xc6>
 8008038:	9b03      	ldr	r3, [sp, #12]
 800803a:	1d19      	adds	r1, r3, #4
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	9103      	str	r1, [sp, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	bfbb      	ittet	lt
 8008044:	425b      	neglt	r3, r3
 8008046:	f042 0202 	orrlt.w	r2, r2, #2
 800804a:	9307      	strge	r3, [sp, #28]
 800804c:	9307      	strlt	r3, [sp, #28]
 800804e:	bfb8      	it	lt
 8008050:	9204      	strlt	r2, [sp, #16]
 8008052:	7823      	ldrb	r3, [r4, #0]
 8008054:	2b2e      	cmp	r3, #46	@ 0x2e
 8008056:	d10a      	bne.n	800806e <_vfiprintf_r+0x156>
 8008058:	7863      	ldrb	r3, [r4, #1]
 800805a:	2b2a      	cmp	r3, #42	@ 0x2a
 800805c:	d132      	bne.n	80080c4 <_vfiprintf_r+0x1ac>
 800805e:	9b03      	ldr	r3, [sp, #12]
 8008060:	1d1a      	adds	r2, r3, #4
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	9203      	str	r2, [sp, #12]
 8008066:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800806a:	3402      	adds	r4, #2
 800806c:	9305      	str	r3, [sp, #20]
 800806e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008144 <_vfiprintf_r+0x22c>
 8008072:	7821      	ldrb	r1, [r4, #0]
 8008074:	2203      	movs	r2, #3
 8008076:	4650      	mov	r0, sl
 8008078:	f7f8 f8b2 	bl	80001e0 <memchr>
 800807c:	b138      	cbz	r0, 800808e <_vfiprintf_r+0x176>
 800807e:	9b04      	ldr	r3, [sp, #16]
 8008080:	eba0 000a 	sub.w	r0, r0, sl
 8008084:	2240      	movs	r2, #64	@ 0x40
 8008086:	4082      	lsls	r2, r0
 8008088:	4313      	orrs	r3, r2
 800808a:	3401      	adds	r4, #1
 800808c:	9304      	str	r3, [sp, #16]
 800808e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008092:	4829      	ldr	r0, [pc, #164]	@ (8008138 <_vfiprintf_r+0x220>)
 8008094:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008098:	2206      	movs	r2, #6
 800809a:	f7f8 f8a1 	bl	80001e0 <memchr>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d03f      	beq.n	8008122 <_vfiprintf_r+0x20a>
 80080a2:	4b26      	ldr	r3, [pc, #152]	@ (800813c <_vfiprintf_r+0x224>)
 80080a4:	bb1b      	cbnz	r3, 80080ee <_vfiprintf_r+0x1d6>
 80080a6:	9b03      	ldr	r3, [sp, #12]
 80080a8:	3307      	adds	r3, #7
 80080aa:	f023 0307 	bic.w	r3, r3, #7
 80080ae:	3308      	adds	r3, #8
 80080b0:	9303      	str	r3, [sp, #12]
 80080b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080b4:	443b      	add	r3, r7
 80080b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80080b8:	e76a      	b.n	8007f90 <_vfiprintf_r+0x78>
 80080ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80080be:	460c      	mov	r4, r1
 80080c0:	2001      	movs	r0, #1
 80080c2:	e7a8      	b.n	8008016 <_vfiprintf_r+0xfe>
 80080c4:	2300      	movs	r3, #0
 80080c6:	3401      	adds	r4, #1
 80080c8:	9305      	str	r3, [sp, #20]
 80080ca:	4619      	mov	r1, r3
 80080cc:	f04f 0c0a 	mov.w	ip, #10
 80080d0:	4620      	mov	r0, r4
 80080d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080d6:	3a30      	subs	r2, #48	@ 0x30
 80080d8:	2a09      	cmp	r2, #9
 80080da:	d903      	bls.n	80080e4 <_vfiprintf_r+0x1cc>
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0c6      	beq.n	800806e <_vfiprintf_r+0x156>
 80080e0:	9105      	str	r1, [sp, #20]
 80080e2:	e7c4      	b.n	800806e <_vfiprintf_r+0x156>
 80080e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80080e8:	4604      	mov	r4, r0
 80080ea:	2301      	movs	r3, #1
 80080ec:	e7f0      	b.n	80080d0 <_vfiprintf_r+0x1b8>
 80080ee:	ab03      	add	r3, sp, #12
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	462a      	mov	r2, r5
 80080f4:	4b12      	ldr	r3, [pc, #72]	@ (8008140 <_vfiprintf_r+0x228>)
 80080f6:	a904      	add	r1, sp, #16
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7fd fdc3 	bl	8005c84 <_printf_float>
 80080fe:	4607      	mov	r7, r0
 8008100:	1c78      	adds	r0, r7, #1
 8008102:	d1d6      	bne.n	80080b2 <_vfiprintf_r+0x19a>
 8008104:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008106:	07d9      	lsls	r1, r3, #31
 8008108:	d405      	bmi.n	8008116 <_vfiprintf_r+0x1fe>
 800810a:	89ab      	ldrh	r3, [r5, #12]
 800810c:	059a      	lsls	r2, r3, #22
 800810e:	d402      	bmi.n	8008116 <_vfiprintf_r+0x1fe>
 8008110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008112:	f7fe fbf5 	bl	8006900 <__retarget_lock_release_recursive>
 8008116:	89ab      	ldrh	r3, [r5, #12]
 8008118:	065b      	lsls	r3, r3, #25
 800811a:	f53f af1f 	bmi.w	8007f5c <_vfiprintf_r+0x44>
 800811e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008120:	e71e      	b.n	8007f60 <_vfiprintf_r+0x48>
 8008122:	ab03      	add	r3, sp, #12
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	462a      	mov	r2, r5
 8008128:	4b05      	ldr	r3, [pc, #20]	@ (8008140 <_vfiprintf_r+0x228>)
 800812a:	a904      	add	r1, sp, #16
 800812c:	4630      	mov	r0, r6
 800812e:	f7fe f841 	bl	80061b4 <_printf_i>
 8008132:	e7e4      	b.n	80080fe <_vfiprintf_r+0x1e6>
 8008134:	08008b82 	.word	0x08008b82
 8008138:	08008b8c 	.word	0x08008b8c
 800813c:	08005c85 	.word	0x08005c85
 8008140:	08007ef3 	.word	0x08007ef3
 8008144:	08008b88 	.word	0x08008b88

08008148 <__sflush_r>:
 8008148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800814c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008150:	0716      	lsls	r6, r2, #28
 8008152:	4605      	mov	r5, r0
 8008154:	460c      	mov	r4, r1
 8008156:	d454      	bmi.n	8008202 <__sflush_r+0xba>
 8008158:	684b      	ldr	r3, [r1, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	dc02      	bgt.n	8008164 <__sflush_r+0x1c>
 800815e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008160:	2b00      	cmp	r3, #0
 8008162:	dd48      	ble.n	80081f6 <__sflush_r+0xae>
 8008164:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008166:	2e00      	cmp	r6, #0
 8008168:	d045      	beq.n	80081f6 <__sflush_r+0xae>
 800816a:	2300      	movs	r3, #0
 800816c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008170:	682f      	ldr	r7, [r5, #0]
 8008172:	6a21      	ldr	r1, [r4, #32]
 8008174:	602b      	str	r3, [r5, #0]
 8008176:	d030      	beq.n	80081da <__sflush_r+0x92>
 8008178:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	0759      	lsls	r1, r3, #29
 800817e:	d505      	bpl.n	800818c <__sflush_r+0x44>
 8008180:	6863      	ldr	r3, [r4, #4]
 8008182:	1ad2      	subs	r2, r2, r3
 8008184:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008186:	b10b      	cbz	r3, 800818c <__sflush_r+0x44>
 8008188:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800818a:	1ad2      	subs	r2, r2, r3
 800818c:	2300      	movs	r3, #0
 800818e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008190:	6a21      	ldr	r1, [r4, #32]
 8008192:	4628      	mov	r0, r5
 8008194:	47b0      	blx	r6
 8008196:	1c43      	adds	r3, r0, #1
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	d106      	bne.n	80081aa <__sflush_r+0x62>
 800819c:	6829      	ldr	r1, [r5, #0]
 800819e:	291d      	cmp	r1, #29
 80081a0:	d82b      	bhi.n	80081fa <__sflush_r+0xb2>
 80081a2:	4a2a      	ldr	r2, [pc, #168]	@ (800824c <__sflush_r+0x104>)
 80081a4:	40ca      	lsrs	r2, r1
 80081a6:	07d6      	lsls	r6, r2, #31
 80081a8:	d527      	bpl.n	80081fa <__sflush_r+0xb2>
 80081aa:	2200      	movs	r2, #0
 80081ac:	6062      	str	r2, [r4, #4]
 80081ae:	04d9      	lsls	r1, r3, #19
 80081b0:	6922      	ldr	r2, [r4, #16]
 80081b2:	6022      	str	r2, [r4, #0]
 80081b4:	d504      	bpl.n	80081c0 <__sflush_r+0x78>
 80081b6:	1c42      	adds	r2, r0, #1
 80081b8:	d101      	bne.n	80081be <__sflush_r+0x76>
 80081ba:	682b      	ldr	r3, [r5, #0]
 80081bc:	b903      	cbnz	r3, 80081c0 <__sflush_r+0x78>
 80081be:	6560      	str	r0, [r4, #84]	@ 0x54
 80081c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081c2:	602f      	str	r7, [r5, #0]
 80081c4:	b1b9      	cbz	r1, 80081f6 <__sflush_r+0xae>
 80081c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081ca:	4299      	cmp	r1, r3
 80081cc:	d002      	beq.n	80081d4 <__sflush_r+0x8c>
 80081ce:	4628      	mov	r0, r5
 80081d0:	f7ff f9fe 	bl	80075d0 <_free_r>
 80081d4:	2300      	movs	r3, #0
 80081d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80081d8:	e00d      	b.n	80081f6 <__sflush_r+0xae>
 80081da:	2301      	movs	r3, #1
 80081dc:	4628      	mov	r0, r5
 80081de:	47b0      	blx	r6
 80081e0:	4602      	mov	r2, r0
 80081e2:	1c50      	adds	r0, r2, #1
 80081e4:	d1c9      	bne.n	800817a <__sflush_r+0x32>
 80081e6:	682b      	ldr	r3, [r5, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d0c6      	beq.n	800817a <__sflush_r+0x32>
 80081ec:	2b1d      	cmp	r3, #29
 80081ee:	d001      	beq.n	80081f4 <__sflush_r+0xac>
 80081f0:	2b16      	cmp	r3, #22
 80081f2:	d11e      	bne.n	8008232 <__sflush_r+0xea>
 80081f4:	602f      	str	r7, [r5, #0]
 80081f6:	2000      	movs	r0, #0
 80081f8:	e022      	b.n	8008240 <__sflush_r+0xf8>
 80081fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081fe:	b21b      	sxth	r3, r3
 8008200:	e01b      	b.n	800823a <__sflush_r+0xf2>
 8008202:	690f      	ldr	r7, [r1, #16]
 8008204:	2f00      	cmp	r7, #0
 8008206:	d0f6      	beq.n	80081f6 <__sflush_r+0xae>
 8008208:	0793      	lsls	r3, r2, #30
 800820a:	680e      	ldr	r6, [r1, #0]
 800820c:	bf08      	it	eq
 800820e:	694b      	ldreq	r3, [r1, #20]
 8008210:	600f      	str	r7, [r1, #0]
 8008212:	bf18      	it	ne
 8008214:	2300      	movne	r3, #0
 8008216:	eba6 0807 	sub.w	r8, r6, r7
 800821a:	608b      	str	r3, [r1, #8]
 800821c:	f1b8 0f00 	cmp.w	r8, #0
 8008220:	dde9      	ble.n	80081f6 <__sflush_r+0xae>
 8008222:	6a21      	ldr	r1, [r4, #32]
 8008224:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008226:	4643      	mov	r3, r8
 8008228:	463a      	mov	r2, r7
 800822a:	4628      	mov	r0, r5
 800822c:	47b0      	blx	r6
 800822e:	2800      	cmp	r0, #0
 8008230:	dc08      	bgt.n	8008244 <__sflush_r+0xfc>
 8008232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800823a:	81a3      	strh	r3, [r4, #12]
 800823c:	f04f 30ff 	mov.w	r0, #4294967295
 8008240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008244:	4407      	add	r7, r0
 8008246:	eba8 0800 	sub.w	r8, r8, r0
 800824a:	e7e7      	b.n	800821c <__sflush_r+0xd4>
 800824c:	20400001 	.word	0x20400001

08008250 <_fflush_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	690b      	ldr	r3, [r1, #16]
 8008254:	4605      	mov	r5, r0
 8008256:	460c      	mov	r4, r1
 8008258:	b913      	cbnz	r3, 8008260 <_fflush_r+0x10>
 800825a:	2500      	movs	r5, #0
 800825c:	4628      	mov	r0, r5
 800825e:	bd38      	pop	{r3, r4, r5, pc}
 8008260:	b118      	cbz	r0, 800826a <_fflush_r+0x1a>
 8008262:	6a03      	ldr	r3, [r0, #32]
 8008264:	b90b      	cbnz	r3, 800826a <_fflush_r+0x1a>
 8008266:	f7fe f94f 	bl	8006508 <__sinit>
 800826a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0f3      	beq.n	800825a <_fflush_r+0xa>
 8008272:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008274:	07d0      	lsls	r0, r2, #31
 8008276:	d404      	bmi.n	8008282 <_fflush_r+0x32>
 8008278:	0599      	lsls	r1, r3, #22
 800827a:	d402      	bmi.n	8008282 <_fflush_r+0x32>
 800827c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800827e:	f7fe fb3e 	bl	80068fe <__retarget_lock_acquire_recursive>
 8008282:	4628      	mov	r0, r5
 8008284:	4621      	mov	r1, r4
 8008286:	f7ff ff5f 	bl	8008148 <__sflush_r>
 800828a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800828c:	07da      	lsls	r2, r3, #31
 800828e:	4605      	mov	r5, r0
 8008290:	d4e4      	bmi.n	800825c <_fflush_r+0xc>
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	059b      	lsls	r3, r3, #22
 8008296:	d4e1      	bmi.n	800825c <_fflush_r+0xc>
 8008298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800829a:	f7fe fb31 	bl	8006900 <__retarget_lock_release_recursive>
 800829e:	e7dd      	b.n	800825c <_fflush_r+0xc>

080082a0 <__swhatbuf_r>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	460c      	mov	r4, r1
 80082a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a8:	2900      	cmp	r1, #0
 80082aa:	b096      	sub	sp, #88	@ 0x58
 80082ac:	4615      	mov	r5, r2
 80082ae:	461e      	mov	r6, r3
 80082b0:	da0d      	bge.n	80082ce <__swhatbuf_r+0x2e>
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082b8:	f04f 0100 	mov.w	r1, #0
 80082bc:	bf14      	ite	ne
 80082be:	2340      	movne	r3, #64	@ 0x40
 80082c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082c4:	2000      	movs	r0, #0
 80082c6:	6031      	str	r1, [r6, #0]
 80082c8:	602b      	str	r3, [r5, #0]
 80082ca:	b016      	add	sp, #88	@ 0x58
 80082cc:	bd70      	pop	{r4, r5, r6, pc}
 80082ce:	466a      	mov	r2, sp
 80082d0:	f000 f848 	bl	8008364 <_fstat_r>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	dbec      	blt.n	80082b2 <__swhatbuf_r+0x12>
 80082d8:	9901      	ldr	r1, [sp, #4]
 80082da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082e2:	4259      	negs	r1, r3
 80082e4:	4159      	adcs	r1, r3
 80082e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082ea:	e7eb      	b.n	80082c4 <__swhatbuf_r+0x24>

080082ec <__smakebuf_r>:
 80082ec:	898b      	ldrh	r3, [r1, #12]
 80082ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082f0:	079d      	lsls	r5, r3, #30
 80082f2:	4606      	mov	r6, r0
 80082f4:	460c      	mov	r4, r1
 80082f6:	d507      	bpl.n	8008308 <__smakebuf_r+0x1c>
 80082f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	6123      	str	r3, [r4, #16]
 8008300:	2301      	movs	r3, #1
 8008302:	6163      	str	r3, [r4, #20]
 8008304:	b003      	add	sp, #12
 8008306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008308:	ab01      	add	r3, sp, #4
 800830a:	466a      	mov	r2, sp
 800830c:	f7ff ffc8 	bl	80082a0 <__swhatbuf_r>
 8008310:	9f00      	ldr	r7, [sp, #0]
 8008312:	4605      	mov	r5, r0
 8008314:	4639      	mov	r1, r7
 8008316:	4630      	mov	r0, r6
 8008318:	f7ff f9ce 	bl	80076b8 <_malloc_r>
 800831c:	b948      	cbnz	r0, 8008332 <__smakebuf_r+0x46>
 800831e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008322:	059a      	lsls	r2, r3, #22
 8008324:	d4ee      	bmi.n	8008304 <__smakebuf_r+0x18>
 8008326:	f023 0303 	bic.w	r3, r3, #3
 800832a:	f043 0302 	orr.w	r3, r3, #2
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	e7e2      	b.n	80082f8 <__smakebuf_r+0xc>
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	6020      	str	r0, [r4, #0]
 8008336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	9b01      	ldr	r3, [sp, #4]
 800833e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008342:	b15b      	cbz	r3, 800835c <__smakebuf_r+0x70>
 8008344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008348:	4630      	mov	r0, r6
 800834a:	f000 f81d 	bl	8008388 <_isatty_r>
 800834e:	b128      	cbz	r0, 800835c <__smakebuf_r+0x70>
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	f023 0303 	bic.w	r3, r3, #3
 8008356:	f043 0301 	orr.w	r3, r3, #1
 800835a:	81a3      	strh	r3, [r4, #12]
 800835c:	89a3      	ldrh	r3, [r4, #12]
 800835e:	431d      	orrs	r5, r3
 8008360:	81a5      	strh	r5, [r4, #12]
 8008362:	e7cf      	b.n	8008304 <__smakebuf_r+0x18>

08008364 <_fstat_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4d07      	ldr	r5, [pc, #28]	@ (8008384 <_fstat_r+0x20>)
 8008368:	2300      	movs	r3, #0
 800836a:	4604      	mov	r4, r0
 800836c:	4608      	mov	r0, r1
 800836e:	4611      	mov	r1, r2
 8008370:	602b      	str	r3, [r5, #0]
 8008372:	f7f9 fec1 	bl	80020f8 <_fstat>
 8008376:	1c43      	adds	r3, r0, #1
 8008378:	d102      	bne.n	8008380 <_fstat_r+0x1c>
 800837a:	682b      	ldr	r3, [r5, #0]
 800837c:	b103      	cbz	r3, 8008380 <_fstat_r+0x1c>
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	bd38      	pop	{r3, r4, r5, pc}
 8008382:	bf00      	nop
 8008384:	20000480 	.word	0x20000480

08008388 <_isatty_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4d06      	ldr	r5, [pc, #24]	@ (80083a4 <_isatty_r+0x1c>)
 800838c:	2300      	movs	r3, #0
 800838e:	4604      	mov	r4, r0
 8008390:	4608      	mov	r0, r1
 8008392:	602b      	str	r3, [r5, #0]
 8008394:	f7f9 fec0 	bl	8002118 <_isatty>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d102      	bne.n	80083a2 <_isatty_r+0x1a>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	b103      	cbz	r3, 80083a2 <_isatty_r+0x1a>
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	20000480 	.word	0x20000480

080083a8 <_sbrk_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d06      	ldr	r5, [pc, #24]	@ (80083c4 <_sbrk_r+0x1c>)
 80083ac:	2300      	movs	r3, #0
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	f7f9 fec8 	bl	8002148 <_sbrk>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_sbrk_r+0x1a>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_sbrk_r+0x1a>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	20000480 	.word	0x20000480

080083c8 <__assert_func>:
 80083c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083ca:	4614      	mov	r4, r2
 80083cc:	461a      	mov	r2, r3
 80083ce:	4b09      	ldr	r3, [pc, #36]	@ (80083f4 <__assert_func+0x2c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4605      	mov	r5, r0
 80083d4:	68d8      	ldr	r0, [r3, #12]
 80083d6:	b14c      	cbz	r4, 80083ec <__assert_func+0x24>
 80083d8:	4b07      	ldr	r3, [pc, #28]	@ (80083f8 <__assert_func+0x30>)
 80083da:	9100      	str	r1, [sp, #0]
 80083dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083e0:	4906      	ldr	r1, [pc, #24]	@ (80083fc <__assert_func+0x34>)
 80083e2:	462b      	mov	r3, r5
 80083e4:	f000 f842 	bl	800846c <fiprintf>
 80083e8:	f000 f852 	bl	8008490 <abort>
 80083ec:	4b04      	ldr	r3, [pc, #16]	@ (8008400 <__assert_func+0x38>)
 80083ee:	461c      	mov	r4, r3
 80083f0:	e7f3      	b.n	80083da <__assert_func+0x12>
 80083f2:	bf00      	nop
 80083f4:	20000020 	.word	0x20000020
 80083f8:	08008b9d 	.word	0x08008b9d
 80083fc:	08008baa 	.word	0x08008baa
 8008400:	08008bd8 	.word	0x08008bd8

08008404 <_calloc_r>:
 8008404:	b570      	push	{r4, r5, r6, lr}
 8008406:	fba1 5402 	umull	r5, r4, r1, r2
 800840a:	b934      	cbnz	r4, 800841a <_calloc_r+0x16>
 800840c:	4629      	mov	r1, r5
 800840e:	f7ff f953 	bl	80076b8 <_malloc_r>
 8008412:	4606      	mov	r6, r0
 8008414:	b928      	cbnz	r0, 8008422 <_calloc_r+0x1e>
 8008416:	4630      	mov	r0, r6
 8008418:	bd70      	pop	{r4, r5, r6, pc}
 800841a:	220c      	movs	r2, #12
 800841c:	6002      	str	r2, [r0, #0]
 800841e:	2600      	movs	r6, #0
 8008420:	e7f9      	b.n	8008416 <_calloc_r+0x12>
 8008422:	462a      	mov	r2, r5
 8008424:	4621      	mov	r1, r4
 8008426:	f7fe f9ed 	bl	8006804 <memset>
 800842a:	e7f4      	b.n	8008416 <_calloc_r+0x12>

0800842c <__ascii_mbtowc>:
 800842c:	b082      	sub	sp, #8
 800842e:	b901      	cbnz	r1, 8008432 <__ascii_mbtowc+0x6>
 8008430:	a901      	add	r1, sp, #4
 8008432:	b142      	cbz	r2, 8008446 <__ascii_mbtowc+0x1a>
 8008434:	b14b      	cbz	r3, 800844a <__ascii_mbtowc+0x1e>
 8008436:	7813      	ldrb	r3, [r2, #0]
 8008438:	600b      	str	r3, [r1, #0]
 800843a:	7812      	ldrb	r2, [r2, #0]
 800843c:	1e10      	subs	r0, r2, #0
 800843e:	bf18      	it	ne
 8008440:	2001      	movne	r0, #1
 8008442:	b002      	add	sp, #8
 8008444:	4770      	bx	lr
 8008446:	4610      	mov	r0, r2
 8008448:	e7fb      	b.n	8008442 <__ascii_mbtowc+0x16>
 800844a:	f06f 0001 	mvn.w	r0, #1
 800844e:	e7f8      	b.n	8008442 <__ascii_mbtowc+0x16>

08008450 <__ascii_wctomb>:
 8008450:	4603      	mov	r3, r0
 8008452:	4608      	mov	r0, r1
 8008454:	b141      	cbz	r1, 8008468 <__ascii_wctomb+0x18>
 8008456:	2aff      	cmp	r2, #255	@ 0xff
 8008458:	d904      	bls.n	8008464 <__ascii_wctomb+0x14>
 800845a:	228a      	movs	r2, #138	@ 0x8a
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	f04f 30ff 	mov.w	r0, #4294967295
 8008462:	4770      	bx	lr
 8008464:	700a      	strb	r2, [r1, #0]
 8008466:	2001      	movs	r0, #1
 8008468:	4770      	bx	lr
	...

0800846c <fiprintf>:
 800846c:	b40e      	push	{r1, r2, r3}
 800846e:	b503      	push	{r0, r1, lr}
 8008470:	4601      	mov	r1, r0
 8008472:	ab03      	add	r3, sp, #12
 8008474:	4805      	ldr	r0, [pc, #20]	@ (800848c <fiprintf+0x20>)
 8008476:	f853 2b04 	ldr.w	r2, [r3], #4
 800847a:	6800      	ldr	r0, [r0, #0]
 800847c:	9301      	str	r3, [sp, #4]
 800847e:	f7ff fd4b 	bl	8007f18 <_vfiprintf_r>
 8008482:	b002      	add	sp, #8
 8008484:	f85d eb04 	ldr.w	lr, [sp], #4
 8008488:	b003      	add	sp, #12
 800848a:	4770      	bx	lr
 800848c:	20000020 	.word	0x20000020

08008490 <abort>:
 8008490:	b508      	push	{r3, lr}
 8008492:	2006      	movs	r0, #6
 8008494:	f000 f82c 	bl	80084f0 <raise>
 8008498:	2001      	movs	r0, #1
 800849a:	f7f9 fddd 	bl	8002058 <_exit>

0800849e <_raise_r>:
 800849e:	291f      	cmp	r1, #31
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4605      	mov	r5, r0
 80084a4:	460c      	mov	r4, r1
 80084a6:	d904      	bls.n	80084b2 <_raise_r+0x14>
 80084a8:	2316      	movs	r3, #22
 80084aa:	6003      	str	r3, [r0, #0]
 80084ac:	f04f 30ff 	mov.w	r0, #4294967295
 80084b0:	bd38      	pop	{r3, r4, r5, pc}
 80084b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80084b4:	b112      	cbz	r2, 80084bc <_raise_r+0x1e>
 80084b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084ba:	b94b      	cbnz	r3, 80084d0 <_raise_r+0x32>
 80084bc:	4628      	mov	r0, r5
 80084be:	f000 f831 	bl	8008524 <_getpid_r>
 80084c2:	4622      	mov	r2, r4
 80084c4:	4601      	mov	r1, r0
 80084c6:	4628      	mov	r0, r5
 80084c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084cc:	f000 b818 	b.w	8008500 <_kill_r>
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d00a      	beq.n	80084ea <_raise_r+0x4c>
 80084d4:	1c59      	adds	r1, r3, #1
 80084d6:	d103      	bne.n	80084e0 <_raise_r+0x42>
 80084d8:	2316      	movs	r3, #22
 80084da:	6003      	str	r3, [r0, #0]
 80084dc:	2001      	movs	r0, #1
 80084de:	e7e7      	b.n	80084b0 <_raise_r+0x12>
 80084e0:	2100      	movs	r1, #0
 80084e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80084e6:	4620      	mov	r0, r4
 80084e8:	4798      	blx	r3
 80084ea:	2000      	movs	r0, #0
 80084ec:	e7e0      	b.n	80084b0 <_raise_r+0x12>
	...

080084f0 <raise>:
 80084f0:	4b02      	ldr	r3, [pc, #8]	@ (80084fc <raise+0xc>)
 80084f2:	4601      	mov	r1, r0
 80084f4:	6818      	ldr	r0, [r3, #0]
 80084f6:	f7ff bfd2 	b.w	800849e <_raise_r>
 80084fa:	bf00      	nop
 80084fc:	20000020 	.word	0x20000020

08008500 <_kill_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4d07      	ldr	r5, [pc, #28]	@ (8008520 <_kill_r+0x20>)
 8008504:	2300      	movs	r3, #0
 8008506:	4604      	mov	r4, r0
 8008508:	4608      	mov	r0, r1
 800850a:	4611      	mov	r1, r2
 800850c:	602b      	str	r3, [r5, #0]
 800850e:	f7f9 fd93 	bl	8002038 <_kill>
 8008512:	1c43      	adds	r3, r0, #1
 8008514:	d102      	bne.n	800851c <_kill_r+0x1c>
 8008516:	682b      	ldr	r3, [r5, #0]
 8008518:	b103      	cbz	r3, 800851c <_kill_r+0x1c>
 800851a:	6023      	str	r3, [r4, #0]
 800851c:	bd38      	pop	{r3, r4, r5, pc}
 800851e:	bf00      	nop
 8008520:	20000480 	.word	0x20000480

08008524 <_getpid_r>:
 8008524:	f7f9 bd80 	b.w	8002028 <_getpid>

08008528 <atan2f>:
 8008528:	f000 b800 	b.w	800852c <__ieee754_atan2f>

0800852c <__ieee754_atan2f>:
 800852c:	ee10 2a90 	vmov	r2, s1
 8008530:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8008534:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008538:	b510      	push	{r4, lr}
 800853a:	eef0 7a40 	vmov.f32	s15, s0
 800853e:	d806      	bhi.n	800854e <__ieee754_atan2f+0x22>
 8008540:	ee10 0a10 	vmov	r0, s0
 8008544:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008548:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800854c:	d904      	bls.n	8008558 <__ieee754_atan2f+0x2c>
 800854e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008552:	eeb0 0a67 	vmov.f32	s0, s15
 8008556:	bd10      	pop	{r4, pc}
 8008558:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800855c:	d103      	bne.n	8008566 <__ieee754_atan2f+0x3a>
 800855e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008562:	f000 b883 	b.w	800866c <atanf>
 8008566:	1794      	asrs	r4, r2, #30
 8008568:	f004 0402 	and.w	r4, r4, #2
 800856c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008570:	b943      	cbnz	r3, 8008584 <__ieee754_atan2f+0x58>
 8008572:	2c02      	cmp	r4, #2
 8008574:	d05e      	beq.n	8008634 <__ieee754_atan2f+0x108>
 8008576:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8008648 <__ieee754_atan2f+0x11c>
 800857a:	2c03      	cmp	r4, #3
 800857c:	bf08      	it	eq
 800857e:	eef0 7a47 	vmoveq.f32	s15, s14
 8008582:	e7e6      	b.n	8008552 <__ieee754_atan2f+0x26>
 8008584:	b941      	cbnz	r1, 8008598 <__ieee754_atan2f+0x6c>
 8008586:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800864c <__ieee754_atan2f+0x120>
 800858a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8008650 <__ieee754_atan2f+0x124>
 800858e:	2800      	cmp	r0, #0
 8008590:	bfa8      	it	ge
 8008592:	eef0 7a47 	vmovge.f32	s15, s14
 8008596:	e7dc      	b.n	8008552 <__ieee754_atan2f+0x26>
 8008598:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800859c:	d110      	bne.n	80085c0 <__ieee754_atan2f+0x94>
 800859e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80085a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80085a6:	d107      	bne.n	80085b8 <__ieee754_atan2f+0x8c>
 80085a8:	2c02      	cmp	r4, #2
 80085aa:	d846      	bhi.n	800863a <__ieee754_atan2f+0x10e>
 80085ac:	4b29      	ldr	r3, [pc, #164]	@ (8008654 <__ieee754_atan2f+0x128>)
 80085ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80085b2:	edd3 7a00 	vldr	s15, [r3]
 80085b6:	e7cc      	b.n	8008552 <__ieee754_atan2f+0x26>
 80085b8:	2c02      	cmp	r4, #2
 80085ba:	d841      	bhi.n	8008640 <__ieee754_atan2f+0x114>
 80085bc:	4b26      	ldr	r3, [pc, #152]	@ (8008658 <__ieee754_atan2f+0x12c>)
 80085be:	e7f6      	b.n	80085ae <__ieee754_atan2f+0x82>
 80085c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80085c4:	d0df      	beq.n	8008586 <__ieee754_atan2f+0x5a>
 80085c6:	1a5b      	subs	r3, r3, r1
 80085c8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80085cc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80085d0:	da1a      	bge.n	8008608 <__ieee754_atan2f+0xdc>
 80085d2:	2a00      	cmp	r2, #0
 80085d4:	da01      	bge.n	80085da <__ieee754_atan2f+0xae>
 80085d6:	313c      	adds	r1, #60	@ 0x3c
 80085d8:	db19      	blt.n	800860e <__ieee754_atan2f+0xe2>
 80085da:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80085de:	f000 f919 	bl	8008814 <fabsf>
 80085e2:	f000 f843 	bl	800866c <atanf>
 80085e6:	eef0 7a40 	vmov.f32	s15, s0
 80085ea:	2c01      	cmp	r4, #1
 80085ec:	d012      	beq.n	8008614 <__ieee754_atan2f+0xe8>
 80085ee:	2c02      	cmp	r4, #2
 80085f0:	d017      	beq.n	8008622 <__ieee754_atan2f+0xf6>
 80085f2:	2c00      	cmp	r4, #0
 80085f4:	d0ad      	beq.n	8008552 <__ieee754_atan2f+0x26>
 80085f6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800865c <__ieee754_atan2f+0x130>
 80085fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085fe:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008660 <__ieee754_atan2f+0x134>
 8008602:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008606:	e7a4      	b.n	8008552 <__ieee754_atan2f+0x26>
 8008608:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8008650 <__ieee754_atan2f+0x124>
 800860c:	e7ed      	b.n	80085ea <__ieee754_atan2f+0xbe>
 800860e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008664 <__ieee754_atan2f+0x138>
 8008612:	e7ea      	b.n	80085ea <__ieee754_atan2f+0xbe>
 8008614:	ee17 3a90 	vmov	r3, s15
 8008618:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	e797      	b.n	8008552 <__ieee754_atan2f+0x26>
 8008622:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800865c <__ieee754_atan2f+0x130>
 8008626:	ee77 7a87 	vadd.f32	s15, s15, s14
 800862a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8008660 <__ieee754_atan2f+0x134>
 800862e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008632:	e78e      	b.n	8008552 <__ieee754_atan2f+0x26>
 8008634:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8008660 <__ieee754_atan2f+0x134>
 8008638:	e78b      	b.n	8008552 <__ieee754_atan2f+0x26>
 800863a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8008668 <__ieee754_atan2f+0x13c>
 800863e:	e788      	b.n	8008552 <__ieee754_atan2f+0x26>
 8008640:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8008664 <__ieee754_atan2f+0x138>
 8008644:	e785      	b.n	8008552 <__ieee754_atan2f+0x26>
 8008646:	bf00      	nop
 8008648:	c0490fdb 	.word	0xc0490fdb
 800864c:	bfc90fdb 	.word	0xbfc90fdb
 8008650:	3fc90fdb 	.word	0x3fc90fdb
 8008654:	08008de8 	.word	0x08008de8
 8008658:	08008ddc 	.word	0x08008ddc
 800865c:	33bbbd2e 	.word	0x33bbbd2e
 8008660:	40490fdb 	.word	0x40490fdb
 8008664:	00000000 	.word	0x00000000
 8008668:	3f490fdb 	.word	0x3f490fdb

0800866c <atanf>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	ee10 5a10 	vmov	r5, s0
 8008672:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8008676:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800867a:	eef0 7a40 	vmov.f32	s15, s0
 800867e:	d310      	bcc.n	80086a2 <atanf+0x36>
 8008680:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8008684:	d904      	bls.n	8008690 <atanf+0x24>
 8008686:	ee70 7a00 	vadd.f32	s15, s0, s0
 800868a:	eeb0 0a67 	vmov.f32	s0, s15
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80087c8 <atanf+0x15c>
 8008694:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80087cc <atanf+0x160>
 8008698:	2d00      	cmp	r5, #0
 800869a:	bfc8      	it	gt
 800869c:	eef0 7a47 	vmovgt.f32	s15, s14
 80086a0:	e7f3      	b.n	800868a <atanf+0x1e>
 80086a2:	4b4b      	ldr	r3, [pc, #300]	@ (80087d0 <atanf+0x164>)
 80086a4:	429c      	cmp	r4, r3
 80086a6:	d810      	bhi.n	80086ca <atanf+0x5e>
 80086a8:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80086ac:	d20a      	bcs.n	80086c4 <atanf+0x58>
 80086ae:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80087d4 <atanf+0x168>
 80086b2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80086b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086ba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80086be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086c2:	dce2      	bgt.n	800868a <atanf+0x1e>
 80086c4:	f04f 33ff 	mov.w	r3, #4294967295
 80086c8:	e013      	b.n	80086f2 <atanf+0x86>
 80086ca:	f000 f8a3 	bl	8008814 <fabsf>
 80086ce:	4b42      	ldr	r3, [pc, #264]	@ (80087d8 <atanf+0x16c>)
 80086d0:	429c      	cmp	r4, r3
 80086d2:	d84f      	bhi.n	8008774 <atanf+0x108>
 80086d4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80086d8:	429c      	cmp	r4, r3
 80086da:	d841      	bhi.n	8008760 <atanf+0xf4>
 80086dc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80086e0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80086e4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80086e8:	2300      	movs	r3, #0
 80086ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80086ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80086f8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80087dc <atanf+0x170>
 80086fc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80087e0 <atanf+0x174>
 8008700:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80087e4 <atanf+0x178>
 8008704:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008708:	eee6 5a87 	vfma.f32	s11, s13, s14
 800870c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80087e8 <atanf+0x17c>
 8008710:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008714:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80087ec <atanf+0x180>
 8008718:	eee7 5a26 	vfma.f32	s11, s14, s13
 800871c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80087f0 <atanf+0x184>
 8008720:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008724:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80087f4 <atanf+0x188>
 8008728:	eee7 5a26 	vfma.f32	s11, s14, s13
 800872c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80087f8 <atanf+0x18c>
 8008730:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008734:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80087fc <atanf+0x190>
 8008738:	eea5 7a26 	vfma.f32	s14, s10, s13
 800873c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8008800 <atanf+0x194>
 8008740:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008744:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008804 <atanf+0x198>
 8008748:	eea5 7a26 	vfma.f32	s14, s10, s13
 800874c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008750:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008754:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008758:	d121      	bne.n	800879e <atanf+0x132>
 800875a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800875e:	e794      	b.n	800868a <atanf+0x1e>
 8008760:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008764:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008768:	ee30 0a27 	vadd.f32	s0, s0, s15
 800876c:	2301      	movs	r3, #1
 800876e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008772:	e7be      	b.n	80086f2 <atanf+0x86>
 8008774:	4b24      	ldr	r3, [pc, #144]	@ (8008808 <atanf+0x19c>)
 8008776:	429c      	cmp	r4, r3
 8008778:	d80b      	bhi.n	8008792 <atanf+0x126>
 800877a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800877e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008782:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008786:	2302      	movs	r3, #2
 8008788:	ee70 6a67 	vsub.f32	s13, s0, s15
 800878c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008790:	e7af      	b.n	80086f2 <atanf+0x86>
 8008792:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008796:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800879a:	2303      	movs	r3, #3
 800879c:	e7a9      	b.n	80086f2 <atanf+0x86>
 800879e:	4a1b      	ldr	r2, [pc, #108]	@ (800880c <atanf+0x1a0>)
 80087a0:	491b      	ldr	r1, [pc, #108]	@ (8008810 <atanf+0x1a4>)
 80087a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80087a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80087aa:	edd3 6a00 	vldr	s13, [r3]
 80087ae:	ee37 7a66 	vsub.f32	s14, s14, s13
 80087b2:	2d00      	cmp	r5, #0
 80087b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80087b8:	edd2 7a00 	vldr	s15, [r2]
 80087bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087c0:	bfb8      	it	lt
 80087c2:	eef1 7a67 	vneglt.f32	s15, s15
 80087c6:	e760      	b.n	800868a <atanf+0x1e>
 80087c8:	bfc90fdb 	.word	0xbfc90fdb
 80087cc:	3fc90fdb 	.word	0x3fc90fdb
 80087d0:	3edfffff 	.word	0x3edfffff
 80087d4:	7149f2ca 	.word	0x7149f2ca
 80087d8:	3f97ffff 	.word	0x3f97ffff
 80087dc:	3c8569d7 	.word	0x3c8569d7
 80087e0:	3d4bda59 	.word	0x3d4bda59
 80087e4:	bd6ef16b 	.word	0xbd6ef16b
 80087e8:	3d886b35 	.word	0x3d886b35
 80087ec:	3dba2e6e 	.word	0x3dba2e6e
 80087f0:	3e124925 	.word	0x3e124925
 80087f4:	3eaaaaab 	.word	0x3eaaaaab
 80087f8:	bd15a221 	.word	0xbd15a221
 80087fc:	bd9d8795 	.word	0xbd9d8795
 8008800:	bde38e38 	.word	0xbde38e38
 8008804:	be4ccccd 	.word	0xbe4ccccd
 8008808:	401bffff 	.word	0x401bffff
 800880c:	08008e04 	.word	0x08008e04
 8008810:	08008df4 	.word	0x08008df4

08008814 <fabsf>:
 8008814:	ee10 3a10 	vmov	r3, s0
 8008818:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800881c:	ee00 3a10 	vmov	s0, r3
 8008820:	4770      	bx	lr
	...

08008824 <_init>:
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	bf00      	nop
 8008828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882a:	bc08      	pop	{r3}
 800882c:	469e      	mov	lr, r3
 800882e:	4770      	bx	lr

08008830 <_fini>:
 8008830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008832:	bf00      	nop
 8008834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008836:	bc08      	pop	{r3}
 8008838:	469e      	mov	lr, r3
 800883a:	4770      	bx	lr
